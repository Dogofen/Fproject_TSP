
final_tsp.elf:     file format elf32-littlenios2
final_tsp.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000ef88 memsz 0x0000ef88 flags r-x
    LOAD off    0x0000ffa8 vaddr 0x0002efa8 paddr 0x0002fa40 align 2**12
         filesz 0x00000a98 memsz 0x00000a98 flags rw-
    LOAD off    0x000114d8 vaddr 0x000304d8 paddr 0x000304d8 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d96c  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001484  0002db24  0002db24  0000eb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a98  0002efa8  0002fa40  0000ffa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  000304d8  000304d8  000114d8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  00010a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00027bca  00000000  00000000  00011880  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009a7c  00000000  00000000  0003944a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b57e  00000000  00000000  00042ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b20  00000000  00000000  0004e444  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002f8d  00000000  00000000  0004ff64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011dac  00000000  00000000  00052ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  00064ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00064d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0006896e  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00068971  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00068974  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00068975  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00068976  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006897a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006897e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00068982  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0006898b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00068994  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  0006899d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000012  00000000  00000000  000689a4  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00077882  00000000  00000000  000689b6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
0002db24 l    d  .rodata	00000000 .rodata
0002efa8 l    d  .rwdata	00000000 .rwdata
000304d8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_tsp_bsp//obj/HAL/src/crt0.o
00020200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00021718 l     F .text	00000008 __fp_lock
00021720 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002efa8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0002334c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00023a20 l     F .text	00000034 __sprint_r
0002ea46 l     O .rodata	00000010 blanks.3515
0002ea56 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0002eb67 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00025b38 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0002ed08 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002ee50 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0002a148 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002ae88 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002b5f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002b710 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002b73c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002b83c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002b930 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002ba1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0002bbe8 l     F .text	00000050 alt_get_errno
0002bc38 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0002be80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002f9e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002c124 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002c264 l     F .text	00000038 alt_dev_reg
0002f964 l     O .rwdata	0000002c jtag_uart
0002f990 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002c570 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
0002fa28 l     O .rwdata	00000004 hcinfo.2311
0002fa1c l     O .rwdata	00000004 hcinfo.2324
0002fa10 l     O .rwdata	00000004 hcinfo.2333
0002fa04 l     O .rwdata	00000004 hcinfo.2346
0002f9f8 l     O .rwdata	00000004 hcinfo.2359
0002f9ec l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002ce10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002d4f4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00028b20 g     F .text	00000074 _mprec_log10
00028c10 g     F .text	00000084 __any_on
0002790c g     F .text	00000064 _isatty_r
0002ed38 g     O .rodata	00000028 __mprec_tinytens
0002bb40 g     F .text	00000068 alt_main
0002b5b0 g     F .text	00000044 __ashldi3
000232b4 g     F .text	00000084 _puts_r
00030534 g     O .bss	00000100 alt_irq
00027a4c g     F .text	0000006c _lseek_r
0002fa40 g       *ABS*	00000000 __flash_rwdata_start
00027390 g     F .text	00000098 __sflags
0002a9e8 g     F .text	0000005c __eqdf2
00030634 g       *ABS*	00000000 __alt_heap_start
00023694 g     F .text	0000005c __sseek
000217bc g     F .text	0000010c __sinit
00027970 g     F .text	0000009c _setlocale_r
00021734 g     F .text	00000078 __sfmoreglue
0002bbc8 g     F .text	00000020 __malloc_unlock
0002c66c g     F .text	0000016c alt_hostfs_open
000204e0 g     F .text	0000004c MapMenu6
00027ab8 g     F .text	0000018c memmove
000217ac g     F .text	00000010 _cleanup
00027c44 g     F .text	000000a8 _Balloc
0002aaa0 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
00020204 g     F .text	00000030 About
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022440 g     F .text	00000068 _fstat_r
000304d8 g     O .bss	00000004 errno
000304f8 g     O .bss	00000004 alt_argv
000379b8 g       *ABS*	00000000 _gp
0002c0f4 g     F .text	00000030 usleep
000216f4 g     F .text	00000024 fgets
0002f7e4 g     O .rwdata	00000180 alt_fd_list
0002c9b4 g     F .text	000000b8 alt_hostfs_seek
0002cf00 g     F .text	00000090 alt_find_dev
0002302c g     F .text	00000140 memcpy
0002101c g     F .text	000001bc MainMenu
00021728 g     F .text	0000000c _cleanup_r
0002abc4 g     F .text	000000d4 __floatsidf
0002d0a4 g     F .text	00000084 alt_fs_reg
0002d5d4 g     F .text	00000078 alt_io_redirect
0002ab68 g     F .text	0000005c __ltdf2
00023338 g     F .text	00000014 puts
00028a7c g     F .text	000000a4 __ratio
0002c3e4 g     F .text	000000f4 altera_avalon_jtag_uart_read
0002afa8 g     F .text	00000008 __udivsi3
0002b88c g     F .text	000000a4 isatty
0002ed88 g     O .rodata	000000c8 __mprec_tens
00027a0c g     F .text	0000000c __locale_charset
00020448 g     F .text	0000004c MapMenu4
0002d808 g     F .text	0000008c alt_icache_flush
000304e4 g     O .bss	00000004 __malloc_top_pad
0002f9cc g     O .rwdata	00000004 __mb_cur_max
00027a18 g     F .text	0000000c _localeconv_r
00028074 g     F .text	0000003c __i2b
00027428 g     F .text	000004e4 __sfvwrite_r
00023554 g     F .text	00000064 _sbrk_r
0002c844 g     F .text	000000b8 alt_hostfs_read
00028c94 g     F .text	0000006c _read_r
0002f7b0 g     O .rwdata	0000000c __lc_ctype
0002f9e0 g     O .rwdata	00000004 alt_max_fd
0002b398 g     F .text	00000104 __unpack_d
00021250 g     F .text	0000013c _fclose_r
00021588 g     F .text	00000030 fflush
000304e0 g     O .bss	00000004 __malloc_max_sbrked_mem
0002a49c g     F .text	00000054 __adddf3
000287f0 g     F .text	00000148 __b2d
00029b20 g     F .text	00000628 __umoddi3
0002ba6c g     F .text	000000d4 lseek
0002f9b8 g     O .rwdata	00000004 _global_impure_ptr
00028d00 g     F .text	000005fc _realloc_r
00030634 g       *ABS*	00000000 __bss_end
0002d404 g     F .text	000000f0 alt_iic_isr_register
0002d6e4 g     F .text	00000104 alt_tick
000294d0 g     F .text	00000650 __udivdi3
0002ed60 g     O .rodata	00000028 __mprec_bigtens
00027e58 g     F .text	00000104 __s2b
0002ad6c g     F .text	0000011c __floatunsidf
00028590 g     F .text	00000058 __mcmp
0002f9c8 g     O .rwdata	00000004 __ctype_ptr
000219d4 g     F .text	00000018 __fp_lock_all
0002d3b8 g     F .text	0000004c alt_ic_irq_enabled
0002d64c g     F .text	00000098 alt_alarm_stop
000239fc g     F .text	00000024 strtol
00030500 g     O .bss	00000004 alt_irq_active
00020578 g     F .text	0000041c MainMap
0002c7d8 g     F .text	0000006c alt_hostfs_close
000200ec g     F .exceptions	000000cc alt_irq_handler
0002f7bc g     O .rwdata	00000028 alt_dev_null
0002cdcc g     F .text	00000044 alt_dcache_flush_all
00027f5c g     F .text	00000068 __hi0bits
0002ac98 g     F .text	000000d4 __fixdfsi
0002fa40 g       *ABS*	00000000 __ram_rwdata_end
0002f9d8 g     O .rwdata	00000008 alt_dev_list
0002c174 g     F .text	000000f0 write
0002efa8 g       *ABS*	00000000 __ram_rodata_end
00020994 g     F .text	00000688 MainCalc
0002b78c g     F .text	000000b0 fstat
00021b78 g     F .text	00000024 fprintf
0002b56c g     F .text	00000044 __lshrdi3
0002052c g     F .text	0000004c MapMenu7
00028308 g     F .text	0000012c __pow5mult
000304f0 g     O .bss	00000004 __nlocale_changed
0002afb0 g     F .text	00000008 __umodsi3
00030634 g       *ABS*	00000000 end
00021244 g     F .text	0000000c _atoi_r
0002241c g     F .text	00000024 fseek
00033880 g       *ABS*	00000000 __alt_stack_pointer
0002c5e4 g     F .text	00000088 alt_avalon_timer_sc_init
0002b0c8 g     F .text	000000ac __clzsi2
0002c4d8 g     F .text	00000098 altera_avalon_jtag_uart_write
000219c4 g     F .text	00000004 __sfp_lock_acquire
00022f34 g     F .text	000000f8 memchr
00023a54 g     F .text	00001e7c ___vfprintf_internal_r
00021cd8 g     F .text	000002d0 _free_r
0002d948 g     F .text	000001a0 __call_exitprocs
000304ec g     O .bss	00000004 __mlocale_changed
0002f9c0 g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000004c _start
00030504 g     O .bss	00000004 _alt_tick_rate
00028434 g     F .text	0000015c __lshift
00030508 g     O .bss	00000004 _alt_nticks
0002bed0 g     F .text	000000f4 read
0002c2d0 g     F .text	00000054 alt_sys_init
00023248 g     F .text	0000006c _open_r
000280b0 g     F .text	00000258 __multiply
00021210 g     F .text	00000028 __mulsi3
0002efa8 g       *ABS*	00000000 __ram_rwdata_start
0002db24 g       *ABS*	00000000 __ram_rodata_start
0003050c g     O .bss	00000028 __malloc_current_mallinfo
00028938 g     F .text	00000144 __d2b
0002c324 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002d128 g     F .text	000000d4 alt_get_fd
0002cc94 g     F .text	00000138 alt_busy_sleep
0002b49c g     F .text	000000d0 __fpcmp_parts_d
00025ad4 g     F .text	00000064 _close_r
0002d8cc g     F .text	0000007c memcmp
00020494 g     F .text	0000004c MapMenu5
00030634 g       *ABS*	00000000 __alt_stack_base
000203b0 g     F .text	0000004c MapMenu2
00025960 g     F .text	00000174 __swsetup_r
0002a834 g     F .text	000001b4 __divdf3
000218c8 g     F .text	000000fc __sfp
00028b94 g     F .text	0000007c __copybits
0002f3a8 g     O .rwdata	00000408 __malloc_av_
000219d0 g     F .text	00000004 __sinit_lock_release
0002a550 g     F .text	000002e4 __muldf3
000235b8 g     F .text	00000054 __sread
0002cf90 g     F .text	00000114 alt_find_file
0002ce60 g     F .text	000000a0 alt_dev_llist_insert
0002bba8 g     F .text	00000020 __malloc_lock
00021b50 g     F .text	00000028 _fprintf_r
0002c044 g     F .text	000000b0 sbrk
000213a0 g     F .text	000001e8 _fflush_r
00029404 g     F .text	000000cc _calloc_r
00021b34 g     F .text	0000001c fopen
000304d8 g       *ABS*	00000000 __bss_start
0002316c g     F .text	000000dc memset
000211d8 g     F .text	00000038 main
000304fc g     O .bss	00000004 alt_envp
000304dc g     O .bss	00000004 __malloc_max_total_mem
0002c384 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000236f0 g     F .text	00000008 __sclose
00033880 g       *ABS*	00000000 __alt_heap_limit
0002138c g     F .text	00000014 fclose
00023784 g     F .text	00000278 _strtol_r
00025d74 g     F .text	0000161c _dtoa_r
000227b0 g     F .text	00000784 _malloc_r
0002f9e4 g     O .rwdata	00000004 alt_errno
000224a8 g     F .text	000000a8 _fwalk
00020318 g     F .text	0000004c Menu4
000215b8 g     F .text	0000013c _fgets_r
0002aefc g     F .text	00000050 __divsi3
0002ee5c g     O .rodata	00000014 __thenan_df
00021b9c g     F .text	0000013c _malloc_trim_r
00029360 g     F .text	000000a4 strcmp
000202cc g     F .text	0000004c Menu3
0002db24 g       *ABS*	00000000 __flash_rodata_start
00020000 g       *ABS*	00000000 __alt_mem_tightly_coupled_instruction_memory
0002aa44 g     F .text	0000005c __nedf2
0002c29c g     F .text	00000034 alt_irq_init
0002bfc4 g     F .text	00000080 alt_release_fd
0002ee70 g     O .rodata	00000100 __clz_tab
000304e8 g     O .bss	00000004 _PathLocale
000258f4 g     F .text	0000006c _write_r
00027a24 g     F .text	0000001c setlocale
00020280 g     F .text	0000004c Menu2
00020234 g     F .text	0000004c Menu1
0002f9bc g     O .rwdata	00000004 _impure_ptr
000304f4 g     O .bss	00000004 alt_argc
00021fa8 g     F .text	00000474 _fseek_r
00023368 g     F .text	000001ec __srefill_r
00020020 g       .exceptions	00000000 alt_irq_entry
00028790 g     F .text	00000060 __ulp
000292fc g     F .text	00000038 __isinfd
000219ec g     F .text	00000018 __fp_unlock_all
0002f9d0 g     O .rwdata	00000008 alt_fs_list
0002c8fc g     F .text	000000b8 alt_hostfs_write
00020020 g       *ABS*	00000000 __ram_exceptions_start
00027a40 g     F .text	0000000c localeconv
0002d22c g     F .text	00000050 alt_ic_isr_register
0002fa40 g       *ABS*	00000000 _edata
00030634 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
0002d318 g     F .text	000000a0 alt_ic_irq_disable
0002360c g     F .text	00000088 __swrite
0002f9c4 g     O .rwdata	00000004 __malloc_trim_threshold
0002d7e8 g     F .text	00000020 altera_nios2_qsys_irq_init
0002d894 g     F .text	00000038 exit
00022550 g     F .text	000000b8 _fwalk_reent
000285e8 g     F .text	000001a8 __mdiff
0002af4c g     F .text	0000005c __modsi3
00033880 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000219c8 g     F .text	00000004 __sfp_lock_release
00040000 g       *ABS*	00000000 __alt_mem_tightly_coupled_data_memory
00021238 g     F .text	0000000c atoi
0002ea66 g     O .rodata	00000101 _ctype_
00021a04 g     F .text	00000130 _fopen_r
0002dae8 g     F .text	0000003c _exit
00029334 g     F .text	0000002c __isnand
0002afb8 g     F .text	00000110 __muldi3
00022608 g     F .text	000001a8 __smakebuf_r
000203fc g     F .text	0000004c MapMenu3
000236f8 g     F .text	0000008c strlen
0002bd28 g     F .text	00000158 open
0002ab04 g     F .text	00000064 __gedf2
0002d1fc g     F .text	00000030 alt_icache_flush_all
0002fa34 g     O .rwdata	00000004 alt_priority_mask
0002d27c g     F .text	0000009c alt_ic_irq_enable
000258d0 g     F .text	00000024 __vfprintf_internal
0002a4f0 g     F .text	00000060 __subdf3
00020364 g     F .text	0000004c MapMenu1
00027fc4 g     F .text	000000b0 __lo0bits
0002fa38 g     O .rwdata	00000008 alt_alarm_list
0002b644 g     F .text	000000cc close
0002b99c g     F .text	00000080 alt_load
0002b174 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000219cc g     F .text	00000004 __sinit_lock_acquire
00027d14 g     F .text	00000144 __multadd
00027cec g     F .text	00000028 _Bfree
0002ca6c g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08406e14 	ori	at,at,440
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_tightly_coupled_instruction_memory-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c000f4 	movhi	r3,3
   20130:	18c14d04 	addi	r3,r3,1332
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010000f4 	movhi	r4,3
   20148:	21014d04 	addi	r4,r4,1332
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   201b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
   201bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   201c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   201c4:	00bffd16 	blt	zero,r2,201bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201c8:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   201cc:	dece2014 	ori	sp,sp,14464
    movhi gp, %hi(_gp)
   201d0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201d4:	d69e6e14 	ori	gp,gp,31160
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201d8:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   201dc:	10813614 	ori	r2,r2,1240

    movhi r3, %hi(__bss_end)
   201e0:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201e4:	18c18d14 	ori	r3,r3,1588

    beq r2, r3, 1f
   201e8:	10c00326 	beq	r2,r3,201f8 <_start+0x40>

0:
    stw zero, (r2)
   201ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201f4:	10fffd36 	bltu	r2,r3,201ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201f8:	002b99c0 	call	2b99c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201fc:	002bb400 	call	2bb40 <alt_main>

00020200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20200:	003fff06 	br	20200 <alt_after_alt_main>

00020204 <About>:
//#include "sys/alt_alarm.h" // time tick function (alt_nticks(), alt_ticks_per_second())
//#include "sys/alt_timestamp.h"
//#include "sys/alt_stdio.h"
//#include <fcntl.h>
void About()
{
   20204:	defffe04 	addi	sp,sp,-8
   20208:	dfc00115 	stw	ra,4(sp)
   2020c:	df000015 	stw	fp,0(sp)
   20210:	d839883a 	mov	fp,sp
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
   20214:	010000f4 	movhi	r4,3
   20218:	2136c904 	addi	r4,r4,-9436
   2021c:	00233380 	call	23338 <puts>
			"			it using two different main algorithms Genetic Algorithm(GA) and \n"
			"			Dijkstra's Path Finding Algorithm  ( DPF ) The purpose of this application\n"
			"			is to suggest a solution to the 'travelling salesman problem' via\n"
			"			cyclon V altera FPGA. a Bmp file is used as an only given input \n"
			"			to the application.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
}
   20220:	e037883a 	mov	sp,fp
   20224:	dfc00117 	ldw	ra,4(sp)
   20228:	df000017 	ldw	fp,0(sp)
   2022c:	dec00204 	addi	sp,sp,8
   20230:	f800283a 	ret

00020234 <Menu1>:
void Menu1()
{
   20234:	defffe04 	addi	sp,sp,-8
   20238:	dfc00115 	stw	ra,4(sp)
   2023c:	df000015 	stw	fp,0(sp)
   20240:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x01);
   20244:	00c00044 	movi	r3,1
   20248:	00804034 	movhi	r2,256
   2024c:	10800c04 	addi	r2,r2,48
   20250:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   20254:	010000f4 	movhi	r4,3
   20258:	21374a04 	addi	r4,r4,-8920
   2025c:	00233380 	call	23338 <puts>
					printf("				Welcome to the 'TSP' Via Altera NiosII Processor!\n"
   20260:	010000f4 	movhi	r4,3
   20264:	21375004 	addi	r4,r4,-8896
   20268:	00233380 	call	23338 <puts>
							"\n"
							"					-->	1.read about this application\n"
							"						2.view maps\n"
							"						3.calculate path\n"
							"						4.exit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   2026c:	e037883a 	mov	sp,fp
   20270:	dfc00117 	ldw	ra,4(sp)
   20274:	df000017 	ldw	fp,0(sp)
   20278:	dec00204 	addi	sp,sp,8
   2027c:	f800283a 	ret

00020280 <Menu2>:
void Menu2()
{
   20280:	defffe04 	addi	sp,sp,-8
   20284:	dfc00115 	stw	ra,4(sp)
   20288:	df000015 	stw	fp,0(sp)
   2028c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x02);
   20290:	00c00084 	movi	r3,2
   20294:	00804034 	movhi	r2,256
   20298:	10800c04 	addi	r2,r2,48
   2029c:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   202a0:	010000f4 	movhi	r4,3
   202a4:	21374a04 	addi	r4,r4,-8920
   202a8:	00233380 	call	23338 <puts>
					printf("				Welcome to the 'TSP' Via Altera NiosII Processor!\n"
   202ac:	010000f4 	movhi	r4,3
   202b0:	21379604 	addi	r4,r4,-8616
   202b4:	00233380 	call	23338 <puts>
							"\n"
							"						1.read about this application\n"
							"					-->	2.view maps\n"
							"						3.calculate path\n"
							"						4.exit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   202b8:	e037883a 	mov	sp,fp
   202bc:	dfc00117 	ldw	ra,4(sp)
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00204 	addi	sp,sp,8
   202c8:	f800283a 	ret

000202cc <Menu3>:
void Menu3()
{
   202cc:	defffe04 	addi	sp,sp,-8
   202d0:	dfc00115 	stw	ra,4(sp)
   202d4:	df000015 	stw	fp,0(sp)
   202d8:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x04);
   202dc:	00c00104 	movi	r3,4
   202e0:	00804034 	movhi	r2,256
   202e4:	10800c04 	addi	r2,r2,48
   202e8:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   202ec:	010000f4 	movhi	r4,3
   202f0:	2137dc04 	addi	r4,r4,-8336
   202f4:	00233380 	call	23338 <puts>
					printf("				Welcome to the 'TSP' Via Altera NiosII Processor!\n"
   202f8:	010000f4 	movhi	r4,3
   202fc:	2137e204 	addi	r4,r4,-8312
   20300:	00233380 	call	23338 <puts>
							"\n"
							"						1.read about this application\n"
							"						2.view maps\n"
							"					-->	3.calculate path\n"
							"						4.exit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   20304:	e037883a 	mov	sp,fp
   20308:	dfc00117 	ldw	ra,4(sp)
   2030c:	df000017 	ldw	fp,0(sp)
   20310:	dec00204 	addi	sp,sp,8
   20314:	f800283a 	ret

00020318 <Menu4>:
void Menu4()
{
   20318:	defffe04 	addi	sp,sp,-8
   2031c:	dfc00115 	stw	ra,4(sp)
   20320:	df000015 	stw	fp,0(sp)
   20324:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x08);
   20328:	00c00204 	movi	r3,8
   2032c:	00804034 	movhi	r2,256
   20330:	10800c04 	addi	r2,r2,48
   20334:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   20338:	010000f4 	movhi	r4,3
   2033c:	21374a04 	addi	r4,r4,-8920
   20340:	00233380 	call	23338 <puts>
					printf("				Welcome to the 'TSP' Via Altera NiosII Processor!\n"
   20344:	010000f4 	movhi	r4,3
   20348:	21382804 	addi	r4,r4,-8032
   2034c:	00233380 	call	23338 <puts>
							"\n"
							"						1.read about this application\n"
							"						2.view maps\n"
							"						3.calculate path\n"
							"					-->	4.exit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   20350:	e037883a 	mov	sp,fp
   20354:	dfc00117 	ldw	ra,4(sp)
   20358:	df000017 	ldw	fp,0(sp)
   2035c:	dec00204 	addi	sp,sp,8
   20360:	f800283a 	ret

00020364 <MapMenu1>:
void MapMenu1()
{
   20364:	defffe04 	addi	sp,sp,-8
   20368:	dfc00115 	stw	ra,4(sp)
   2036c:	df000015 	stw	fp,0(sp)
   20370:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x01);
   20374:	00c00044 	movi	r3,1
   20378:	00804034 	movhi	r2,256
   2037c:	10800c04 	addi	r2,r2,48
   20380:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   20384:	010000f4 	movhi	r4,3
   20388:	21374a04 	addi	r4,r4,-8920
   2038c:	00233380 	call	23338 <puts>
					printf("				Choose from the List Of the Available Maps!\n"
   20390:	010000f4 	movhi	r4,3
   20394:	21386e04 	addi	r4,r4,-7752
   20398:	00233380 	call	23338 <puts>
							"						3.Map3 (medium)\n"
							"						4.Map4 (medium)\n"
							"						5.Map5 (medium)\n"
							"						6.Map6 (big)\n"
							"						7.return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   2039c:	e037883a 	mov	sp,fp
   203a0:	dfc00117 	ldw	ra,4(sp)
   203a4:	df000017 	ldw	fp,0(sp)
   203a8:	dec00204 	addi	sp,sp,8
   203ac:	f800283a 	ret

000203b0 <MapMenu2>:
void MapMenu2()
{
   203b0:	defffe04 	addi	sp,sp,-8
   203b4:	dfc00115 	stw	ra,4(sp)
   203b8:	df000015 	stw	fp,0(sp)
   203bc:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x02);
   203c0:	00c00084 	movi	r3,2
   203c4:	00804034 	movhi	r2,256
   203c8:	10800c04 	addi	r2,r2,48
   203cc:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   203d0:	010000f4 	movhi	r4,3
   203d4:	21374a04 	addi	r4,r4,-8920
   203d8:	00233380 	call	23338 <puts>
					printf("				Choose from the List Of the Available Maps!\n"
   203dc:	010000f4 	movhi	r4,3
   203e0:	2138b404 	addi	r4,r4,-7472
   203e4:	00233380 	call	23338 <puts>
							"						3.Map3 (medium)\n"
							"						4.Map4 (medium)\n"
							"						5.Map5 (medium)\n"
							"						6.Map6 (big)\n"
							"						7.return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   203e8:	e037883a 	mov	sp,fp
   203ec:	dfc00117 	ldw	ra,4(sp)
   203f0:	df000017 	ldw	fp,0(sp)
   203f4:	dec00204 	addi	sp,sp,8
   203f8:	f800283a 	ret

000203fc <MapMenu3>:
void MapMenu3()
{
   203fc:	defffe04 	addi	sp,sp,-8
   20400:	dfc00115 	stw	ra,4(sp)
   20404:	df000015 	stw	fp,0(sp)
   20408:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x04);
   2040c:	00c00104 	movi	r3,4
   20410:	00804034 	movhi	r2,256
   20414:	10800c04 	addi	r2,r2,48
   20418:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   2041c:	010000f4 	movhi	r4,3
   20420:	21374a04 	addi	r4,r4,-8920
   20424:	00233380 	call	23338 <puts>
					printf("				Choose from the List Of the Available Maps!\n"
   20428:	010000f4 	movhi	r4,3
   2042c:	2138fa04 	addi	r4,r4,-7192
   20430:	00233380 	call	23338 <puts>
							"					-->	3.Map3 (medium)\n"
							"						4.Map4 (medium)\n"
							"						5.Map5 (medium)\n"
							"						6.Map6 (big)\n"
							"						7.return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   20434:	e037883a 	mov	sp,fp
   20438:	dfc00117 	ldw	ra,4(sp)
   2043c:	df000017 	ldw	fp,0(sp)
   20440:	dec00204 	addi	sp,sp,8
   20444:	f800283a 	ret

00020448 <MapMenu4>:
void MapMenu4()
{
   20448:	defffe04 	addi	sp,sp,-8
   2044c:	dfc00115 	stw	ra,4(sp)
   20450:	df000015 	stw	fp,0(sp)
   20454:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x08);
   20458:	00c00204 	movi	r3,8
   2045c:	00804034 	movhi	r2,256
   20460:	10800c04 	addi	r2,r2,48
   20464:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   20468:	010000f4 	movhi	r4,3
   2046c:	21374a04 	addi	r4,r4,-8920
   20470:	00233380 	call	23338 <puts>
					printf("				Choose from the List Of the Available Maps!\n"
   20474:	010000f4 	movhi	r4,3
   20478:	21394004 	addi	r4,r4,-6912
   2047c:	00233380 	call	23338 <puts>
							"						3.Map3 (medium)\n"
							"					-->	4.Map4 (medium)\n"
							"						5.Map5 (medium)\n"
							"						6.Map6 (big)\n"
							"						7.return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   20480:	e037883a 	mov	sp,fp
   20484:	dfc00117 	ldw	ra,4(sp)
   20488:	df000017 	ldw	fp,0(sp)
   2048c:	dec00204 	addi	sp,sp,8
   20490:	f800283a 	ret

00020494 <MapMenu5>:
void MapMenu5()
{
   20494:	defffe04 	addi	sp,sp,-8
   20498:	dfc00115 	stw	ra,4(sp)
   2049c:	df000015 	stw	fp,0(sp)
   204a0:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x10);
   204a4:	00c00404 	movi	r3,16
   204a8:	00804034 	movhi	r2,256
   204ac:	10800c04 	addi	r2,r2,48
   204b0:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   204b4:	010000f4 	movhi	r4,3
   204b8:	21374a04 	addi	r4,r4,-8920
   204bc:	00233380 	call	23338 <puts>
					printf("				Choose from the List Of the Available Maps!\n"
   204c0:	010000f4 	movhi	r4,3
   204c4:	21398604 	addi	r4,r4,-6632
   204c8:	00233380 	call	23338 <puts>
							"						3.Map3 (medium)\n"
							"						4.Map4 (medium)\n"
							"					-->	5.Map5 (medium)\n"
							"						6.Map6 (big)\n"
							"						7.return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   204cc:	e037883a 	mov	sp,fp
   204d0:	dfc00117 	ldw	ra,4(sp)
   204d4:	df000017 	ldw	fp,0(sp)
   204d8:	dec00204 	addi	sp,sp,8
   204dc:	f800283a 	ret

000204e0 <MapMenu6>:
void MapMenu6()
{
   204e0:	defffe04 	addi	sp,sp,-8
   204e4:	dfc00115 	stw	ra,4(sp)
   204e8:	df000015 	stw	fp,0(sp)
   204ec:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x50);
   204f0:	00c01404 	movi	r3,80
   204f4:	00804034 	movhi	r2,256
   204f8:	10800c04 	addi	r2,r2,48
   204fc:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   20500:	010000f4 	movhi	r4,3
   20504:	21374a04 	addi	r4,r4,-8920
   20508:	00233380 	call	23338 <puts>
					printf("				Choose from the List Of the Available Maps!\n"
   2050c:	010000f4 	movhi	r4,3
   20510:	2139cc04 	addi	r4,r4,-6352
   20514:	00233380 	call	23338 <puts>
							"						3.Map3 (medium)\n"
							"						4.Map4 (medium)\n"
							"						5.Map5 (medium)\n"
							"					-->	6.Map6 (big)\n"
							"						7.return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   20518:	e037883a 	mov	sp,fp
   2051c:	dfc00117 	ldw	ra,4(sp)
   20520:	df000017 	ldw	fp,0(sp)
   20524:	dec00204 	addi	sp,sp,8
   20528:	f800283a 	ret

0002052c <MapMenu7>:
void MapMenu7()
{
   2052c:	defffe04 	addi	sp,sp,-8
   20530:	dfc00115 	stw	ra,4(sp)
   20534:	df000015 	stw	fp,0(sp)
   20538:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE,0x98);
   2053c:	00c02604 	movi	r3,152
   20540:	00804034 	movhi	r2,256
   20544:	10800c04 	addi	r2,r2,48
   20548:	10c00035 	stwio	r3,0(r2)
	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   2054c:	010000f4 	movhi	r4,3
   20550:	21374a04 	addi	r4,r4,-8920
   20554:	00233380 	call	23338 <puts>
					printf("				Choose from the List Of the Available Maps!\n"
   20558:	010000f4 	movhi	r4,3
   2055c:	213a1204 	addi	r4,r4,-6072
   20560:	00233380 	call	23338 <puts>
							"						3.Map3 (medium)\n"
							"						4.Map4 (medium)\n"
							"						5.Map5 (medium)\n"
							"						6.Map6 (big)\n"
							"					-->	7.return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"	);
}
   20564:	e037883a 	mov	sp,fp
   20568:	dfc00117 	ldw	ra,4(sp)
   2056c:	df000017 	ldw	fp,0(sp)
   20570:	dec00204 	addi	sp,sp,8
   20574:	f800283a 	ret

00020578 <MainMap>:
void MainMap()
{
   20578:	defffa04 	addi	sp,sp,-24
   2057c:	dfc00515 	stw	ra,20(sp)
   20580:	df000415 	stw	fp,16(sp)
   20584:	dc000315 	stw	r16,12(sp)
   20588:	df000304 	addi	fp,sp,12
	int i=0;
   2058c:	e03ffd15 	stw	zero,-12(fp)
	FILE* pf;
	int num=0;
   20590:	e03ffe15 	stw	zero,-8(fp)
	usleep(600*1000);
   20594:	01000274 	movhi	r4,9
   20598:	2109f004 	addi	r4,r4,10176
   2059c:	002c0f40 	call	2c0f4 <usleep>
	MapMenu1();
   205a0:	00203640 	call	20364 <MapMenu1>
	while (i<40)
   205a4:	0000f006 	br	20968 <MainMap+0x3f0>
		{
			while( ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x0f) == 0x0f) );
   205a8:	0001883a 	nop
   205ac:	00804034 	movhi	r2,256
   205b0:	10801004 	addi	r2,r2,64
   205b4:	10800037 	ldwio	r2,0(r2)
   205b8:	108003cc 	andi	r2,r2,15
   205bc:	108003e0 	cmpeqi	r2,r2,15
   205c0:	103ffa1e 	bne	r2,zero,205ac <MainMap+0x34>

				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x01) == 0x01))
   205c4:	00804034 	movhi	r2,256
   205c8:	10801004 	addi	r2,r2,64
   205cc:	10800037 	ldwio	r2,0(r2)
   205d0:	1080004c 	andi	r2,r2,1
   205d4:	1000351e 	bne	r2,zero,206ac <MainMap+0x134>
				{
					pf= fopen("/mnt/host/inbox.txt","w");
   205d8:	010000f4 	movhi	r4,3
   205dc:	213a5804 	addi	r4,r4,-5792
   205e0:	014000f4 	movhi	r5,3
   205e4:	297a5d04 	addi	r5,r5,-5772
   205e8:	0021b340 	call	21b34 <fopen>
   205ec:	e0bfff15 	stw	r2,-4(fp)
					IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,0x00);
   205f0:	0007883a 	mov	r3,zero
   205f4:	00804034 	movhi	r2,256
   205f8:	10800804 	addi	r2,r2,32
   205fc:	10c00035 	stwio	r3,0(r2)
					fprintf(pf,"-1",1);
   20600:	e13fff17 	ldw	r4,-4(fp)
   20604:	014000f4 	movhi	r5,3
   20608:	297a5e04 	addi	r5,r5,-5768
   2060c:	01800044 	movi	r6,1
   20610:	0021b780 	call	21b78 <fprintf>
					fclose(pf);
   20614:	e13fff17 	ldw	r4,-4(fp)
   20618:	002138c0 	call	2138c <fclose>
					num=(num+1)%7;
   2061c:	e0bffe17 	ldw	r2,-8(fp)
   20620:	14000044 	addi	r16,r2,1
   20624:	008001c4 	movi	r2,7
   20628:	8085283a 	div	r2,r16,r2
   2062c:	1009883a 	mov	r4,r2
   20630:	014001c4 	movi	r5,7
   20634:	00212100 	call	21210 <__mulsi3>
   20638:	8085c83a 	sub	r2,r16,r2
   2063c:	e0bffe15 	stw	r2,-8(fp)
					MAP(num);
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	1000011e 	bne	r2,zero,2064c <MainMap+0xd4>
   20648:	00203640 	call	20364 <MapMenu1>
   2064c:	e0bffe17 	ldw	r2,-8(fp)
   20650:	10800058 	cmpnei	r2,r2,1
   20654:	1000011e 	bne	r2,zero,2065c <MainMap+0xe4>
   20658:	00203b00 	call	203b0 <MapMenu2>
   2065c:	e0bffe17 	ldw	r2,-8(fp)
   20660:	10800098 	cmpnei	r2,r2,2
   20664:	1000011e 	bne	r2,zero,2066c <MainMap+0xf4>
   20668:	00203fc0 	call	203fc <MapMenu3>
   2066c:	e0bffe17 	ldw	r2,-8(fp)
   20670:	108000d8 	cmpnei	r2,r2,3
   20674:	1000011e 	bne	r2,zero,2067c <MainMap+0x104>
   20678:	00204480 	call	20448 <MapMenu4>
   2067c:	e0bffe17 	ldw	r2,-8(fp)
   20680:	10800118 	cmpnei	r2,r2,4
   20684:	1000011e 	bne	r2,zero,2068c <MainMap+0x114>
   20688:	00204940 	call	20494 <MapMenu5>
   2068c:	e0bffe17 	ldw	r2,-8(fp)
   20690:	10800158 	cmpnei	r2,r2,5
   20694:	1000011e 	bne	r2,zero,2069c <MainMap+0x124>
   20698:	00204e00 	call	204e0 <MapMenu6>
   2069c:	e0bffe17 	ldw	r2,-8(fp)
   206a0:	10800198 	cmpnei	r2,r2,6
   206a4:	1000011e 	bne	r2,zero,206ac <MainMap+0x134>
   206a8:	002052c0 	call	2052c <MapMenu7>
				}
				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x02) == 0x02))
   206ac:	00804034 	movhi	r2,256
   206b0:	10801004 	addi	r2,r2,64
   206b4:	10800037 	ldwio	r2,0(r2)
   206b8:	1080008c 	andi	r2,r2,2
   206bc:	1000241e 	bne	r2,zero,20750 <MainMap+0x1d8>
				{
					num=(num+6)%7;
   206c0:	e0bffe17 	ldw	r2,-8(fp)
   206c4:	14000184 	addi	r16,r2,6
   206c8:	008001c4 	movi	r2,7
   206cc:	8085283a 	div	r2,r16,r2
   206d0:	1009883a 	mov	r4,r2
   206d4:	014001c4 	movi	r5,7
   206d8:	00212100 	call	21210 <__mulsi3>
   206dc:	8085c83a 	sub	r2,r16,r2
   206e0:	e0bffe15 	stw	r2,-8(fp)
					MAP(num);
   206e4:	e0bffe17 	ldw	r2,-8(fp)
   206e8:	1000011e 	bne	r2,zero,206f0 <MainMap+0x178>
   206ec:	00203640 	call	20364 <MapMenu1>
   206f0:	e0bffe17 	ldw	r2,-8(fp)
   206f4:	10800058 	cmpnei	r2,r2,1
   206f8:	1000011e 	bne	r2,zero,20700 <MainMap+0x188>
   206fc:	00203b00 	call	203b0 <MapMenu2>
   20700:	e0bffe17 	ldw	r2,-8(fp)
   20704:	10800098 	cmpnei	r2,r2,2
   20708:	1000011e 	bne	r2,zero,20710 <MainMap+0x198>
   2070c:	00203fc0 	call	203fc <MapMenu3>
   20710:	e0bffe17 	ldw	r2,-8(fp)
   20714:	108000d8 	cmpnei	r2,r2,3
   20718:	1000011e 	bne	r2,zero,20720 <MainMap+0x1a8>
   2071c:	00204480 	call	20448 <MapMenu4>
   20720:	e0bffe17 	ldw	r2,-8(fp)
   20724:	10800118 	cmpnei	r2,r2,4
   20728:	1000011e 	bne	r2,zero,20730 <MainMap+0x1b8>
   2072c:	00204940 	call	20494 <MapMenu5>
   20730:	e0bffe17 	ldw	r2,-8(fp)
   20734:	10800158 	cmpnei	r2,r2,5
   20738:	1000011e 	bne	r2,zero,20740 <MainMap+0x1c8>
   2073c:	00204e00 	call	204e0 <MapMenu6>
   20740:	e0bffe17 	ldw	r2,-8(fp)
   20744:	10800198 	cmpnei	r2,r2,6
   20748:	1000011e 	bne	r2,zero,20750 <MainMap+0x1d8>
   2074c:	002052c0 	call	2052c <MapMenu7>
				}
				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x04) == 0x04))
   20750:	00804034 	movhi	r2,256
   20754:	10801004 	addi	r2,r2,64
   20758:	10800037 	ldwio	r2,0(r2)
   2075c:	1080010c 	andi	r2,r2,4
   20760:	1000651e 	bne	r2,zero,208f8 <MainMap+0x380>
				{
					switch(num)
   20764:	e0bffe17 	ldw	r2,-8(fp)
   20768:	108001a8 	cmpgeui	r2,r2,6
   2076c:	1000821e 	bne	r2,zero,20978 <MainMap+0x400>
   20770:	e0bffe17 	ldw	r2,-8(fp)
   20774:	1085883a 	add	r2,r2,r2
   20778:	1087883a 	add	r3,r2,r2
   2077c:	008000b4 	movhi	r2,2
   20780:	1081e404 	addi	r2,r2,1936
   20784:	1885883a 	add	r2,r3,r2
   20788:	10800017 	ldw	r2,0(r2)
   2078c:	1000683a 	jmp	r2
   20790:	000207a8 	cmpgeui	zero,zero,2078
   20794:	000207e0 	cmpeqi	zero,zero,2079
   20798:	00020818 	cmpnei	zero,zero,2080
   2079c:	00020850 	cmplti	zero,zero,2081
   207a0:	00020888 	cmpgei	zero,zero,2082
   207a4:	000208c0 	call	208c <__alt_mem_tightly_coupled_instruction_memory-0x1df74>
					{
						case 0:
							pf= fopen("/mnt/host/inbox.txt","w");
   207a8:	010000f4 	movhi	r4,3
   207ac:	213a5804 	addi	r4,r4,-5792
   207b0:	014000f4 	movhi	r5,3
   207b4:	297a5d04 	addi	r5,r5,-5772
   207b8:	0021b340 	call	21b34 <fopen>
   207bc:	e0bfff15 	stw	r2,-4(fp)
							fprintf(pf,"1",1);
   207c0:	e13fff17 	ldw	r4,-4(fp)
   207c4:	014000f4 	movhi	r5,3
   207c8:	297a5f04 	addi	r5,r5,-5764
   207cc:	01800044 	movi	r6,1
   207d0:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   207d4:	e13fff17 	ldw	r4,-4(fp)
   207d8:	002138c0 	call	2138c <fclose>
							break;
   207dc:	00004606 	br	208f8 <MainMap+0x380>
						case 1:
							pf= fopen("/mnt/host/inbox.txt","w");
   207e0:	010000f4 	movhi	r4,3
   207e4:	213a5804 	addi	r4,r4,-5792
   207e8:	014000f4 	movhi	r5,3
   207ec:	297a5d04 	addi	r5,r5,-5772
   207f0:	0021b340 	call	21b34 <fopen>
   207f4:	e0bfff15 	stw	r2,-4(fp)
						    fprintf(pf,"2",1);
   207f8:	e13fff17 	ldw	r4,-4(fp)
   207fc:	014000f4 	movhi	r5,3
   20800:	297a6004 	addi	r5,r5,-5760
   20804:	01800044 	movi	r6,1
   20808:	0021b780 	call	21b78 <fprintf>
						    fclose(pf);
   2080c:	e13fff17 	ldw	r4,-4(fp)
   20810:	002138c0 	call	2138c <fclose>
						    break;
   20814:	00003806 	br	208f8 <MainMap+0x380>
						case 2:
							pf= fopen("/mnt/host/inbox.txt","w");
   20818:	010000f4 	movhi	r4,3
   2081c:	213a5804 	addi	r4,r4,-5792
   20820:	014000f4 	movhi	r5,3
   20824:	297a5d04 	addi	r5,r5,-5772
   20828:	0021b340 	call	21b34 <fopen>
   2082c:	e0bfff15 	stw	r2,-4(fp)
							fprintf(pf,"3",1);
   20830:	e13fff17 	ldw	r4,-4(fp)
   20834:	014000f4 	movhi	r5,3
   20838:	297a6104 	addi	r5,r5,-5756
   2083c:	01800044 	movi	r6,1
   20840:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   20844:	e13fff17 	ldw	r4,-4(fp)
   20848:	002138c0 	call	2138c <fclose>
							break;
   2084c:	00002a06 	br	208f8 <MainMap+0x380>
						case 3:
							pf= fopen("/mnt/host/inbox.txt","w");
   20850:	010000f4 	movhi	r4,3
   20854:	213a5804 	addi	r4,r4,-5792
   20858:	014000f4 	movhi	r5,3
   2085c:	297a5d04 	addi	r5,r5,-5772
   20860:	0021b340 	call	21b34 <fopen>
   20864:	e0bfff15 	stw	r2,-4(fp)
							fprintf(pf,"4",1);
   20868:	e13fff17 	ldw	r4,-4(fp)
   2086c:	014000f4 	movhi	r5,3
   20870:	297a6204 	addi	r5,r5,-5752
   20874:	01800044 	movi	r6,1
   20878:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   2087c:	e13fff17 	ldw	r4,-4(fp)
   20880:	002138c0 	call	2138c <fclose>
							break;
   20884:	00001c06 	br	208f8 <MainMap+0x380>
						case 4:
							pf= fopen("/mnt/host/inbox.txt","w");
   20888:	010000f4 	movhi	r4,3
   2088c:	213a5804 	addi	r4,r4,-5792
   20890:	014000f4 	movhi	r5,3
   20894:	297a5d04 	addi	r5,r5,-5772
   20898:	0021b340 	call	21b34 <fopen>
   2089c:	e0bfff15 	stw	r2,-4(fp)
							fprintf(pf,"5",1);
   208a0:	e13fff17 	ldw	r4,-4(fp)
   208a4:	014000f4 	movhi	r5,3
   208a8:	297a6304 	addi	r5,r5,-5748
   208ac:	01800044 	movi	r6,1
   208b0:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   208b4:	e13fff17 	ldw	r4,-4(fp)
   208b8:	002138c0 	call	2138c <fclose>
							break;
   208bc:	00000e06 	br	208f8 <MainMap+0x380>
						case 5:
							pf= fopen("/mnt/host/inbox.txt","w");
   208c0:	010000f4 	movhi	r4,3
   208c4:	213a5804 	addi	r4,r4,-5792
   208c8:	014000f4 	movhi	r5,3
   208cc:	297a5d04 	addi	r5,r5,-5772
   208d0:	0021b340 	call	21b34 <fopen>
   208d4:	e0bfff15 	stw	r2,-4(fp)
							fprintf(pf,"6",1);
   208d8:	e13fff17 	ldw	r4,-4(fp)
   208dc:	014000f4 	movhi	r5,3
   208e0:	297a6404 	addi	r5,r5,-5744
   208e4:	01800044 	movi	r6,1
   208e8:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   208ec:	e13fff17 	ldw	r4,-4(fp)
   208f0:	002138c0 	call	2138c <fclose>
							break;
   208f4:	0001883a 	nop
						default:
							return;
					}
				}
			if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x08) == 0x08))
   208f8:	00804034 	movhi	r2,256
   208fc:	10801004 	addi	r2,r2,64
   20900:	10800037 	ldwio	r2,0(r2)
   20904:	1080020c 	andi	r2,r2,8
   20908:	1000111e 	bne	r2,zero,20950 <MainMap+0x3d8>
			{
				pf= fopen("/mnt/host/inbox.txt","w");
   2090c:	010000f4 	movhi	r4,3
   20910:	213a5804 	addi	r4,r4,-5792
   20914:	014000f4 	movhi	r5,3
   20918:	297a5d04 	addi	r5,r5,-5772
   2091c:	0021b340 	call	21b34 <fopen>
   20920:	e0bfff15 	stw	r2,-4(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,0x00);
   20924:	0007883a 	mov	r3,zero
   20928:	00804034 	movhi	r2,256
   2092c:	10800804 	addi	r2,r2,32
   20930:	10c00035 	stwio	r3,0(r2)
				fprintf(pf,"-1",1);
   20934:	e13fff17 	ldw	r4,-4(fp)
   20938:	014000f4 	movhi	r5,3
   2093c:	297a5e04 	addi	r5,r5,-5768
   20940:	01800044 	movi	r6,1
   20944:	0021b780 	call	21b78 <fprintf>
				fclose(pf);
   20948:	e13fff17 	ldw	r4,-4(fp)
   2094c:	002138c0 	call	2138c <fclose>
			}
			usleep(600*1000);
   20950:	01000274 	movhi	r4,9
   20954:	2109f004 	addi	r4,r4,10176
   20958:	002c0f40 	call	2c0f4 <usleep>

			++i;
   2095c:	e0bffd17 	ldw	r2,-12(fp)
   20960:	10800044 	addi	r2,r2,1
   20964:	e0bffd15 	stw	r2,-12(fp)
	int i=0;
	FILE* pf;
	int num=0;
	usleep(600*1000);
	MapMenu1();
	while (i<40)
   20968:	e0bffd17 	ldw	r2,-12(fp)
   2096c:	10800a10 	cmplti	r2,r2,40
   20970:	103f0d1e 	bne	r2,zero,205a8 <MainMap+0x30>
   20974:	00000106 	br	2097c <MainMap+0x404>
							pf= fopen("/mnt/host/inbox.txt","w");
							fprintf(pf,"6",1);
							fclose(pf);
							break;
						default:
							return;
   20978:	0001883a 	nop
			}
			usleep(600*1000);

			++i;
		}
}
   2097c:	e037883a 	mov	sp,fp
   20980:	dfc00217 	ldw	ra,8(sp)
   20984:	df000117 	ldw	fp,4(sp)
   20988:	dc000017 	ldw	r16,0(sp)
   2098c:	dec00304 	addi	sp,sp,12
   20990:	f800283a 	ret

00020994 <MainCalc>:
void MainCalc()
{
   20994:	defff704 	addi	sp,sp,-36
   20998:	dfc00815 	stw	ra,32(sp)
   2099c:	df000715 	stw	fp,28(sp)
   209a0:	dc000615 	stw	r16,24(sp)
   209a4:	df000604 	addi	fp,sp,24
	int i=0;
   209a8:	e03ffa15 	stw	zero,-24(fp)
	FILE* pf;
	int num=0;
   209ac:	e03ffb15 	stw	zero,-20(fp)
	usleep(600*1000);
   209b0:	01000274 	movhi	r4,9
   209b4:	2109f004 	addi	r4,r4,10176
   209b8:	002c0f40 	call	2c0f4 <usleep>
	MapMenu1();
   209bc:	00203640 	call	20364 <MapMenu1>
	while (i<40)
   209c0:	00018d06 	br	20ff8 <MainCalc+0x664>
		{
			while( ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x0f) == 0x0f) );
   209c4:	0001883a 	nop
   209c8:	00804034 	movhi	r2,256
   209cc:	10801004 	addi	r2,r2,64
   209d0:	10800037 	ldwio	r2,0(r2)
   209d4:	108003cc 	andi	r2,r2,15
   209d8:	108003e0 	cmpeqi	r2,r2,15
   209dc:	103ffa1e 	bne	r2,zero,209c8 <MainCalc+0x34>

				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x01) == 0x01))
   209e0:	00804034 	movhi	r2,256
   209e4:	10801004 	addi	r2,r2,64
   209e8:	10800037 	ldwio	r2,0(r2)
   209ec:	1080004c 	andi	r2,r2,1
   209f0:	1000391e 	bne	r2,zero,20ad8 <MainCalc+0x144>
				{
					pf= fopen("/mnt/host/inbox.txt","w");
   209f4:	010000f4 	movhi	r4,3
   209f8:	213a5804 	addi	r4,r4,-5792
   209fc:	014000f4 	movhi	r5,3
   20a00:	297a5d04 	addi	r5,r5,-5772
   20a04:	0021b340 	call	21b34 <fopen>
   20a08:	e0bffc15 	stw	r2,-16(fp)
					IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,0x00);
   20a0c:	0007883a 	mov	r3,zero
   20a10:	00804034 	movhi	r2,256
   20a14:	10800804 	addi	r2,r2,32
   20a18:	10c00035 	stwio	r3,0(r2)
					fprintf(pf,"-1",1);
   20a1c:	e13ffc17 	ldw	r4,-16(fp)
   20a20:	014000f4 	movhi	r5,3
   20a24:	297a5e04 	addi	r5,r5,-5768
   20a28:	01800044 	movi	r6,1
   20a2c:	0021b780 	call	21b78 <fprintf>
					fclose(pf);
   20a30:	e13ffc17 	ldw	r4,-16(fp)
   20a34:	002138c0 	call	2138c <fclose>
					IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, 0x01);
   20a38:	00c00044 	movi	r3,1
   20a3c:	00804034 	movhi	r2,256
   20a40:	10800c04 	addi	r2,r2,48
   20a44:	10c00035 	stwio	r3,0(r2)
					num=(num+1)%7;
   20a48:	e0bffb17 	ldw	r2,-20(fp)
   20a4c:	14000044 	addi	r16,r2,1
   20a50:	008001c4 	movi	r2,7
   20a54:	8085283a 	div	r2,r16,r2
   20a58:	1009883a 	mov	r4,r2
   20a5c:	014001c4 	movi	r5,7
   20a60:	00212100 	call	21210 <__mulsi3>
   20a64:	8085c83a 	sub	r2,r16,r2
   20a68:	e0bffb15 	stw	r2,-20(fp)
					MAP(num);
   20a6c:	e0bffb17 	ldw	r2,-20(fp)
   20a70:	1000011e 	bne	r2,zero,20a78 <MainCalc+0xe4>
   20a74:	00203640 	call	20364 <MapMenu1>
   20a78:	e0bffb17 	ldw	r2,-20(fp)
   20a7c:	10800058 	cmpnei	r2,r2,1
   20a80:	1000011e 	bne	r2,zero,20a88 <MainCalc+0xf4>
   20a84:	00203b00 	call	203b0 <MapMenu2>
   20a88:	e0bffb17 	ldw	r2,-20(fp)
   20a8c:	10800098 	cmpnei	r2,r2,2
   20a90:	1000011e 	bne	r2,zero,20a98 <MainCalc+0x104>
   20a94:	00203fc0 	call	203fc <MapMenu3>
   20a98:	e0bffb17 	ldw	r2,-20(fp)
   20a9c:	108000d8 	cmpnei	r2,r2,3
   20aa0:	1000011e 	bne	r2,zero,20aa8 <MainCalc+0x114>
   20aa4:	00204480 	call	20448 <MapMenu4>
   20aa8:	e0bffb17 	ldw	r2,-20(fp)
   20aac:	10800118 	cmpnei	r2,r2,4
   20ab0:	1000011e 	bne	r2,zero,20ab8 <MainCalc+0x124>
   20ab4:	00204940 	call	20494 <MapMenu5>
   20ab8:	e0bffb17 	ldw	r2,-20(fp)
   20abc:	10800158 	cmpnei	r2,r2,5
   20ac0:	1000011e 	bne	r2,zero,20ac8 <MainCalc+0x134>
   20ac4:	00204e00 	call	204e0 <MapMenu6>
   20ac8:	e0bffb17 	ldw	r2,-20(fp)
   20acc:	10800198 	cmpnei	r2,r2,6
   20ad0:	1000011e 	bne	r2,zero,20ad8 <MainCalc+0x144>
   20ad4:	002052c0 	call	2052c <MapMenu7>
				}
				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x02) == 0x02))
   20ad8:	00804034 	movhi	r2,256
   20adc:	10801004 	addi	r2,r2,64
   20ae0:	10800037 	ldwio	r2,0(r2)
   20ae4:	1080008c 	andi	r2,r2,2
   20ae8:	1000391e 	bne	r2,zero,20bd0 <MainCalc+0x23c>
				{
					pf= fopen("/mnt/host/inbox.txt","w");
   20aec:	010000f4 	movhi	r4,3
   20af0:	213a5804 	addi	r4,r4,-5792
   20af4:	014000f4 	movhi	r5,3
   20af8:	297a5d04 	addi	r5,r5,-5772
   20afc:	0021b340 	call	21b34 <fopen>
   20b00:	e0bffc15 	stw	r2,-16(fp)
					IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,0x00);
   20b04:	0007883a 	mov	r3,zero
   20b08:	00804034 	movhi	r2,256
   20b0c:	10800804 	addi	r2,r2,32
   20b10:	10c00035 	stwio	r3,0(r2)
					fprintf(pf,"-1",1);
   20b14:	e13ffc17 	ldw	r4,-16(fp)
   20b18:	014000f4 	movhi	r5,3
   20b1c:	297a5e04 	addi	r5,r5,-5768
   20b20:	01800044 	movi	r6,1
   20b24:	0021b780 	call	21b78 <fprintf>
					fclose(pf);
   20b28:	e13ffc17 	ldw	r4,-16(fp)
   20b2c:	002138c0 	call	2138c <fclose>
					IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, 0x02);
   20b30:	00c00084 	movi	r3,2
   20b34:	00804034 	movhi	r2,256
   20b38:	10800c04 	addi	r2,r2,48
   20b3c:	10c00035 	stwio	r3,0(r2)
					num=(num+6)%7;
   20b40:	e0bffb17 	ldw	r2,-20(fp)
   20b44:	14000184 	addi	r16,r2,6
   20b48:	008001c4 	movi	r2,7
   20b4c:	8085283a 	div	r2,r16,r2
   20b50:	1009883a 	mov	r4,r2
   20b54:	014001c4 	movi	r5,7
   20b58:	00212100 	call	21210 <__mulsi3>
   20b5c:	8085c83a 	sub	r2,r16,r2
   20b60:	e0bffb15 	stw	r2,-20(fp)
					MAP(num);
   20b64:	e0bffb17 	ldw	r2,-20(fp)
   20b68:	1000011e 	bne	r2,zero,20b70 <MainCalc+0x1dc>
   20b6c:	00203640 	call	20364 <MapMenu1>
   20b70:	e0bffb17 	ldw	r2,-20(fp)
   20b74:	10800058 	cmpnei	r2,r2,1
   20b78:	1000011e 	bne	r2,zero,20b80 <MainCalc+0x1ec>
   20b7c:	00203b00 	call	203b0 <MapMenu2>
   20b80:	e0bffb17 	ldw	r2,-20(fp)
   20b84:	10800098 	cmpnei	r2,r2,2
   20b88:	1000011e 	bne	r2,zero,20b90 <MainCalc+0x1fc>
   20b8c:	00203fc0 	call	203fc <MapMenu3>
   20b90:	e0bffb17 	ldw	r2,-20(fp)
   20b94:	108000d8 	cmpnei	r2,r2,3
   20b98:	1000011e 	bne	r2,zero,20ba0 <MainCalc+0x20c>
   20b9c:	00204480 	call	20448 <MapMenu4>
   20ba0:	e0bffb17 	ldw	r2,-20(fp)
   20ba4:	10800118 	cmpnei	r2,r2,4
   20ba8:	1000011e 	bne	r2,zero,20bb0 <MainCalc+0x21c>
   20bac:	00204940 	call	20494 <MapMenu5>
   20bb0:	e0bffb17 	ldw	r2,-20(fp)
   20bb4:	10800158 	cmpnei	r2,r2,5
   20bb8:	1000011e 	bne	r2,zero,20bc0 <MainCalc+0x22c>
   20bbc:	00204e00 	call	204e0 <MapMenu6>
   20bc0:	e0bffb17 	ldw	r2,-20(fp)
   20bc4:	10800198 	cmpnei	r2,r2,6
   20bc8:	1000011e 	bne	r2,zero,20bd0 <MainCalc+0x23c>
   20bcc:	002052c0 	call	2052c <MapMenu7>
				}
				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x04) == 0x04))
   20bd0:	00804034 	movhi	r2,256
   20bd4:	10801004 	addi	r2,r2,64
   20bd8:	10800037 	ldwio	r2,0(r2)
   20bdc:	1080010c 	andi	r2,r2,4
   20be0:	1000ed1e 	bne	r2,zero,20f98 <MainCalc+0x604>
				{
					char dist[6];
					int * h;
					switch(num)
   20be4:	e0bffb17 	ldw	r2,-20(fp)
   20be8:	108001a8 	cmpgeui	r2,r2,6
   20bec:	1001051e 	bne	r2,zero,21004 <MainCalc+0x670>
   20bf0:	e0bffb17 	ldw	r2,-20(fp)
   20bf4:	1085883a 	add	r2,r2,r2
   20bf8:	1087883a 	add	r3,r2,r2
   20bfc:	008000b4 	movhi	r2,2
   20c00:	10830404 	addi	r2,r2,3088
   20c04:	1885883a 	add	r2,r3,r2
   20c08:	10800017 	ldw	r2,0(r2)
   20c0c:	1000683a 	jmp	r2
   20c10:	00020c28 	cmpgeui	zero,zero,2096
   20c14:	00020cc0 	call	20cc <__alt_mem_tightly_coupled_instruction_memory-0x1df34>
   20c18:	00020d58 	cmpnei	zero,zero,2101
   20c1c:	00020de8 	cmpgeui	zero,zero,2103
   20c20:	00020e78 	rdprs	zero,zero,2105
   20c24:	00020f08 	cmpgei	zero,zero,2108
					{
						case 0:

							pf= fopen("/mnt/host/inbox.txt","w");
   20c28:	010000f4 	movhi	r4,3
   20c2c:	213a5804 	addi	r4,r4,-5792
   20c30:	014000f4 	movhi	r5,3
   20c34:	297a5d04 	addi	r5,r5,-5772
   20c38:	0021b340 	call	21b34 <fopen>
   20c3c:	e0bffc15 	stw	r2,-16(fp)
							fprintf(pf,"11",1);
   20c40:	e13ffc17 	ldw	r4,-16(fp)
   20c44:	014000f4 	movhi	r5,3
   20c48:	297a6504 	addi	r5,r5,-5740
   20c4c:	01800044 	movi	r6,1
   20c50:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   20c54:	e13ffc17 	ldw	r4,-16(fp)
   20c58:	002138c0 	call	2138c <fclose>
							usleep(2000*2000);
   20c5c:	01000f74 	movhi	r4,61
   20c60:	21024004 	addi	r4,r4,2304
   20c64:	002c0f40 	call	2c0f4 <usleep>
							pf= fopen("/mnt/host/dist.txt","r");
   20c68:	010000f4 	movhi	r4,3
   20c6c:	213a6604 	addi	r4,r4,-5736
   20c70:	014000f4 	movhi	r5,3
   20c74:	297a6b04 	addi	r5,r5,-5716
   20c78:	0021b340 	call	21b34 <fopen>
   20c7c:	e0bffc15 	stw	r2,-16(fp)
							fgets(dist,6,pf);
   20c80:	e0bffe04 	addi	r2,fp,-8
   20c84:	1009883a 	mov	r4,r2
   20c88:	01400184 	movi	r5,6
   20c8c:	e1bffc17 	ldw	r6,-16(fp)
   20c90:	00216f40 	call	216f4 <fgets>
							h=atoi(dist);
   20c94:	e0bffe04 	addi	r2,fp,-8
   20c98:	1009883a 	mov	r4,r2
   20c9c:	00212380 	call	21238 <atoi>
   20ca0:	e0bffd15 	stw	r2,-12(fp)
							IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,h);
   20ca4:	e0fffd17 	ldw	r3,-12(fp)
   20ca8:	00804034 	movhi	r2,256
   20cac:	10800804 	addi	r2,r2,32
   20cb0:	10c00035 	stwio	r3,0(r2)
							fclose(pf);
   20cb4:	e13ffc17 	ldw	r4,-16(fp)
   20cb8:	002138c0 	call	2138c <fclose>
							break;
   20cbc:	0000b606 	br	20f98 <MainCalc+0x604>
						case 1:
							pf= fopen("/mnt/host/inbox.txt","w");
   20cc0:	010000f4 	movhi	r4,3
   20cc4:	213a5804 	addi	r4,r4,-5792
   20cc8:	014000f4 	movhi	r5,3
   20ccc:	297a5d04 	addi	r5,r5,-5772
   20cd0:	0021b340 	call	21b34 <fopen>
   20cd4:	e0bffc15 	stw	r2,-16(fp)
						    fprintf(pf,"22",1);
   20cd8:	e13ffc17 	ldw	r4,-16(fp)
   20cdc:	014000f4 	movhi	r5,3
   20ce0:	297a6c04 	addi	r5,r5,-5712
   20ce4:	01800044 	movi	r6,1
   20ce8:	0021b780 	call	21b78 <fprintf>
						    fclose(pf);
   20cec:	e13ffc17 	ldw	r4,-16(fp)
   20cf0:	002138c0 	call	2138c <fclose>
						    usleep(2000*2000);
   20cf4:	01000f74 	movhi	r4,61
   20cf8:	21024004 	addi	r4,r4,2304
   20cfc:	002c0f40 	call	2c0f4 <usleep>
						    pf= fopen("/mnt/host/dist.txt","r");
   20d00:	010000f4 	movhi	r4,3
   20d04:	213a6604 	addi	r4,r4,-5736
   20d08:	014000f4 	movhi	r5,3
   20d0c:	297a6b04 	addi	r5,r5,-5716
   20d10:	0021b340 	call	21b34 <fopen>
   20d14:	e0bffc15 	stw	r2,-16(fp)
						    fgets(dist,6,pf);
   20d18:	e0bffe04 	addi	r2,fp,-8
   20d1c:	1009883a 	mov	r4,r2
   20d20:	01400184 	movi	r5,6
   20d24:	e1bffc17 	ldw	r6,-16(fp)
   20d28:	00216f40 	call	216f4 <fgets>
						    h=atoi(dist);
   20d2c:	e0bffe04 	addi	r2,fp,-8
   20d30:	1009883a 	mov	r4,r2
   20d34:	00212380 	call	21238 <atoi>
   20d38:	e0bffd15 	stw	r2,-12(fp)
						    IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,h);
   20d3c:	e0fffd17 	ldw	r3,-12(fp)
   20d40:	00804034 	movhi	r2,256
   20d44:	10800804 	addi	r2,r2,32
   20d48:	10c00035 	stwio	r3,0(r2)
						    fclose(pf);
   20d4c:	e13ffc17 	ldw	r4,-16(fp)
   20d50:	002138c0 	call	2138c <fclose>
						    break;
   20d54:	00009006 	br	20f98 <MainCalc+0x604>
						case 2:
							pf= fopen("/mnt/host/inbox.txt","w");
   20d58:	010000f4 	movhi	r4,3
   20d5c:	213a5804 	addi	r4,r4,-5792
   20d60:	014000f4 	movhi	r5,3
   20d64:	297a5d04 	addi	r5,r5,-5772
   20d68:	0021b340 	call	21b34 <fopen>
   20d6c:	e0bffc15 	stw	r2,-16(fp)
							fprintf(pf,"33",1);
   20d70:	e13ffc17 	ldw	r4,-16(fp)
   20d74:	014000f4 	movhi	r5,3
   20d78:	297a6d04 	addi	r5,r5,-5708
   20d7c:	01800044 	movi	r6,1
   20d80:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   20d84:	e13ffc17 	ldw	r4,-16(fp)
   20d88:	002138c0 	call	2138c <fclose>
							usleep(2000*2000);
   20d8c:	01000f74 	movhi	r4,61
   20d90:	21024004 	addi	r4,r4,2304
   20d94:	002c0f40 	call	2c0f4 <usleep>
						    pf= fopen("/mnt/host/dist.txt","r");
   20d98:	010000f4 	movhi	r4,3
   20d9c:	213a6604 	addi	r4,r4,-5736
   20da0:	014000f4 	movhi	r5,3
   20da4:	297a6b04 	addi	r5,r5,-5716
   20da8:	0021b340 	call	21b34 <fopen>
   20dac:	e0bffc15 	stw	r2,-16(fp)
						    fgets(dist,6,pf);
   20db0:	e0bffe04 	addi	r2,fp,-8
   20db4:	1009883a 	mov	r4,r2
   20db8:	01400184 	movi	r5,6
   20dbc:	e1bffc17 	ldw	r6,-16(fp)
   20dc0:	00216f40 	call	216f4 <fgets>
						    h=atoi(dist);
   20dc4:	e0bffe04 	addi	r2,fp,-8
   20dc8:	1009883a 	mov	r4,r2
   20dcc:	00212380 	call	21238 <atoi>
   20dd0:	e0bffd15 	stw	r2,-12(fp)
						    IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,h);
   20dd4:	e0fffd17 	ldw	r3,-12(fp)
   20dd8:	00804034 	movhi	r2,256
   20ddc:	10800804 	addi	r2,r2,32
   20de0:	10c00035 	stwio	r3,0(r2)
							break;
   20de4:	00006c06 	br	20f98 <MainCalc+0x604>
						case 3:
							pf= fopen("/mnt/host/inbox.txt","w");
   20de8:	010000f4 	movhi	r4,3
   20dec:	213a5804 	addi	r4,r4,-5792
   20df0:	014000f4 	movhi	r5,3
   20df4:	297a5d04 	addi	r5,r5,-5772
   20df8:	0021b340 	call	21b34 <fopen>
   20dfc:	e0bffc15 	stw	r2,-16(fp)
							fprintf(pf,"44",1);
   20e00:	e13ffc17 	ldw	r4,-16(fp)
   20e04:	014000f4 	movhi	r5,3
   20e08:	297a6e04 	addi	r5,r5,-5704
   20e0c:	01800044 	movi	r6,1
   20e10:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   20e14:	e13ffc17 	ldw	r4,-16(fp)
   20e18:	002138c0 	call	2138c <fclose>
							usleep(2000*2000);
   20e1c:	01000f74 	movhi	r4,61
   20e20:	21024004 	addi	r4,r4,2304
   20e24:	002c0f40 	call	2c0f4 <usleep>
						    pf= fopen("/mnt/host/dist.txt","r");
   20e28:	010000f4 	movhi	r4,3
   20e2c:	213a6604 	addi	r4,r4,-5736
   20e30:	014000f4 	movhi	r5,3
   20e34:	297a6b04 	addi	r5,r5,-5716
   20e38:	0021b340 	call	21b34 <fopen>
   20e3c:	e0bffc15 	stw	r2,-16(fp)
						    fgets(dist,6,pf);
   20e40:	e0bffe04 	addi	r2,fp,-8
   20e44:	1009883a 	mov	r4,r2
   20e48:	01400184 	movi	r5,6
   20e4c:	e1bffc17 	ldw	r6,-16(fp)
   20e50:	00216f40 	call	216f4 <fgets>
						    h=atoi(dist);
   20e54:	e0bffe04 	addi	r2,fp,-8
   20e58:	1009883a 	mov	r4,r2
   20e5c:	00212380 	call	21238 <atoi>
   20e60:	e0bffd15 	stw	r2,-12(fp)
						    IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,h);
   20e64:	e0fffd17 	ldw	r3,-12(fp)
   20e68:	00804034 	movhi	r2,256
   20e6c:	10800804 	addi	r2,r2,32
   20e70:	10c00035 	stwio	r3,0(r2)
							break;
   20e74:	00004806 	br	20f98 <MainCalc+0x604>
						case 4:
							pf= fopen("/mnt/host/inbox.txt","w");
   20e78:	010000f4 	movhi	r4,3
   20e7c:	213a5804 	addi	r4,r4,-5792
   20e80:	014000f4 	movhi	r5,3
   20e84:	297a5d04 	addi	r5,r5,-5772
   20e88:	0021b340 	call	21b34 <fopen>
   20e8c:	e0bffc15 	stw	r2,-16(fp)
							fprintf(pf,"55",1);
   20e90:	e13ffc17 	ldw	r4,-16(fp)
   20e94:	014000f4 	movhi	r5,3
   20e98:	297a6f04 	addi	r5,r5,-5700
   20e9c:	01800044 	movi	r6,1
   20ea0:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   20ea4:	e13ffc17 	ldw	r4,-16(fp)
   20ea8:	002138c0 	call	2138c <fclose>
							usleep(2000*2000);
   20eac:	01000f74 	movhi	r4,61
   20eb0:	21024004 	addi	r4,r4,2304
   20eb4:	002c0f40 	call	2c0f4 <usleep>
						    pf= fopen("/mnt/host/dist.txt","r");
   20eb8:	010000f4 	movhi	r4,3
   20ebc:	213a6604 	addi	r4,r4,-5736
   20ec0:	014000f4 	movhi	r5,3
   20ec4:	297a6b04 	addi	r5,r5,-5716
   20ec8:	0021b340 	call	21b34 <fopen>
   20ecc:	e0bffc15 	stw	r2,-16(fp)
						    fgets(dist,6,pf);
   20ed0:	e0bffe04 	addi	r2,fp,-8
   20ed4:	1009883a 	mov	r4,r2
   20ed8:	01400184 	movi	r5,6
   20edc:	e1bffc17 	ldw	r6,-16(fp)
   20ee0:	00216f40 	call	216f4 <fgets>
						    h=atoi(dist);
   20ee4:	e0bffe04 	addi	r2,fp,-8
   20ee8:	1009883a 	mov	r4,r2
   20eec:	00212380 	call	21238 <atoi>
   20ef0:	e0bffd15 	stw	r2,-12(fp)
						    IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,h);
   20ef4:	e0fffd17 	ldw	r3,-12(fp)
   20ef8:	00804034 	movhi	r2,256
   20efc:	10800804 	addi	r2,r2,32
   20f00:	10c00035 	stwio	r3,0(r2)
							break;
   20f04:	00002406 	br	20f98 <MainCalc+0x604>
						case 5:
							pf= fopen("/mnt/host/inbox.txt","w");
   20f08:	010000f4 	movhi	r4,3
   20f0c:	213a5804 	addi	r4,r4,-5792
   20f10:	014000f4 	movhi	r5,3
   20f14:	297a5d04 	addi	r5,r5,-5772
   20f18:	0021b340 	call	21b34 <fopen>
   20f1c:	e0bffc15 	stw	r2,-16(fp)
							fprintf(pf,"66",1);
   20f20:	e13ffc17 	ldw	r4,-16(fp)
   20f24:	014000f4 	movhi	r5,3
   20f28:	297a7004 	addi	r5,r5,-5696
   20f2c:	01800044 	movi	r6,1
   20f30:	0021b780 	call	21b78 <fprintf>
							fclose(pf);
   20f34:	e13ffc17 	ldw	r4,-16(fp)
   20f38:	002138c0 	call	2138c <fclose>
							usleep(2000*2000);
   20f3c:	01000f74 	movhi	r4,61
   20f40:	21024004 	addi	r4,r4,2304
   20f44:	002c0f40 	call	2c0f4 <usleep>
						    pf= fopen("/mnt/host/dist.txt","r");
   20f48:	010000f4 	movhi	r4,3
   20f4c:	213a6604 	addi	r4,r4,-5736
   20f50:	014000f4 	movhi	r5,3
   20f54:	297a6b04 	addi	r5,r5,-5716
   20f58:	0021b340 	call	21b34 <fopen>
   20f5c:	e0bffc15 	stw	r2,-16(fp)
						    fgets(dist,6,pf);
   20f60:	e0bffe04 	addi	r2,fp,-8
   20f64:	1009883a 	mov	r4,r2
   20f68:	01400184 	movi	r5,6
   20f6c:	e1bffc17 	ldw	r6,-16(fp)
   20f70:	00216f40 	call	216f4 <fgets>
						    h=atoi(dist);
   20f74:	e0bffe04 	addi	r2,fp,-8
   20f78:	1009883a 	mov	r4,r2
   20f7c:	00212380 	call	21238 <atoi>
   20f80:	e0bffd15 	stw	r2,-12(fp)
						    IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE,h);
   20f84:	e0fffd17 	ldw	r3,-12(fp)
   20f88:	00804034 	movhi	r2,256
   20f8c:	10800804 	addi	r2,r2,32
   20f90:	10c00035 	stwio	r3,0(r2)
							break;
   20f94:	0001883a 	nop
						default:
							return;
					}
				}
			if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x08) == 0x08))
   20f98:	00804034 	movhi	r2,256
   20f9c:	10801004 	addi	r2,r2,64
   20fa0:	10800037 	ldwio	r2,0(r2)
   20fa4:	1080020c 	andi	r2,r2,8
   20fa8:	10000d1e 	bne	r2,zero,20fe0 <MainCalc+0x64c>
			{
				pf= fopen("/mnt/host/inbox.txt","w");
   20fac:	010000f4 	movhi	r4,3
   20fb0:	213a5804 	addi	r4,r4,-5792
   20fb4:	014000f4 	movhi	r5,3
   20fb8:	297a5d04 	addi	r5,r5,-5772
   20fbc:	0021b340 	call	21b34 <fopen>
   20fc0:	e0bffc15 	stw	r2,-16(fp)
				fprintf(pf,"-1",1);
   20fc4:	e13ffc17 	ldw	r4,-16(fp)
   20fc8:	014000f4 	movhi	r5,3
   20fcc:	297a5e04 	addi	r5,r5,-5768
   20fd0:	01800044 	movi	r6,1
   20fd4:	0021b780 	call	21b78 <fprintf>
				fclose(pf);
   20fd8:	e13ffc17 	ldw	r4,-16(fp)
   20fdc:	002138c0 	call	2138c <fclose>
			}
			usleep(600*1000);
   20fe0:	01000274 	movhi	r4,9
   20fe4:	2109f004 	addi	r4,r4,10176
   20fe8:	002c0f40 	call	2c0f4 <usleep>

			++i;
   20fec:	e0bffa17 	ldw	r2,-24(fp)
   20ff0:	10800044 	addi	r2,r2,1
   20ff4:	e0bffa15 	stw	r2,-24(fp)
	int i=0;
	FILE* pf;
	int num=0;
	usleep(600*1000);
	MapMenu1();
	while (i<40)
   20ff8:	e0bffa17 	ldw	r2,-24(fp)
   20ffc:	10800a10 	cmplti	r2,r2,40
   21000:	103e701e 	bne	r2,zero,209c4 <MainCalc+0x30>
			}
			usleep(600*1000);

			++i;
		}
}
   21004:	e037883a 	mov	sp,fp
   21008:	dfc00217 	ldw	ra,8(sp)
   2100c:	df000117 	ldw	fp,4(sp)
   21010:	dc000017 	ldw	r16,0(sp)
   21014:	dec00304 	addi	sp,sp,12
   21018:	f800283a 	ret

0002101c <MainMenu>:
void MainMenu()
{
   2101c:	defffc04 	addi	sp,sp,-16
   21020:	dfc00315 	stw	ra,12(sp)
   21024:	df000215 	stw	fp,8(sp)
   21028:	df000204 	addi	fp,sp,8
	int i=0;
   2102c:	e03ffe15 	stw	zero,-8(fp)
	FILE* pf;
	int num=0;
   21030:	e03fff15 	stw	zero,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE, 0x00);
   21034:	0007883a 	mov	r3,zero
   21038:	00804034 	movhi	r2,256
   2103c:	10800804 	addi	r2,r2,32
   21040:	10c00035 	stwio	r3,0(r2)
	Menu1();
   21044:	00202340 	call	20234 <Menu1>
	while (i<20)
   21048:	00005b06 	br	211b8 <MainMenu+0x19c>
		{
			while( ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x07) == 0x07) );
   2104c:	0001883a 	nop
   21050:	00804034 	movhi	r2,256
   21054:	10801004 	addi	r2,r2,64
   21058:	10800037 	ldwio	r2,0(r2)
   2105c:	108001cc 	andi	r2,r2,7
   21060:	108001e0 	cmpeqi	r2,r2,7
   21064:	103ffa1e 	bne	r2,zero,21050 <MainMenu+0x34>

				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x01) == 0x01))
   21068:	00804034 	movhi	r2,256
   2106c:	10801004 	addi	r2,r2,64
   21070:	10800037 	ldwio	r2,0(r2)
   21074:	1080004c 	andi	r2,r2,1
   21078:	10000b1e 	bne	r2,zero,210a8 <MainMenu+0x8c>
				{
					num=(num+1)%4;
   2107c:	e0bfff17 	ldw	r2,-4(fp)
   21080:	10c00044 	addi	r3,r2,1
   21084:	00a00034 	movhi	r2,32768
   21088:	108000c4 	addi	r2,r2,3
   2108c:	1884703a 	and	r2,r3,r2
   21090:	1000040e 	bge	r2,zero,210a4 <MainMenu+0x88>
   21094:	10bfffc4 	addi	r2,r2,-1
   21098:	00ffff04 	movi	r3,-4
   2109c:	10c4b03a 	or	r2,r2,r3
   210a0:	10800044 	addi	r2,r2,1
   210a4:	e0bfff15 	stw	r2,-4(fp)
				}
				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x02) == 0x02))
   210a8:	00804034 	movhi	r2,256
   210ac:	10801004 	addi	r2,r2,64
   210b0:	10800037 	ldwio	r2,0(r2)
   210b4:	1080008c 	andi	r2,r2,2
   210b8:	10000b1e 	bne	r2,zero,210e8 <MainMenu+0xcc>
				{
					num=(num+3)%4;
   210bc:	e0bfff17 	ldw	r2,-4(fp)
   210c0:	10c000c4 	addi	r3,r2,3
   210c4:	00a00034 	movhi	r2,32768
   210c8:	108000c4 	addi	r2,r2,3
   210cc:	1884703a 	and	r2,r3,r2
   210d0:	1000040e 	bge	r2,zero,210e4 <MainMenu+0xc8>
   210d4:	10bfffc4 	addi	r2,r2,-1
   210d8:	00ffff04 	movi	r3,-4
   210dc:	10c4b03a 	or	r2,r2,r3
   210e0:	10800044 	addi	r2,r2,1
   210e4:	e0bfff15 	stw	r2,-4(fp)
				}
				if( !((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x04) == 0x04))
   210e8:	00804034 	movhi	r2,256
   210ec:	10801004 	addi	r2,r2,64
   210f0:	10800037 	ldwio	r2,0(r2)
   210f4:	1080010c 	andi	r2,r2,4
   210f8:	10001a1e 	bne	r2,zero,21164 <MainMenu+0x148>
				{
					switch(num)
   210fc:	e0bfff17 	ldw	r2,-4(fp)
   21100:	10c00060 	cmpeqi	r3,r2,1
   21104:	18000f1e 	bne	r3,zero,21144 <MainMenu+0x128>
   21108:	10c000a0 	cmpeqi	r3,r2,2
   2110c:	1800121e 	bne	r3,zero,21158 <MainMenu+0x13c>
   21110:	1000131e 	bne	r2,zero,21160 <MainMenu+0x144>
					{
						case 0:
							About();
   21114:	00202040 	call	20204 <About>
							usleep(600*1000);
   21118:	01000274 	movhi	r4,9
   2111c:	2109f004 	addi	r4,r4,10176
   21120:	002c0f40 	call	2c0f4 <usleep>
							while( ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x07) == 0x07) );
   21124:	0001883a 	nop
   21128:	00804034 	movhi	r2,256
   2112c:	10801004 	addi	r2,r2,64
   21130:	10800037 	ldwio	r2,0(r2)
   21134:	108001cc 	andi	r2,r2,7
   21138:	108001e0 	cmpeqi	r2,r2,7
   2113c:	103ffa1e 	bne	r2,zero,21128 <MainMenu+0x10c>
							break;
   21140:	00000806 	br	21164 <MainMenu+0x148>
						case 1:
							MainMap();
   21144:	00205780 	call	20578 <MainMap>
							usleep(600*1000);
   21148:	01000274 	movhi	r4,9
   2114c:	2109f004 	addi	r4,r4,10176
   21150:	002c0f40 	call	2c0f4 <usleep>
							break;
   21154:	00000306 	br	21164 <MainMenu+0x148>
						case 2:
							MainCalc();
   21158:	00209940 	call	20994 <MainCalc>
							break;
   2115c:	00000106 	br	21164 <MainMenu+0x148>
						default:
							return;
   21160:	00001806 	br	211c4 <MainMenu+0x1a8>
					}
				}
				MAN(num);
   21164:	e0bfff17 	ldw	r2,-4(fp)
   21168:	1000011e 	bne	r2,zero,21170 <MainMenu+0x154>
   2116c:	00202340 	call	20234 <Menu1>
   21170:	e0bfff17 	ldw	r2,-4(fp)
   21174:	10800058 	cmpnei	r2,r2,1
   21178:	1000011e 	bne	r2,zero,21180 <MainMenu+0x164>
   2117c:	00202800 	call	20280 <Menu2>
   21180:	e0bfff17 	ldw	r2,-4(fp)
   21184:	10800098 	cmpnei	r2,r2,2
   21188:	1000011e 	bne	r2,zero,21190 <MainMenu+0x174>
   2118c:	00202cc0 	call	202cc <Menu3>
   21190:	e0bfff17 	ldw	r2,-4(fp)
   21194:	108000d8 	cmpnei	r2,r2,3
   21198:	1000011e 	bne	r2,zero,211a0 <MainMenu+0x184>
   2119c:	00203180 	call	20318 <Menu4>
			usleep(600*1000);
   211a0:	01000274 	movhi	r4,9
   211a4:	2109f004 	addi	r4,r4,10176
   211a8:	002c0f40 	call	2c0f4 <usleep>

			++i;
   211ac:	e0bffe17 	ldw	r2,-8(fp)
   211b0:	10800044 	addi	r2,r2,1
   211b4:	e0bffe15 	stw	r2,-8(fp)
	int i=0;
	FILE* pf;
	int num=0;
	IOWR_ALTERA_AVALON_PIO_DATA(TO_HEX_BASE, 0x00);
	Menu1();
	while (i<20)
   211b8:	e0bffe17 	ldw	r2,-8(fp)
   211bc:	10800510 	cmplti	r2,r2,20
   211c0:	103fa21e 	bne	r2,zero,2104c <MainMenu+0x30>
				MAN(num);
			usleep(600*1000);

			++i;
		}
}
   211c4:	e037883a 	mov	sp,fp
   211c8:	dfc00117 	ldw	ra,4(sp)
   211cc:	df000017 	ldw	fp,0(sp)
   211d0:	dec00204 	addi	sp,sp,8
   211d4:	f800283a 	ret

000211d8 <main>:
int main()
{
   211d8:	defffe04 	addi	sp,sp,-8
   211dc:	dfc00115 	stw	ra,4(sp)
   211e0:	df000015 	stw	fp,0(sp)
   211e4:	d839883a 	mov	fp,sp
	MainMenu();
   211e8:	002101c0 	call	2101c <MainMenu>



	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
   211ec:	010000f4 	movhi	r4,3
   211f0:	213a7104 	addi	r4,r4,-5692
   211f4:	00233380 	call	23338 <puts>
			"				BYE BYE!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
  return 0;
   211f8:	0005883a 	mov	r2,zero
}
   211fc:	e037883a 	mov	sp,fp
   21200:	dfc00117 	ldw	ra,4(sp)
   21204:	df000017 	ldw	fp,0(sp)
   21208:	dec00204 	addi	sp,sp,8
   2120c:	f800283a 	ret

00021210 <__mulsi3>:
   21210:	0005883a 	mov	r2,zero
   21214:	20000726 	beq	r4,zero,21234 <__mulsi3+0x24>
   21218:	20c0004c 	andi	r3,r4,1
   2121c:	2008d07a 	srli	r4,r4,1
   21220:	18000126 	beq	r3,zero,21228 <__mulsi3+0x18>
   21224:	1145883a 	add	r2,r2,r5
   21228:	294b883a 	add	r5,r5,r5
   2122c:	203ffa1e 	bne	r4,zero,21218 <__mulsi3+0x8>
   21230:	f800283a 	ret
   21234:	f800283a 	ret

00021238 <atoi>:
   21238:	000b883a 	mov	r5,zero
   2123c:	01800284 	movi	r6,10
   21240:	00239fc1 	jmpi	239fc <strtol>

00021244 <_atoi_r>:
   21244:	000d883a 	mov	r6,zero
   21248:	01c00284 	movi	r7,10
   2124c:	00237841 	jmpi	23784 <_strtol_r>

00021250 <_fclose_r>:
   21250:	defffc04 	addi	sp,sp,-16
   21254:	dc400115 	stw	r17,4(sp)
   21258:	dc000015 	stw	r16,0(sp)
   2125c:	dfc00315 	stw	ra,12(sp)
   21260:	dc800215 	stw	r18,8(sp)
   21264:	2821883a 	mov	r16,r5
   21268:	2023883a 	mov	r17,r4
   2126c:	28003426 	beq	r5,zero,21340 <_fclose_r+0xf0>
   21270:	00219c40 	call	219c4 <__sfp_lock_acquire>
   21274:	88000226 	beq	r17,zero,21280 <_fclose_r+0x30>
   21278:	88800e17 	ldw	r2,56(r17)
   2127c:	10003826 	beq	r2,zero,21360 <_fclose_r+0x110>
   21280:	8080030f 	ldh	r2,12(r16)
   21284:	10002526 	beq	r2,zero,2131c <_fclose_r+0xcc>
   21288:	8809883a 	mov	r4,r17
   2128c:	800b883a 	mov	r5,r16
   21290:	00213a00 	call	213a0 <_fflush_r>
   21294:	1025883a 	mov	r18,r2
   21298:	80800b17 	ldw	r2,44(r16)
   2129c:	10000426 	beq	r2,zero,212b0 <_fclose_r+0x60>
   212a0:	81400717 	ldw	r5,28(r16)
   212a4:	8809883a 	mov	r4,r17
   212a8:	103ee83a 	callr	r2
   212ac:	10003516 	blt	r2,zero,21384 <_fclose_r+0x134>
   212b0:	8080030b 	ldhu	r2,12(r16)
   212b4:	1080200c 	andi	r2,r2,128
   212b8:	10bfffcc 	andi	r2,r2,65535
   212bc:	10a0001c 	xori	r2,r2,32768
   212c0:	10a00004 	addi	r2,r2,-32768
   212c4:	10002b1e 	bne	r2,zero,21374 <_fclose_r+0x124>
   212c8:	81400c17 	ldw	r5,48(r16)
   212cc:	28000526 	beq	r5,zero,212e4 <_fclose_r+0x94>
   212d0:	80801004 	addi	r2,r16,64
   212d4:	28800226 	beq	r5,r2,212e0 <_fclose_r+0x90>
   212d8:	8809883a 	mov	r4,r17
   212dc:	0021cd80 	call	21cd8 <_free_r>
   212e0:	80000c15 	stw	zero,48(r16)
   212e4:	81401117 	ldw	r5,68(r16)
   212e8:	28000326 	beq	r5,zero,212f8 <_fclose_r+0xa8>
   212ec:	8809883a 	mov	r4,r17
   212f0:	0021cd80 	call	21cd8 <_free_r>
   212f4:	80001115 	stw	zero,68(r16)
   212f8:	8000030d 	sth	zero,12(r16)
   212fc:	00219c80 	call	219c8 <__sfp_lock_release>
   21300:	9005883a 	mov	r2,r18
   21304:	dfc00317 	ldw	ra,12(sp)
   21308:	dc800217 	ldw	r18,8(sp)
   2130c:	dc400117 	ldw	r17,4(sp)
   21310:	dc000017 	ldw	r16,0(sp)
   21314:	dec00404 	addi	sp,sp,16
   21318:	f800283a 	ret
   2131c:	00219c80 	call	219c8 <__sfp_lock_release>
   21320:	0025883a 	mov	r18,zero
   21324:	9005883a 	mov	r2,r18
   21328:	dfc00317 	ldw	ra,12(sp)
   2132c:	dc800217 	ldw	r18,8(sp)
   21330:	dc400117 	ldw	r17,4(sp)
   21334:	dc000017 	ldw	r16,0(sp)
   21338:	dec00404 	addi	sp,sp,16
   2133c:	f800283a 	ret
   21340:	0025883a 	mov	r18,zero
   21344:	9005883a 	mov	r2,r18
   21348:	dfc00317 	ldw	ra,12(sp)
   2134c:	dc800217 	ldw	r18,8(sp)
   21350:	dc400117 	ldw	r17,4(sp)
   21354:	dc000017 	ldw	r16,0(sp)
   21358:	dec00404 	addi	sp,sp,16
   2135c:	f800283a 	ret
   21360:	8809883a 	mov	r4,r17
   21364:	00217bc0 	call	217bc <__sinit>
   21368:	8080030f 	ldh	r2,12(r16)
   2136c:	103fc61e 	bne	r2,zero,21288 <_fclose_r+0x38>
   21370:	003fea06 	br	2131c <_fclose_r+0xcc>
   21374:	81400417 	ldw	r5,16(r16)
   21378:	8809883a 	mov	r4,r17
   2137c:	0021cd80 	call	21cd8 <_free_r>
   21380:	003fd106 	br	212c8 <_fclose_r+0x78>
   21384:	04bfffc4 	movi	r18,-1
   21388:	003fc906 	br	212b0 <_fclose_r+0x60>

0002138c <fclose>:
   2138c:	008000f4 	movhi	r2,3
   21390:	10be6f04 	addi	r2,r2,-1604
   21394:	200b883a 	mov	r5,r4
   21398:	11000017 	ldw	r4,0(r2)
   2139c:	00212501 	jmpi	21250 <_fclose_r>

000213a0 <_fflush_r>:
   213a0:	defffb04 	addi	sp,sp,-20
   213a4:	dcc00315 	stw	r19,12(sp)
   213a8:	dc400115 	stw	r17,4(sp)
   213ac:	dfc00415 	stw	ra,16(sp)
   213b0:	dc800215 	stw	r18,8(sp)
   213b4:	dc000015 	stw	r16,0(sp)
   213b8:	2027883a 	mov	r19,r4
   213bc:	2823883a 	mov	r17,r5
   213c0:	20000226 	beq	r4,zero,213cc <_fflush_r+0x2c>
   213c4:	20800e17 	ldw	r2,56(r4)
   213c8:	10005726 	beq	r2,zero,21528 <_fflush_r+0x188>
   213cc:	8880030b 	ldhu	r2,12(r17)
   213d0:	10c0020c 	andi	r3,r2,8
   213d4:	18ffffcc 	andi	r3,r3,65535
   213d8:	18e0001c 	xori	r3,r3,32768
   213dc:	18e00004 	addi	r3,r3,-32768
   213e0:	1800311e 	bne	r3,zero,214a8 <_fflush_r+0x108>
   213e4:	89000117 	ldw	r4,4(r17)
   213e8:	10c20014 	ori	r3,r2,2048
   213ec:	88c0030d 	sth	r3,12(r17)
   213f0:	180b883a 	mov	r5,r3
   213f4:	0100520e 	bge	zero,r4,21540 <_fflush_r+0x1a0>
   213f8:	88c00a17 	ldw	r3,40(r17)
   213fc:	18002226 	beq	r3,zero,21488 <_fflush_r+0xe8>
   21400:	1084000c 	andi	r2,r2,4096
   21404:	10bfffcc 	andi	r2,r2,65535
   21408:	10a0001c 	xori	r2,r2,32768
   2140c:	10a00004 	addi	r2,r2,-32768
   21410:	10004e26 	beq	r2,zero,2154c <_fflush_r+0x1ac>
   21414:	8c001417 	ldw	r16,80(r17)
   21418:	2940010c 	andi	r5,r5,4
   2141c:	297fffcc 	andi	r5,r5,65535
   21420:	2960001c 	xori	r5,r5,32768
   21424:	29600004 	addi	r5,r5,-32768
   21428:	28000626 	beq	r5,zero,21444 <_fflush_r+0xa4>
   2142c:	89000117 	ldw	r4,4(r17)
   21430:	88800c17 	ldw	r2,48(r17)
   21434:	8121c83a 	sub	r16,r16,r4
   21438:	10000226 	beq	r2,zero,21444 <_fflush_r+0xa4>
   2143c:	88800f17 	ldw	r2,60(r17)
   21440:	80a1c83a 	sub	r16,r16,r2
   21444:	89400717 	ldw	r5,28(r17)
   21448:	9809883a 	mov	r4,r19
   2144c:	800d883a 	mov	r6,r16
   21450:	000f883a 	mov	r7,zero
   21454:	183ee83a 	callr	r3
   21458:	8080281e 	bne	r16,r2,214fc <_fflush_r+0x15c>
   2145c:	8880030b 	ldhu	r2,12(r17)
   21460:	88c00417 	ldw	r3,16(r17)
   21464:	88000115 	stw	zero,4(r17)
   21468:	113dffcc 	andi	r4,r2,63487
   2146c:	1084000c 	andi	r2,r2,4096
   21470:	10bfffcc 	andi	r2,r2,65535
   21474:	10a0001c 	xori	r2,r2,32768
   21478:	8900030d 	sth	r4,12(r17)
   2147c:	88c00015 	stw	r3,0(r17)
   21480:	10a00004 	addi	r2,r2,-32768
   21484:	10002c1e 	bne	r2,zero,21538 <_fflush_r+0x198>
   21488:	0005883a 	mov	r2,zero
   2148c:	dfc00417 	ldw	ra,16(sp)
   21490:	dcc00317 	ldw	r19,12(sp)
   21494:	dc800217 	ldw	r18,8(sp)
   21498:	dc400117 	ldw	r17,4(sp)
   2149c:	dc000017 	ldw	r16,0(sp)
   214a0:	dec00504 	addi	sp,sp,20
   214a4:	f800283a 	ret
   214a8:	8c800417 	ldw	r18,16(r17)
   214ac:	903ff626 	beq	r18,zero,21488 <_fflush_r+0xe8>
   214b0:	8c000017 	ldw	r16,0(r17)
   214b4:	108000cc 	andi	r2,r2,3
   214b8:	8c800015 	stw	r18,0(r17)
   214bc:	84a1c83a 	sub	r16,r16,r18
   214c0:	10001b1e 	bne	r2,zero,21530 <_fflush_r+0x190>
   214c4:	88800517 	ldw	r2,20(r17)
   214c8:	88800215 	stw	r2,8(r17)
   214cc:	04000316 	blt	zero,r16,214dc <_fflush_r+0x13c>
   214d0:	003fed06 	br	21488 <_fflush_r+0xe8>
   214d4:	90a5883a 	add	r18,r18,r2
   214d8:	043feb0e 	bge	zero,r16,21488 <_fflush_r+0xe8>
   214dc:	88800917 	ldw	r2,36(r17)
   214e0:	89400717 	ldw	r5,28(r17)
   214e4:	800f883a 	mov	r7,r16
   214e8:	900d883a 	mov	r6,r18
   214ec:	9809883a 	mov	r4,r19
   214f0:	103ee83a 	callr	r2
   214f4:	80a1c83a 	sub	r16,r16,r2
   214f8:	00bff616 	blt	zero,r2,214d4 <_fflush_r+0x134>
   214fc:	88c0030b 	ldhu	r3,12(r17)
   21500:	00bfffc4 	movi	r2,-1
   21504:	18c01014 	ori	r3,r3,64
   21508:	88c0030d 	sth	r3,12(r17)
   2150c:	dfc00417 	ldw	ra,16(sp)
   21510:	dcc00317 	ldw	r19,12(sp)
   21514:	dc800217 	ldw	r18,8(sp)
   21518:	dc400117 	ldw	r17,4(sp)
   2151c:	dc000017 	ldw	r16,0(sp)
   21520:	dec00504 	addi	sp,sp,20
   21524:	f800283a 	ret
   21528:	00217bc0 	call	217bc <__sinit>
   2152c:	003fa706 	br	213cc <_fflush_r+0x2c>
   21530:	0005883a 	mov	r2,zero
   21534:	003fe406 	br	214c8 <_fflush_r+0x128>
   21538:	8c001415 	stw	r16,80(r17)
   2153c:	003fd206 	br	21488 <_fflush_r+0xe8>
   21540:	88c00f17 	ldw	r3,60(r17)
   21544:	00ffac16 	blt	zero,r3,213f8 <_fflush_r+0x58>
   21548:	003fcf06 	br	21488 <_fflush_r+0xe8>
   2154c:	89400717 	ldw	r5,28(r17)
   21550:	9809883a 	mov	r4,r19
   21554:	000d883a 	mov	r6,zero
   21558:	01c00044 	movi	r7,1
   2155c:	183ee83a 	callr	r3
   21560:	1021883a 	mov	r16,r2
   21564:	00bfffc4 	movi	r2,-1
   21568:	80800326 	beq	r16,r2,21578 <_fflush_r+0x1d8>
   2156c:	8940030b 	ldhu	r5,12(r17)
   21570:	88c00a17 	ldw	r3,40(r17)
   21574:	003fa806 	br	21418 <_fflush_r+0x78>
   21578:	98c00017 	ldw	r3,0(r19)
   2157c:	00800744 	movi	r2,29
   21580:	18bfde1e 	bne	r3,r2,214fc <_fflush_r+0x15c>
   21584:	003fc006 	br	21488 <_fflush_r+0xe8>

00021588 <fflush>:
   21588:	200b883a 	mov	r5,r4
   2158c:	20000426 	beq	r4,zero,215a0 <fflush+0x18>
   21590:	008000f4 	movhi	r2,3
   21594:	10be6f04 	addi	r2,r2,-1604
   21598:	11000017 	ldw	r4,0(r2)
   2159c:	00213a01 	jmpi	213a0 <_fflush_r>
   215a0:	008000f4 	movhi	r2,3
   215a4:	10be6e04 	addi	r2,r2,-1608
   215a8:	11000017 	ldw	r4,0(r2)
   215ac:	014000b4 	movhi	r5,2
   215b0:	2944e804 	addi	r5,r5,5024
   215b4:	00225501 	jmpi	22550 <_fwalk_reent>

000215b8 <_fgets_r>:
   215b8:	defff704 	addi	sp,sp,-36
   215bc:	dd800715 	stw	r22,28(sp)
   215c0:	dd400615 	stw	r21,24(sp)
   215c4:	dc400215 	stw	r17,8(sp)
   215c8:	dfc00815 	stw	ra,32(sp)
   215cc:	dd000515 	stw	r20,20(sp)
   215d0:	dcc00415 	stw	r19,16(sp)
   215d4:	dc800315 	stw	r18,12(sp)
   215d8:	dc000115 	stw	r16,4(sp)
   215dc:	00800044 	movi	r2,1
   215e0:	202b883a 	mov	r21,r4
   215e4:	282d883a 	mov	r22,r5
   215e8:	3823883a 	mov	r17,r7
   215ec:	11803f0e 	bge	r2,r6,216ec <_fgets_r+0x134>
   215f0:	20000226 	beq	r4,zero,215fc <_fgets_r+0x44>
   215f4:	20800e17 	ldw	r2,56(r4)
   215f8:	10002d26 	beq	r2,zero,216b0 <_fgets_r+0xf8>
   215fc:	34bfffc4 	addi	r18,r6,-1
   21600:	b027883a 	mov	r19,r22
   21604:	00001506 	br	2165c <_fgets_r+0xa4>
   21608:	01400284 	movi	r5,10
   2160c:	8d000017 	ldw	r20,0(r17)
   21610:	9400012e 	bgeu	r18,r16,21618 <_fgets_r+0x60>
   21614:	9021883a 	mov	r16,r18
   21618:	a009883a 	mov	r4,r20
   2161c:	800d883a 	mov	r6,r16
   21620:	0022f340 	call	22f34 <memchr>
   21624:	9809883a 	mov	r4,r19
   21628:	a00b883a 	mov	r5,r20
   2162c:	800d883a 	mov	r6,r16
   21630:	9425c83a 	sub	r18,r18,r16
   21634:	1000221e 	bne	r2,zero,216c0 <_fgets_r+0x108>
   21638:	88800117 	ldw	r2,4(r17)
   2163c:	88c00017 	ldw	r3,0(r17)
   21640:	9c27883a 	add	r19,r19,r16
   21644:	1405c83a 	sub	r2,r2,r16
   21648:	1c21883a 	add	r16,r3,r16
   2164c:	88800115 	stw	r2,4(r17)
   21650:	8c000015 	stw	r16,0(r17)
   21654:	002302c0 	call	2302c <memcpy>
   21658:	90000926 	beq	r18,zero,21680 <_fgets_r+0xc8>
   2165c:	8c000117 	ldw	r16,4(r17)
   21660:	803fe91e 	bne	r16,zero,21608 <_fgets_r+0x50>
   21664:	a809883a 	mov	r4,r21
   21668:	880b883a 	mov	r5,r17
   2166c:	00233680 	call	23368 <__srefill_r>
   21670:	1000021e 	bne	r2,zero,2167c <_fgets_r+0xc4>
   21674:	8c000117 	ldw	r16,4(r17)
   21678:	003fe306 	br	21608 <_fgets_r+0x50>
   2167c:	9d801b26 	beq	r19,r22,216ec <_fgets_r+0x134>
   21680:	98000005 	stb	zero,0(r19)
   21684:	b005883a 	mov	r2,r22
   21688:	dfc00817 	ldw	ra,32(sp)
   2168c:	dd800717 	ldw	r22,28(sp)
   21690:	dd400617 	ldw	r21,24(sp)
   21694:	dd000517 	ldw	r20,20(sp)
   21698:	dcc00417 	ldw	r19,16(sp)
   2169c:	dc800317 	ldw	r18,12(sp)
   216a0:	dc400217 	ldw	r17,8(sp)
   216a4:	dc000117 	ldw	r16,4(sp)
   216a8:	dec00904 	addi	sp,sp,36
   216ac:	f800283a 	ret
   216b0:	d9800015 	stw	r6,0(sp)
   216b4:	00217bc0 	call	217bc <__sinit>
   216b8:	d9800017 	ldw	r6,0(sp)
   216bc:	003fcf06 	br	215fc <_fgets_r+0x44>
   216c0:	88c00117 	ldw	r3,4(r17)
   216c4:	10800044 	addi	r2,r2,1
   216c8:	1521c83a 	sub	r16,r2,r20
   216cc:	1c07c83a 	sub	r3,r3,r16
   216d0:	800d883a 	mov	r6,r16
   216d4:	88c00115 	stw	r3,4(r17)
   216d8:	88800015 	stw	r2,0(r17)
   216dc:	9c21883a 	add	r16,r19,r16
   216e0:	002302c0 	call	2302c <memcpy>
   216e4:	80000005 	stb	zero,0(r16)
   216e8:	003fe606 	br	21684 <_fgets_r+0xcc>
   216ec:	002d883a 	mov	r22,zero
   216f0:	003fe406 	br	21684 <_fgets_r+0xcc>

000216f4 <fgets>:
   216f4:	008000f4 	movhi	r2,3
   216f8:	10be6f04 	addi	r2,r2,-1604
   216fc:	2007883a 	mov	r3,r4
   21700:	11000017 	ldw	r4,0(r2)
   21704:	2805883a 	mov	r2,r5
   21708:	300f883a 	mov	r7,r6
   2170c:	180b883a 	mov	r5,r3
   21710:	100d883a 	mov	r6,r2
   21714:	00215b81 	jmpi	215b8 <_fgets_r>

00021718 <__fp_lock>:
   21718:	0005883a 	mov	r2,zero
   2171c:	f800283a 	ret

00021720 <__fp_unlock>:
   21720:	0005883a 	mov	r2,zero
   21724:	f800283a 	ret

00021728 <_cleanup_r>:
   21728:	014000b4 	movhi	r5,2
   2172c:	2944e304 	addi	r5,r5,5004
   21730:	00224a81 	jmpi	224a8 <_fwalk>

00021734 <__sfmoreglue>:
   21734:	defffc04 	addi	sp,sp,-16
   21738:	dc800215 	stw	r18,8(sp)
   2173c:	2825883a 	mov	r18,r5
   21740:	dc000015 	stw	r16,0(sp)
   21744:	01401704 	movi	r5,92
   21748:	2021883a 	mov	r16,r4
   2174c:	9009883a 	mov	r4,r18
   21750:	dfc00315 	stw	ra,12(sp)
   21754:	dc400115 	stw	r17,4(sp)
   21758:	00212100 	call	21210 <__mulsi3>
   2175c:	8009883a 	mov	r4,r16
   21760:	11400304 	addi	r5,r2,12
   21764:	1023883a 	mov	r17,r2
   21768:	00227b00 	call	227b0 <_malloc_r>
   2176c:	1021883a 	mov	r16,r2
   21770:	10000726 	beq	r2,zero,21790 <__sfmoreglue+0x5c>
   21774:	11000304 	addi	r4,r2,12
   21778:	10000015 	stw	zero,0(r2)
   2177c:	14800115 	stw	r18,4(r2)
   21780:	11000215 	stw	r4,8(r2)
   21784:	000b883a 	mov	r5,zero
   21788:	880d883a 	mov	r6,r17
   2178c:	002316c0 	call	2316c <memset>
   21790:	8005883a 	mov	r2,r16
   21794:	dfc00317 	ldw	ra,12(sp)
   21798:	dc800217 	ldw	r18,8(sp)
   2179c:	dc400117 	ldw	r17,4(sp)
   217a0:	dc000017 	ldw	r16,0(sp)
   217a4:	dec00404 	addi	sp,sp,16
   217a8:	f800283a 	ret

000217ac <_cleanup>:
   217ac:	008000f4 	movhi	r2,3
   217b0:	10be6e04 	addi	r2,r2,-1608
   217b4:	11000017 	ldw	r4,0(r2)
   217b8:	00217281 	jmpi	21728 <_cleanup_r>

000217bc <__sinit>:
   217bc:	20800e17 	ldw	r2,56(r4)
   217c0:	1000401e 	bne	r2,zero,218c4 <__sinit+0x108>
   217c4:	21400117 	ldw	r5,4(r4)
   217c8:	018000b4 	movhi	r6,2
   217cc:	3185ca04 	addi	r6,r6,5928
   217d0:	20c00217 	ldw	r3,8(r4)
   217d4:	21800f15 	stw	r6,60(r4)
   217d8:	2080bb04 	addi	r2,r4,748
   217dc:	02400044 	movi	r9,1
   217e0:	018000c4 	movi	r6,3
   217e4:	2180b915 	stw	r6,740(r4)
   217e8:	2080ba15 	stw	r2,744(r4)
   217ec:	22400e15 	stw	r9,56(r4)
   217f0:	20800317 	ldw	r2,12(r4)
   217f4:	2000b815 	stw	zero,736(r4)
   217f8:	020000b4 	movhi	r8,2
   217fc:	420d6e04 	addi	r8,r8,13752
   21800:	01c000b4 	movhi	r7,2
   21804:	39cd8304 	addi	r7,r7,13836
   21808:	018000b4 	movhi	r6,2
   2180c:	318da504 	addi	r6,r6,13972
   21810:	010000b4 	movhi	r4,2
   21814:	210dbc04 	addi	r4,r4,14064
   21818:	02800104 	movi	r10,4
   2181c:	28000015 	stw	zero,0(r5)
   21820:	28000115 	stw	zero,4(r5)
   21824:	28000215 	stw	zero,8(r5)
   21828:	2a80030d 	sth	r10,12(r5)
   2182c:	2800038d 	sth	zero,14(r5)
   21830:	28000415 	stw	zero,16(r5)
   21834:	28000515 	stw	zero,20(r5)
   21838:	28000615 	stw	zero,24(r5)
   2183c:	29400715 	stw	r5,28(r5)
   21840:	2a000815 	stw	r8,32(r5)
   21844:	29c00915 	stw	r7,36(r5)
   21848:	29800a15 	stw	r6,40(r5)
   2184c:	29000b15 	stw	r4,44(r5)
   21850:	01400284 	movi	r5,10
   21854:	18000015 	stw	zero,0(r3)
   21858:	18000115 	stw	zero,4(r3)
   2185c:	18000215 	stw	zero,8(r3)
   21860:	1940030d 	sth	r5,12(r3)
   21864:	1a40038d 	sth	r9,14(r3)
   21868:	18000415 	stw	zero,16(r3)
   2186c:	18000515 	stw	zero,20(r3)
   21870:	18000615 	stw	zero,24(r3)
   21874:	18c00715 	stw	r3,28(r3)
   21878:	1a000815 	stw	r8,32(r3)
   2187c:	19c00915 	stw	r7,36(r3)
   21880:	19800a15 	stw	r6,40(r3)
   21884:	19000b15 	stw	r4,44(r3)
   21888:	00c00484 	movi	r3,18
   2188c:	10c0030d 	sth	r3,12(r2)
   21890:	00c00084 	movi	r3,2
   21894:	10000015 	stw	zero,0(r2)
   21898:	10000115 	stw	zero,4(r2)
   2189c:	10000215 	stw	zero,8(r2)
   218a0:	10c0038d 	sth	r3,14(r2)
   218a4:	10000415 	stw	zero,16(r2)
   218a8:	10000515 	stw	zero,20(r2)
   218ac:	10000615 	stw	zero,24(r2)
   218b0:	10800715 	stw	r2,28(r2)
   218b4:	12000815 	stw	r8,32(r2)
   218b8:	11c00915 	stw	r7,36(r2)
   218bc:	11800a15 	stw	r6,40(r2)
   218c0:	11000b15 	stw	r4,44(r2)
   218c4:	f800283a 	ret

000218c8 <__sfp>:
   218c8:	defffc04 	addi	sp,sp,-16
   218cc:	008000f4 	movhi	r2,3
   218d0:	10be6e04 	addi	r2,r2,-1608
   218d4:	dc400115 	stw	r17,4(sp)
   218d8:	14400017 	ldw	r17,0(r2)
   218dc:	dc800215 	stw	r18,8(sp)
   218e0:	dfc00315 	stw	ra,12(sp)
   218e4:	88800e17 	ldw	r2,56(r17)
   218e8:	dc000015 	stw	r16,0(sp)
   218ec:	2025883a 	mov	r18,r4
   218f0:	10002826 	beq	r2,zero,21994 <__sfp+0xcc>
   218f4:	8c40b804 	addi	r17,r17,736
   218f8:	043fffc4 	movi	r16,-1
   218fc:	89400117 	ldw	r5,4(r17)
   21900:	88800217 	ldw	r2,8(r17)
   21904:	297fffc4 	addi	r5,r5,-1
   21908:	28000a16 	blt	r5,zero,21934 <__sfp+0x6c>
   2190c:	10c0030f 	ldh	r3,12(r2)
   21910:	18000c26 	beq	r3,zero,21944 <__sfp+0x7c>
   21914:	10c01a04 	addi	r3,r2,104
   21918:	00000206 	br	21924 <__sfp+0x5c>
   2191c:	19bfe90f 	ldh	r6,-92(r3)
   21920:	30000826 	beq	r6,zero,21944 <__sfp+0x7c>
   21924:	297fffc4 	addi	r5,r5,-1
   21928:	18bffd04 	addi	r2,r3,-12
   2192c:	18c01704 	addi	r3,r3,92
   21930:	2c3ffa1e 	bne	r5,r16,2191c <__sfp+0x54>
   21934:	88800017 	ldw	r2,0(r17)
   21938:	10001926 	beq	r2,zero,219a0 <__sfp+0xd8>
   2193c:	1023883a 	mov	r17,r2
   21940:	003fee06 	br	218fc <__sfp+0x34>
   21944:	00ffffc4 	movi	r3,-1
   21948:	10c0038d 	sth	r3,14(r2)
   2194c:	00c00044 	movi	r3,1
   21950:	10c0030d 	sth	r3,12(r2)
   21954:	10000015 	stw	zero,0(r2)
   21958:	10000215 	stw	zero,8(r2)
   2195c:	10000115 	stw	zero,4(r2)
   21960:	10000415 	stw	zero,16(r2)
   21964:	10000515 	stw	zero,20(r2)
   21968:	10000615 	stw	zero,24(r2)
   2196c:	10000c15 	stw	zero,48(r2)
   21970:	10000d15 	stw	zero,52(r2)
   21974:	10001115 	stw	zero,68(r2)
   21978:	10001215 	stw	zero,72(r2)
   2197c:	dfc00317 	ldw	ra,12(sp)
   21980:	dc800217 	ldw	r18,8(sp)
   21984:	dc400117 	ldw	r17,4(sp)
   21988:	dc000017 	ldw	r16,0(sp)
   2198c:	dec00404 	addi	sp,sp,16
   21990:	f800283a 	ret
   21994:	8809883a 	mov	r4,r17
   21998:	00217bc0 	call	217bc <__sinit>
   2199c:	003fd506 	br	218f4 <__sfp+0x2c>
   219a0:	9009883a 	mov	r4,r18
   219a4:	01400104 	movi	r5,4
   219a8:	00217340 	call	21734 <__sfmoreglue>
   219ac:	88800015 	stw	r2,0(r17)
   219b0:	103fe21e 	bne	r2,zero,2193c <__sfp+0x74>
   219b4:	00800304 	movi	r2,12
   219b8:	90800015 	stw	r2,0(r18)
   219bc:	0005883a 	mov	r2,zero
   219c0:	003fee06 	br	2197c <__sfp+0xb4>

000219c4 <__sfp_lock_acquire>:
   219c4:	f800283a 	ret

000219c8 <__sfp_lock_release>:
   219c8:	f800283a 	ret

000219cc <__sinit_lock_acquire>:
   219cc:	f800283a 	ret

000219d0 <__sinit_lock_release>:
   219d0:	f800283a 	ret

000219d4 <__fp_lock_all>:
   219d4:	008000f4 	movhi	r2,3
   219d8:	10be6f04 	addi	r2,r2,-1604
   219dc:	11000017 	ldw	r4,0(r2)
   219e0:	014000b4 	movhi	r5,2
   219e4:	2945c604 	addi	r5,r5,5912
   219e8:	00224a81 	jmpi	224a8 <_fwalk>

000219ec <__fp_unlock_all>:
   219ec:	008000f4 	movhi	r2,3
   219f0:	10be6f04 	addi	r2,r2,-1604
   219f4:	11000017 	ldw	r4,0(r2)
   219f8:	014000b4 	movhi	r5,2
   219fc:	2945c804 	addi	r5,r5,5920
   21a00:	00224a81 	jmpi	224a8 <_fwalk>

00021a04 <_fopen_r>:
   21a04:	defffa04 	addi	sp,sp,-24
   21a08:	dcc00415 	stw	r19,16(sp)
   21a0c:	2827883a 	mov	r19,r5
   21a10:	300b883a 	mov	r5,r6
   21a14:	d80d883a 	mov	r6,sp
   21a18:	dc800315 	stw	r18,12(sp)
   21a1c:	dc400215 	stw	r17,8(sp)
   21a20:	dfc00515 	stw	ra,20(sp)
   21a24:	dc000115 	stw	r16,4(sp)
   21a28:	2025883a 	mov	r18,r4
   21a2c:	00273900 	call	27390 <__sflags>
   21a30:	1023883a 	mov	r17,r2
   21a34:	10002926 	beq	r2,zero,21adc <_fopen_r+0xd8>
   21a38:	9009883a 	mov	r4,r18
   21a3c:	00218c80 	call	218c8 <__sfp>
   21a40:	1021883a 	mov	r16,r2
   21a44:	10002526 	beq	r2,zero,21adc <_fopen_r+0xd8>
   21a48:	d9800017 	ldw	r6,0(sp)
   21a4c:	9009883a 	mov	r4,r18
   21a50:	980b883a 	mov	r5,r19
   21a54:	01c06d84 	movi	r7,438
   21a58:	00232480 	call	23248 <_open_r>
   21a5c:	10001c16 	blt	r2,zero,21ad0 <_fopen_r+0xcc>
   21a60:	8080038d 	sth	r2,14(r16)
   21a64:	008000b4 	movhi	r2,2
   21a68:	108d6e04 	addi	r2,r2,13752
   21a6c:	80800815 	stw	r2,32(r16)
   21a70:	008000b4 	movhi	r2,2
   21a74:	108d8304 	addi	r2,r2,13836
   21a78:	80800915 	stw	r2,36(r16)
   21a7c:	008000b4 	movhi	r2,2
   21a80:	108da504 	addi	r2,r2,13972
   21a84:	88c0400c 	andi	r3,r17,256
   21a88:	80800a15 	stw	r2,40(r16)
   21a8c:	008000b4 	movhi	r2,2
   21a90:	108dbc04 	addi	r2,r2,14064
   21a94:	80800b15 	stw	r2,44(r16)
   21a98:	18bfffcc 	andi	r2,r3,65535
   21a9c:	10a0001c 	xori	r2,r2,32768
   21aa0:	8440030d 	sth	r17,12(r16)
   21aa4:	84000715 	stw	r16,28(r16)
   21aa8:	10a00004 	addi	r2,r2,-32768
   21aac:	1000141e 	bne	r2,zero,21b00 <_fopen_r+0xfc>
   21ab0:	8005883a 	mov	r2,r16
   21ab4:	dfc00517 	ldw	ra,20(sp)
   21ab8:	dcc00417 	ldw	r19,16(sp)
   21abc:	dc800317 	ldw	r18,12(sp)
   21ac0:	dc400217 	ldw	r17,8(sp)
   21ac4:	dc000117 	ldw	r16,4(sp)
   21ac8:	dec00604 	addi	sp,sp,24
   21acc:	f800283a 	ret
   21ad0:	00219c40 	call	219c4 <__sfp_lock_acquire>
   21ad4:	8000030d 	sth	zero,12(r16)
   21ad8:	00219c80 	call	219c8 <__sfp_lock_release>
   21adc:	0021883a 	mov	r16,zero
   21ae0:	8005883a 	mov	r2,r16
   21ae4:	dfc00517 	ldw	ra,20(sp)
   21ae8:	dcc00417 	ldw	r19,16(sp)
   21aec:	dc800317 	ldw	r18,12(sp)
   21af0:	dc400217 	ldw	r17,8(sp)
   21af4:	dc000117 	ldw	r16,4(sp)
   21af8:	dec00604 	addi	sp,sp,24
   21afc:	f800283a 	ret
   21b00:	9009883a 	mov	r4,r18
   21b04:	800b883a 	mov	r5,r16
   21b08:	000d883a 	mov	r6,zero
   21b0c:	01c00084 	movi	r7,2
   21b10:	0021fa80 	call	21fa8 <_fseek_r>
   21b14:	8005883a 	mov	r2,r16
   21b18:	dfc00517 	ldw	ra,20(sp)
   21b1c:	dcc00417 	ldw	r19,16(sp)
   21b20:	dc800317 	ldw	r18,12(sp)
   21b24:	dc400217 	ldw	r17,8(sp)
   21b28:	dc000117 	ldw	r16,4(sp)
   21b2c:	dec00604 	addi	sp,sp,24
   21b30:	f800283a 	ret

00021b34 <fopen>:
   21b34:	00c000f4 	movhi	r3,3
   21b38:	18fe6f04 	addi	r3,r3,-1604
   21b3c:	2005883a 	mov	r2,r4
   21b40:	19000017 	ldw	r4,0(r3)
   21b44:	280d883a 	mov	r6,r5
   21b48:	100b883a 	mov	r5,r2
   21b4c:	0021a041 	jmpi	21a04 <_fopen_r>

00021b50 <_fprintf_r>:
   21b50:	defffe04 	addi	sp,sp,-8
   21b54:	2809883a 	mov	r4,r5
   21b58:	dfc00015 	stw	ra,0(sp)
   21b5c:	d9c00115 	stw	r7,4(sp)
   21b60:	300b883a 	mov	r5,r6
   21b64:	d9800104 	addi	r6,sp,4
   21b68:	00258d00 	call	258d0 <__vfprintf_internal>
   21b6c:	dfc00017 	ldw	ra,0(sp)
   21b70:	dec00204 	addi	sp,sp,8
   21b74:	f800283a 	ret

00021b78 <fprintf>:
   21b78:	defffd04 	addi	sp,sp,-12
   21b7c:	dfc00015 	stw	ra,0(sp)
   21b80:	d9800115 	stw	r6,4(sp)
   21b84:	d9c00215 	stw	r7,8(sp)
   21b88:	d9800104 	addi	r6,sp,4
   21b8c:	00258d00 	call	258d0 <__vfprintf_internal>
   21b90:	dfc00017 	ldw	ra,0(sp)
   21b94:	dec00304 	addi	sp,sp,12
   21b98:	f800283a 	ret

00021b9c <_malloc_trim_r>:
   21b9c:	defffb04 	addi	sp,sp,-20
   21ba0:	dcc00315 	stw	r19,12(sp)
   21ba4:	dc800215 	stw	r18,8(sp)
   21ba8:	dc400115 	stw	r17,4(sp)
   21bac:	dc000015 	stw	r16,0(sp)
   21bb0:	2827883a 	mov	r19,r5
   21bb4:	dfc00415 	stw	ra,16(sp)
   21bb8:	044000f4 	movhi	r17,3
   21bbc:	8c7cea04 	addi	r17,r17,-3160
   21bc0:	2021883a 	mov	r16,r4
   21bc4:	002bba80 	call	2bba8 <__malloc_lock>
   21bc8:	88800217 	ldw	r2,8(r17)
   21bcc:	14800117 	ldw	r18,4(r2)
   21bd0:	00bfff04 	movi	r2,-4
   21bd4:	90a4703a 	and	r18,r18,r2
   21bd8:	9083fbc4 	addi	r2,r18,4079
   21bdc:	14e7c83a 	sub	r19,r2,r19
   21be0:	9826d33a 	srli	r19,r19,12
   21be4:	0083ffc4 	movi	r2,4095
   21be8:	9cffffc4 	addi	r19,r19,-1
   21bec:	9826933a 	slli	r19,r19,12
   21bf0:	14c0060e 	bge	r2,r19,21c0c <_malloc_trim_r+0x70>
   21bf4:	8009883a 	mov	r4,r16
   21bf8:	000b883a 	mov	r5,zero
   21bfc:	00235540 	call	23554 <_sbrk_r>
   21c00:	88c00217 	ldw	r3,8(r17)
   21c04:	1c87883a 	add	r3,r3,r18
   21c08:	10c00a26 	beq	r2,r3,21c34 <_malloc_trim_r+0x98>
   21c0c:	8009883a 	mov	r4,r16
   21c10:	002bbc80 	call	2bbc8 <__malloc_unlock>
   21c14:	0005883a 	mov	r2,zero
   21c18:	dfc00417 	ldw	ra,16(sp)
   21c1c:	dcc00317 	ldw	r19,12(sp)
   21c20:	dc800217 	ldw	r18,8(sp)
   21c24:	dc400117 	ldw	r17,4(sp)
   21c28:	dc000017 	ldw	r16,0(sp)
   21c2c:	dec00504 	addi	sp,sp,20
   21c30:	f800283a 	ret
   21c34:	8009883a 	mov	r4,r16
   21c38:	04cbc83a 	sub	r5,zero,r19
   21c3c:	00235540 	call	23554 <_sbrk_r>
   21c40:	00ffffc4 	movi	r3,-1
   21c44:	10c01326 	beq	r2,r3,21c94 <_malloc_trim_r+0xf8>
   21c48:	008000f4 	movhi	r2,3
   21c4c:	10814304 	addi	r2,r2,1292
   21c50:	11000017 	ldw	r4,0(r2)
   21c54:	88c00217 	ldw	r3,8(r17)
   21c58:	94e5c83a 	sub	r18,r18,r19
   21c5c:	94800054 	ori	r18,r18,1
   21c60:	24e7c83a 	sub	r19,r4,r19
   21c64:	1c800115 	stw	r18,4(r3)
   21c68:	8009883a 	mov	r4,r16
   21c6c:	14c00015 	stw	r19,0(r2)
   21c70:	002bbc80 	call	2bbc8 <__malloc_unlock>
   21c74:	00800044 	movi	r2,1
   21c78:	dfc00417 	ldw	ra,16(sp)
   21c7c:	dcc00317 	ldw	r19,12(sp)
   21c80:	dc800217 	ldw	r18,8(sp)
   21c84:	dc400117 	ldw	r17,4(sp)
   21c88:	dc000017 	ldw	r16,0(sp)
   21c8c:	dec00504 	addi	sp,sp,20
   21c90:	f800283a 	ret
   21c94:	8009883a 	mov	r4,r16
   21c98:	000b883a 	mov	r5,zero
   21c9c:	00235540 	call	23554 <_sbrk_r>
   21ca0:	88c00217 	ldw	r3,8(r17)
   21ca4:	014003c4 	movi	r5,15
   21ca8:	10c9c83a 	sub	r4,r2,r3
   21cac:	293fd70e 	bge	r5,r4,21c0c <_malloc_trim_r+0x70>
   21cb0:	014000f4 	movhi	r5,3
   21cb4:	297e7004 	addi	r5,r5,-1600
   21cb8:	29400017 	ldw	r5,0(r5)
   21cbc:	21000054 	ori	r4,r4,1
   21cc0:	19000115 	stw	r4,4(r3)
   21cc4:	1145c83a 	sub	r2,r2,r5
   21cc8:	014000f4 	movhi	r5,3
   21ccc:	29414304 	addi	r5,r5,1292
   21cd0:	28800015 	stw	r2,0(r5)
   21cd4:	003fcd06 	br	21c0c <_malloc_trim_r+0x70>

00021cd8 <_free_r>:
   21cd8:	defffd04 	addi	sp,sp,-12
   21cdc:	dc400115 	stw	r17,4(sp)
   21ce0:	dc000015 	stw	r16,0(sp)
   21ce4:	dfc00215 	stw	ra,8(sp)
   21ce8:	2821883a 	mov	r16,r5
   21cec:	2023883a 	mov	r17,r4
   21cf0:	28004b26 	beq	r5,zero,21e20 <_free_r+0x148>
   21cf4:	002bba80 	call	2bba8 <__malloc_lock>
   21cf8:	823fff17 	ldw	r8,-4(r16)
   21cfc:	00bfff84 	movi	r2,-2
   21d00:	81bffe04 	addi	r6,r16,-8
   21d04:	4084703a 	and	r2,r8,r2
   21d08:	3087883a 	add	r3,r6,r2
   21d0c:	014000f4 	movhi	r5,3
   21d10:	297cea04 	addi	r5,r5,-3160
   21d14:	1a400117 	ldw	r9,4(r3)
   21d18:	29000217 	ldw	r4,8(r5)
   21d1c:	01ffff04 	movi	r7,-4
   21d20:	49ce703a 	and	r7,r9,r7
   21d24:	20c06526 	beq	r4,r3,21ebc <_free_r+0x1e4>
   21d28:	19c00115 	stw	r7,4(r3)
   21d2c:	4200004c 	andi	r8,r8,1
   21d30:	40003026 	beq	r8,zero,21df4 <_free_r+0x11c>
   21d34:	0009883a 	mov	r4,zero
   21d38:	19d1883a 	add	r8,r3,r7
   21d3c:	42000117 	ldw	r8,4(r8)
   21d40:	4200004c 	andi	r8,r8,1
   21d44:	4000061e 	bne	r8,zero,21d60 <_free_r+0x88>
   21d48:	11c5883a 	add	r2,r2,r7
   21d4c:	19c00217 	ldw	r7,8(r3)
   21d50:	20004e26 	beq	r4,zero,21e8c <_free_r+0x1b4>
   21d54:	18c00317 	ldw	r3,12(r3)
   21d58:	38c00315 	stw	r3,12(r7)
   21d5c:	19c00215 	stw	r7,8(r3)
   21d60:	11c00054 	ori	r7,r2,1
   21d64:	3087883a 	add	r3,r6,r2
   21d68:	31c00115 	stw	r7,4(r6)
   21d6c:	18800015 	stw	r2,0(r3)
   21d70:	20001a1e 	bne	r4,zero,21ddc <_free_r+0x104>
   21d74:	00c07fc4 	movi	r3,511
   21d78:	18802e2e 	bgeu	r3,r2,21e34 <_free_r+0x15c>
   21d7c:	1006d27a 	srli	r3,r2,9
   21d80:	01000104 	movi	r4,4
   21d84:	20c06636 	bltu	r4,r3,21f20 <_free_r+0x248>
   21d88:	1008d1ba 	srli	r4,r2,6
   21d8c:	21000e04 	addi	r4,r4,56
   21d90:	210f883a 	add	r7,r4,r4
   21d94:	39cf883a 	add	r7,r7,r7
   21d98:	39cf883a 	add	r7,r7,r7
   21d9c:	29cf883a 	add	r7,r5,r7
   21da0:	38c00217 	ldw	r3,8(r7)
   21da4:	014000f4 	movhi	r5,3
   21da8:	297cea04 	addi	r5,r5,-3160
   21dac:	19c06126 	beq	r3,r7,21f34 <_free_r+0x25c>
   21db0:	013fff04 	movi	r4,-4
   21db4:	19400117 	ldw	r5,4(r3)
   21db8:	290a703a 	and	r5,r5,r4
   21dbc:	1140022e 	bgeu	r2,r5,21dc8 <_free_r+0xf0>
   21dc0:	18c00217 	ldw	r3,8(r3)
   21dc4:	38fffb1e 	bne	r7,r3,21db4 <_free_r+0xdc>
   21dc8:	18800317 	ldw	r2,12(r3)
   21dcc:	30800315 	stw	r2,12(r6)
   21dd0:	30c00215 	stw	r3,8(r6)
   21dd4:	11800215 	stw	r6,8(r2)
   21dd8:	19800315 	stw	r6,12(r3)
   21ddc:	8809883a 	mov	r4,r17
   21de0:	dfc00217 	ldw	ra,8(sp)
   21de4:	dc400117 	ldw	r17,4(sp)
   21de8:	dc000017 	ldw	r16,0(sp)
   21dec:	dec00304 	addi	sp,sp,12
   21df0:	002bbc81 	jmpi	2bbc8 <__malloc_unlock>
   21df4:	813ffe17 	ldw	r4,-8(r16)
   21df8:	2a400204 	addi	r9,r5,8
   21dfc:	310dc83a 	sub	r6,r6,r4
   21e00:	32000217 	ldw	r8,8(r6)
   21e04:	1105883a 	add	r2,r2,r4
   21e08:	42404326 	beq	r8,r9,21f18 <_free_r+0x240>
   21e0c:	32400317 	ldw	r9,12(r6)
   21e10:	0009883a 	mov	r4,zero
   21e14:	42400315 	stw	r9,12(r8)
   21e18:	4a000215 	stw	r8,8(r9)
   21e1c:	003fc606 	br	21d38 <_free_r+0x60>
   21e20:	dfc00217 	ldw	ra,8(sp)
   21e24:	dc400117 	ldw	r17,4(sp)
   21e28:	dc000017 	ldw	r16,0(sp)
   21e2c:	dec00304 	addi	sp,sp,12
   21e30:	f800283a 	ret
   21e34:	1004d0fa 	srli	r2,r2,3
   21e38:	02000044 	movi	r8,1
   21e3c:	29c00117 	ldw	r7,4(r5)
   21e40:	1087883a 	add	r3,r2,r2
   21e44:	18c7883a 	add	r3,r3,r3
   21e48:	1005d0ba 	srai	r2,r2,2
   21e4c:	18c7883a 	add	r3,r3,r3
   21e50:	28c7883a 	add	r3,r5,r3
   21e54:	19000217 	ldw	r4,8(r3)
   21e58:	4084983a 	sll	r2,r8,r2
   21e5c:	30c00315 	stw	r3,12(r6)
   21e60:	31000215 	stw	r4,8(r6)
   21e64:	11c4b03a 	or	r2,r2,r7
   21e68:	21800315 	stw	r6,12(r4)
   21e6c:	8809883a 	mov	r4,r17
   21e70:	28800115 	stw	r2,4(r5)
   21e74:	19800215 	stw	r6,8(r3)
   21e78:	dfc00217 	ldw	ra,8(sp)
   21e7c:	dc400117 	ldw	r17,4(sp)
   21e80:	dc000017 	ldw	r16,0(sp)
   21e84:	dec00304 	addi	sp,sp,12
   21e88:	002bbc81 	jmpi	2bbc8 <__malloc_unlock>
   21e8c:	020000f4 	movhi	r8,3
   21e90:	423cec04 	addi	r8,r8,-3152
   21e94:	3a3faf1e 	bne	r7,r8,21d54 <_free_r+0x7c>
   21e98:	29800515 	stw	r6,20(r5)
   21e9c:	29800415 	stw	r6,16(r5)
   21ea0:	11000054 	ori	r4,r2,1
   21ea4:	3087883a 	add	r3,r6,r2
   21ea8:	31c00315 	stw	r7,12(r6)
   21eac:	31c00215 	stw	r7,8(r6)
   21eb0:	31000115 	stw	r4,4(r6)
   21eb4:	18800015 	stw	r2,0(r3)
   21eb8:	003fc806 	br	21ddc <_free_r+0x104>
   21ebc:	4200004c 	andi	r8,r8,1
   21ec0:	3885883a 	add	r2,r7,r2
   21ec4:	4000071e 	bne	r8,zero,21ee4 <_free_r+0x20c>
   21ec8:	81fffe17 	ldw	r7,-8(r16)
   21ecc:	31cdc83a 	sub	r6,r6,r7
   21ed0:	30c00317 	ldw	r3,12(r6)
   21ed4:	31000217 	ldw	r4,8(r6)
   21ed8:	11c5883a 	add	r2,r2,r7
   21edc:	20c00315 	stw	r3,12(r4)
   21ee0:	19000215 	stw	r4,8(r3)
   21ee4:	00c000f4 	movhi	r3,3
   21ee8:	18fe7104 	addi	r3,r3,-1596
   21eec:	18c00017 	ldw	r3,0(r3)
   21ef0:	11000054 	ori	r4,r2,1
   21ef4:	31000115 	stw	r4,4(r6)
   21ef8:	29800215 	stw	r6,8(r5)
   21efc:	10ffb736 	bltu	r2,r3,21ddc <_free_r+0x104>
   21f00:	008000f4 	movhi	r2,3
   21f04:	10813904 	addi	r2,r2,1252
   21f08:	11400017 	ldw	r5,0(r2)
   21f0c:	8809883a 	mov	r4,r17
   21f10:	0021b9c0 	call	21b9c <_malloc_trim_r>
   21f14:	003fb106 	br	21ddc <_free_r+0x104>
   21f18:	01000044 	movi	r4,1
   21f1c:	003f8606 	br	21d38 <_free_r+0x60>
   21f20:	01000504 	movi	r4,20
   21f24:	20c00b36 	bltu	r4,r3,21f54 <_free_r+0x27c>
   21f28:	190016c4 	addi	r4,r3,91
   21f2c:	210f883a 	add	r7,r4,r4
   21f30:	003f9806 	br	21d94 <_free_r+0xbc>
   21f34:	2009d0ba 	srai	r4,r4,2
   21f38:	00800044 	movi	r2,1
   21f3c:	29c00117 	ldw	r7,4(r5)
   21f40:	1108983a 	sll	r4,r2,r4
   21f44:	1805883a 	mov	r2,r3
   21f48:	21c8b03a 	or	r4,r4,r7
   21f4c:	29000115 	stw	r4,4(r5)
   21f50:	003f9e06 	br	21dcc <_free_r+0xf4>
   21f54:	01001504 	movi	r4,84
   21f58:	20c00436 	bltu	r4,r3,21f6c <_free_r+0x294>
   21f5c:	1008d33a 	srli	r4,r2,12
   21f60:	21001b84 	addi	r4,r4,110
   21f64:	210f883a 	add	r7,r4,r4
   21f68:	003f8a06 	br	21d94 <_free_r+0xbc>
   21f6c:	01005504 	movi	r4,340
   21f70:	20c00436 	bltu	r4,r3,21f84 <_free_r+0x2ac>
   21f74:	1008d3fa 	srli	r4,r2,15
   21f78:	21001dc4 	addi	r4,r4,119
   21f7c:	210f883a 	add	r7,r4,r4
   21f80:	003f8406 	br	21d94 <_free_r+0xbc>
   21f84:	01015504 	movi	r4,1364
   21f88:	20c00436 	bltu	r4,r3,21f9c <_free_r+0x2c4>
   21f8c:	1008d4ba 	srli	r4,r2,18
   21f90:	21001f04 	addi	r4,r4,124
   21f94:	210f883a 	add	r7,r4,r4
   21f98:	003f7e06 	br	21d94 <_free_r+0xbc>
   21f9c:	01c03f04 	movi	r7,252
   21fa0:	01001f84 	movi	r4,126
   21fa4:	003f7b06 	br	21d94 <_free_r+0xbc>

00021fa8 <_fseek_r>:
   21fa8:	deffe804 	addi	sp,sp,-96
   21fac:	dd001315 	stw	r20,76(sp)
   21fb0:	dc801115 	stw	r18,68(sp)
   21fb4:	dc401015 	stw	r17,64(sp)
   21fb8:	dc000f15 	stw	r16,60(sp)
   21fbc:	dfc01715 	stw	ra,92(sp)
   21fc0:	ddc01615 	stw	r23,88(sp)
   21fc4:	dd801515 	stw	r22,84(sp)
   21fc8:	dd401415 	stw	r21,80(sp)
   21fcc:	dcc01215 	stw	r19,72(sp)
   21fd0:	2023883a 	mov	r17,r4
   21fd4:	2821883a 	mov	r16,r5
   21fd8:	3029883a 	mov	r20,r6
   21fdc:	3825883a 	mov	r18,r7
   21fe0:	20000226 	beq	r4,zero,21fec <_fseek_r+0x44>
   21fe4:	20800e17 	ldw	r2,56(r4)
   21fe8:	10006226 	beq	r2,zero,22174 <_fseek_r+0x1cc>
   21fec:	80c0030b 	ldhu	r3,12(r16)
   21ff0:	00804204 	movi	r2,264
   21ff4:	18c0420c 	andi	r3,r3,264
   21ff8:	18806326 	beq	r3,r2,22188 <_fseek_r+0x1e0>
   21ffc:	84c00a17 	ldw	r19,40(r16)
   22000:	98010226 	beq	r19,zero,2240c <_fseek_r+0x464>
   22004:	00800044 	movi	r2,1
   22008:	90803d26 	beq	r18,r2,22100 <_fseek_r+0x158>
   2200c:	00800084 	movi	r2,2
   22010:	90800126 	beq	r18,r2,22018 <_fseek_r+0x70>
   22014:	90002c1e 	bne	r18,zero,220c8 <_fseek_r+0x120>
   22018:	80800417 	ldw	r2,16(r16)
   2201c:	002d883a 	mov	r22,zero
   22020:	002b883a 	mov	r21,zero
   22024:	1000e526 	beq	r2,zero,223bc <_fseek_r+0x414>
   22028:	80c0030b 	ldhu	r3,12(r16)
   2202c:	1882068c 	andi	r2,r3,2074
   22030:	1809883a 	mov	r4,r3
   22034:	10000a1e 	bne	r2,zero,22060 <_fseek_r+0xb8>
   22038:	1881000c 	andi	r2,r3,1024
   2203c:	10bfffcc 	andi	r2,r2,65535
   22040:	10a0001c 	xori	r2,r2,32768
   22044:	10a00004 	addi	r2,r2,-32768
   22048:	1000631e 	bne	r2,zero,221d8 <_fseek_r+0x230>
   2204c:	008000b4 	movhi	r2,2
   22050:	108da504 	addi	r2,r2,13972
   22054:	98805026 	beq	r19,r2,22198 <_fseek_r+0x1f0>
   22058:	18c20014 	ori	r3,r3,2048
   2205c:	80c0030d 	sth	r3,12(r16)
   22060:	8809883a 	mov	r4,r17
   22064:	800b883a 	mov	r5,r16
   22068:	00213a00 	call	213a0 <_fflush_r>
   2206c:	1000181e 	bne	r2,zero,220d0 <_fseek_r+0x128>
   22070:	81400717 	ldw	r5,28(r16)
   22074:	8809883a 	mov	r4,r17
   22078:	a00d883a 	mov	r6,r20
   2207c:	900f883a 	mov	r7,r18
   22080:	983ee83a 	callr	r19
   22084:	00ffffc4 	movi	r3,-1
   22088:	10c01126 	beq	r2,r3,220d0 <_fseek_r+0x128>
   2208c:	81400c17 	ldw	r5,48(r16)
   22090:	28000526 	beq	r5,zero,220a8 <_fseek_r+0x100>
   22094:	80801004 	addi	r2,r16,64
   22098:	28800226 	beq	r5,r2,220a4 <_fseek_r+0xfc>
   2209c:	8809883a 	mov	r4,r17
   220a0:	0021cd80 	call	21cd8 <_free_r>
   220a4:	80000c15 	stw	zero,48(r16)
   220a8:	8080030b 	ldhu	r2,12(r16)
   220ac:	80c00417 	ldw	r3,16(r16)
   220b0:	80000115 	stw	zero,4(r16)
   220b4:	10bdf7cc 	andi	r2,r2,63455
   220b8:	8080030d 	sth	r2,12(r16)
   220bc:	80c00015 	stw	r3,0(r16)
   220c0:	0005883a 	mov	r2,zero
   220c4:	00000306 	br	220d4 <_fseek_r+0x12c>
   220c8:	00800584 	movi	r2,22
   220cc:	88800015 	stw	r2,0(r17)
   220d0:	00bfffc4 	movi	r2,-1
   220d4:	dfc01717 	ldw	ra,92(sp)
   220d8:	ddc01617 	ldw	r23,88(sp)
   220dc:	dd801517 	ldw	r22,84(sp)
   220e0:	dd401417 	ldw	r21,80(sp)
   220e4:	dd001317 	ldw	r20,76(sp)
   220e8:	dcc01217 	ldw	r19,72(sp)
   220ec:	dc801117 	ldw	r18,68(sp)
   220f0:	dc401017 	ldw	r17,64(sp)
   220f4:	dc000f17 	ldw	r16,60(sp)
   220f8:	dec01804 	addi	sp,sp,96
   220fc:	f800283a 	ret
   22100:	8809883a 	mov	r4,r17
   22104:	800b883a 	mov	r5,r16
   22108:	00213a00 	call	213a0 <_fflush_r>
   2210c:	8080030b 	ldhu	r2,12(r16)
   22110:	10c4000c 	andi	r3,r2,4096
   22114:	18ffffcc 	andi	r3,r3,65535
   22118:	18e0001c 	xori	r3,r3,32768
   2211c:	18e00004 	addi	r3,r3,-32768
   22120:	18007d26 	beq	r3,zero,22318 <_fseek_r+0x370>
   22124:	85401417 	ldw	r21,80(r16)
   22128:	10c0010c 	andi	r3,r2,4
   2212c:	18ffffcc 	andi	r3,r3,65535
   22130:	18e0001c 	xori	r3,r3,32768
   22134:	18e00004 	addi	r3,r3,-32768
   22138:	18005f1e 	bne	r3,zero,222b8 <_fseek_r+0x310>
   2213c:	1080020c 	andi	r2,r2,8
   22140:	10bfffcc 	andi	r2,r2,65535
   22144:	10a0001c 	xori	r2,r2,32768
   22148:	10a00004 	addi	r2,r2,-32768
   2214c:	10007026 	beq	r2,zero,22310 <_fseek_r+0x368>
   22150:	80c00017 	ldw	r3,0(r16)
   22154:	80800417 	ldw	r2,16(r16)
   22158:	18000226 	beq	r3,zero,22164 <_fseek_r+0x1bc>
   2215c:	1887c83a 	sub	r3,r3,r2
   22160:	a8eb883a 	add	r21,r21,r3
   22164:	a569883a 	add	r20,r20,r21
   22168:	05800044 	movi	r22,1
   2216c:	0025883a 	mov	r18,zero
   22170:	003fac06 	br	22024 <_fseek_r+0x7c>
   22174:	00217bc0 	call	217bc <__sinit>
   22178:	80c0030b 	ldhu	r3,12(r16)
   2217c:	00804204 	movi	r2,264
   22180:	18c0420c 	andi	r3,r3,264
   22184:	18bf9d1e 	bne	r3,r2,21ffc <_fseek_r+0x54>
   22188:	8809883a 	mov	r4,r17
   2218c:	800b883a 	mov	r5,r16
   22190:	00213a00 	call	213a0 <_fflush_r>
   22194:	003f9906 	br	21ffc <_fseek_r+0x54>
   22198:	8140038f 	ldh	r5,14(r16)
   2219c:	283fae16 	blt	r5,zero,22058 <_fseek_r+0xb0>
   221a0:	8809883a 	mov	r4,r17
   221a4:	d80d883a 	mov	r6,sp
   221a8:	00224400 	call	22440 <_fstat_r>
   221ac:	1000741e 	bne	r2,zero,22380 <_fseek_r+0x3d8>
   221b0:	d8c00117 	ldw	r3,4(sp)
   221b4:	00a00014 	movui	r2,32768
   221b8:	18fc000c 	andi	r3,r3,61440
   221bc:	1880701e 	bne	r3,r2,22380 <_fseek_r+0x3d8>
   221c0:	8100030b 	ldhu	r4,12(r16)
   221c4:	00810004 	movi	r2,1024
   221c8:	80801315 	stw	r2,76(r16)
   221cc:	2084b03a 	or	r2,r4,r2
   221d0:	1009883a 	mov	r4,r2
   221d4:	8080030d 	sth	r2,12(r16)
   221d8:	90003f1e 	bne	r18,zero,222d8 <_fseek_r+0x330>
   221dc:	a02f883a 	mov	r23,r20
   221e0:	b000461e 	bne	r22,zero,222fc <_fseek_r+0x354>
   221e4:	2084000c 	andi	r2,r4,4096
   221e8:	10bfffcc 	andi	r2,r2,65535
   221ec:	10a0001c 	xori	r2,r2,32768
   221f0:	10a00004 	addi	r2,r2,-32768
   221f4:	10007526 	beq	r2,zero,223cc <_fseek_r+0x424>
   221f8:	80801417 	ldw	r2,80(r16)
   221fc:	80c00117 	ldw	r3,4(r16)
   22200:	81400c17 	ldw	r5,48(r16)
   22204:	10ebc83a 	sub	r21,r2,r3
   22208:	28007926 	beq	r5,zero,223f0 <_fseek_r+0x448>
   2220c:	81c00f17 	ldw	r7,60(r16)
   22210:	a9ebc83a 	sub	r21,r21,r7
   22214:	80800e17 	ldw	r2,56(r16)
   22218:	81800417 	ldw	r6,16(r16)
   2221c:	a8eb883a 	add	r21,r21,r3
   22220:	1185c83a 	sub	r2,r2,r6
   22224:	a8abc83a 	sub	r21,r21,r2
   22228:	3885883a 	add	r2,r7,r2
   2222c:	2208000c 	andi	r8,r4,8192
   22230:	423fffcc 	andi	r8,r8,65535
   22234:	4220001c 	xori	r8,r8,32768
   22238:	42200004 	addi	r8,r8,-32768
   2223c:	4000031e 	bne	r8,zero,2224c <_fseek_r+0x2a4>
   22240:	bd400216 	blt	r23,r21,2224c <_fseek_r+0x2a4>
   22244:	a887883a 	add	r3,r21,r2
   22248:	b8c03d36 	bltu	r23,r3,22340 <_fseek_r+0x398>
   2224c:	85401317 	ldw	r21,76(r16)
   22250:	81400717 	ldw	r5,28(r16)
   22254:	8809883a 	mov	r4,r17
   22258:	056bc83a 	sub	r21,zero,r21
   2225c:	bd6a703a 	and	r21,r23,r21
   22260:	a80d883a 	mov	r6,r21
   22264:	000f883a 	mov	r7,zero
   22268:	983ee83a 	callr	r19
   2226c:	00ffffc4 	movi	r3,-1
   22270:	10ff7b26 	beq	r2,r3,22060 <_fseek_r+0xb8>
   22274:	80800417 	ldw	r2,16(r16)
   22278:	81400c17 	ldw	r5,48(r16)
   2227c:	80000115 	stw	zero,4(r16)
   22280:	80800015 	stw	r2,0(r16)
   22284:	28000526 	beq	r5,zero,2229c <_fseek_r+0x2f4>
   22288:	80801004 	addi	r2,r16,64
   2228c:	28800226 	beq	r5,r2,22298 <_fseek_r+0x2f0>
   22290:	8809883a 	mov	r4,r17
   22294:	0021cd80 	call	21cd8 <_free_r>
   22298:	80000c15 	stw	zero,48(r16)
   2229c:	8080030b 	ldhu	r2,12(r16)
   222a0:	bd6fc83a 	sub	r23,r23,r21
   222a4:	10bff7cc 	andi	r2,r2,65503
   222a8:	8080030d 	sth	r2,12(r16)
   222ac:	b800361e 	bne	r23,zero,22388 <_fseek_r+0x3e0>
   222b0:	0005883a 	mov	r2,zero
   222b4:	003f8706 	br	220d4 <_fseek_r+0x12c>
   222b8:	80c00117 	ldw	r3,4(r16)
   222bc:	80800c17 	ldw	r2,48(r16)
   222c0:	a8ebc83a 	sub	r21,r21,r3
   222c4:	10001226 	beq	r2,zero,22310 <_fseek_r+0x368>
   222c8:	80c00f17 	ldw	r3,60(r16)
   222cc:	80800417 	ldw	r2,16(r16)
   222d0:	a8ebc83a 	sub	r21,r21,r3
   222d4:	003fa306 	br	22164 <_fseek_r+0x1bc>
   222d8:	8140038f 	ldh	r5,14(r16)
   222dc:	8809883a 	mov	r4,r17
   222e0:	d80d883a 	mov	r6,sp
   222e4:	00224400 	call	22440 <_fstat_r>
   222e8:	103f5d1e 	bne	r2,zero,22060 <_fseek_r+0xb8>
   222ec:	ddc00417 	ldw	r23,16(sp)
   222f0:	8100030b 	ldhu	r4,12(r16)
   222f4:	a5ef883a 	add	r23,r20,r23
   222f8:	b03fba26 	beq	r22,zero,221e4 <_fseek_r+0x23c>
   222fc:	81400c17 	ldw	r5,48(r16)
   22300:	80c00117 	ldw	r3,4(r16)
   22304:	28003a26 	beq	r5,zero,223f0 <_fseek_r+0x448>
   22308:	81c00f17 	ldw	r7,60(r16)
   2230c:	003fc106 	br	22214 <_fseek_r+0x26c>
   22310:	80800417 	ldw	r2,16(r16)
   22314:	003f9306 	br	22164 <_fseek_r+0x1bc>
   22318:	81400717 	ldw	r5,28(r16)
   2231c:	8809883a 	mov	r4,r17
   22320:	000d883a 	mov	r6,zero
   22324:	900f883a 	mov	r7,r18
   22328:	983ee83a 	callr	r19
   2232c:	102b883a 	mov	r21,r2
   22330:	00bfffc4 	movi	r2,-1
   22334:	a8bf6626 	beq	r21,r2,220d0 <_fseek_r+0x128>
   22338:	8080030b 	ldhu	r2,12(r16)
   2233c:	003f7a06 	br	22128 <_fseek_r+0x180>
   22340:	bd6bc83a 	sub	r21,r23,r21
   22344:	354d883a 	add	r6,r6,r21
   22348:	1545c83a 	sub	r2,r2,r21
   2234c:	81800015 	stw	r6,0(r16)
   22350:	80800115 	stw	r2,4(r16)
   22354:	28000626 	beq	r5,zero,22370 <_fseek_r+0x3c8>
   22358:	80801004 	addi	r2,r16,64
   2235c:	28800326 	beq	r5,r2,2236c <_fseek_r+0x3c4>
   22360:	8809883a 	mov	r4,r17
   22364:	0021cd80 	call	21cd8 <_free_r>
   22368:	8100030b 	ldhu	r4,12(r16)
   2236c:	80000c15 	stw	zero,48(r16)
   22370:	213ff7cc 	andi	r4,r4,65503
   22374:	8100030d 	sth	r4,12(r16)
   22378:	0005883a 	mov	r2,zero
   2237c:	003f5506 	br	220d4 <_fseek_r+0x12c>
   22380:	80c0030b 	ldhu	r3,12(r16)
   22384:	003f3406 	br	22058 <_fseek_r+0xb0>
   22388:	8809883a 	mov	r4,r17
   2238c:	800b883a 	mov	r5,r16
   22390:	00233680 	call	23368 <__srefill_r>
   22394:	103f321e 	bne	r2,zero,22060 <_fseek_r+0xb8>
   22398:	80800117 	ldw	r2,4(r16)
   2239c:	15ff3036 	bltu	r2,r23,22060 <_fseek_r+0xb8>
   223a0:	80c00017 	ldw	r3,0(r16)
   223a4:	15c5c83a 	sub	r2,r2,r23
   223a8:	80800115 	stw	r2,4(r16)
   223ac:	1def883a 	add	r23,r3,r23
   223b0:	85c00015 	stw	r23,0(r16)
   223b4:	0005883a 	mov	r2,zero
   223b8:	003f4606 	br	220d4 <_fseek_r+0x12c>
   223bc:	8809883a 	mov	r4,r17
   223c0:	800b883a 	mov	r5,r16
   223c4:	00226080 	call	22608 <__smakebuf_r>
   223c8:	003f1706 	br	22028 <_fseek_r+0x80>
   223cc:	81400717 	ldw	r5,28(r16)
   223d0:	8809883a 	mov	r4,r17
   223d4:	000d883a 	mov	r6,zero
   223d8:	01c00044 	movi	r7,1
   223dc:	983ee83a 	callr	r19
   223e0:	00ffffc4 	movi	r3,-1
   223e4:	10ff1e26 	beq	r2,r3,22060 <_fseek_r+0xb8>
   223e8:	8100030b 	ldhu	r4,12(r16)
   223ec:	003f8306 	br	221fc <_fseek_r+0x254>
   223f0:	80800017 	ldw	r2,0(r16)
   223f4:	81800417 	ldw	r6,16(r16)
   223f8:	000b883a 	mov	r5,zero
   223fc:	1185c83a 	sub	r2,r2,r6
   22400:	a8abc83a 	sub	r21,r21,r2
   22404:	1885883a 	add	r2,r3,r2
   22408:	003f8806 	br	2222c <_fseek_r+0x284>
   2240c:	00800744 	movi	r2,29
   22410:	88800015 	stw	r2,0(r17)
   22414:	00bfffc4 	movi	r2,-1
   22418:	003f2e06 	br	220d4 <_fseek_r+0x12c>

0002241c <fseek>:
   2241c:	008000f4 	movhi	r2,3
   22420:	10be6f04 	addi	r2,r2,-1604
   22424:	2007883a 	mov	r3,r4
   22428:	11000017 	ldw	r4,0(r2)
   2242c:	2805883a 	mov	r2,r5
   22430:	300f883a 	mov	r7,r6
   22434:	180b883a 	mov	r5,r3
   22438:	100d883a 	mov	r6,r2
   2243c:	0021fa81 	jmpi	21fa8 <_fseek_r>

00022440 <_fstat_r>:
   22440:	defffd04 	addi	sp,sp,-12
   22444:	dc400115 	stw	r17,4(sp)
   22448:	dc000015 	stw	r16,0(sp)
   2244c:	2023883a 	mov	r17,r4
   22450:	040000f4 	movhi	r16,3
   22454:	84013604 	addi	r16,r16,1240
   22458:	2809883a 	mov	r4,r5
   2245c:	300b883a 	mov	r5,r6
   22460:	dfc00215 	stw	ra,8(sp)
   22464:	80000015 	stw	zero,0(r16)
   22468:	002b78c0 	call	2b78c <fstat>
   2246c:	00ffffc4 	movi	r3,-1
   22470:	10c00526 	beq	r2,r3,22488 <_fstat_r+0x48>
   22474:	dfc00217 	ldw	ra,8(sp)
   22478:	dc400117 	ldw	r17,4(sp)
   2247c:	dc000017 	ldw	r16,0(sp)
   22480:	dec00304 	addi	sp,sp,12
   22484:	f800283a 	ret
   22488:	80c00017 	ldw	r3,0(r16)
   2248c:	183ff926 	beq	r3,zero,22474 <_fstat_r+0x34>
   22490:	88c00015 	stw	r3,0(r17)
   22494:	dfc00217 	ldw	ra,8(sp)
   22498:	dc400117 	ldw	r17,4(sp)
   2249c:	dc000017 	ldw	r16,0(sp)
   224a0:	dec00304 	addi	sp,sp,12
   224a4:	f800283a 	ret

000224a8 <_fwalk>:
   224a8:	defff904 	addi	sp,sp,-28
   224ac:	dcc00315 	stw	r19,12(sp)
   224b0:	24c0b804 	addi	r19,r4,736
   224b4:	dd400515 	stw	r21,20(sp)
   224b8:	dd000415 	stw	r20,16(sp)
   224bc:	dfc00615 	stw	ra,24(sp)
   224c0:	dc800215 	stw	r18,8(sp)
   224c4:	dc400115 	stw	r17,4(sp)
   224c8:	dc000015 	stw	r16,0(sp)
   224cc:	282b883a 	mov	r21,r5
   224d0:	0029883a 	mov	r20,zero
   224d4:	00219c40 	call	219c4 <__sfp_lock_acquire>
   224d8:	98001226 	beq	r19,zero,22524 <_fwalk+0x7c>
   224dc:	04bfffc4 	movi	r18,-1
   224e0:	9c400117 	ldw	r17,4(r19)
   224e4:	9c000217 	ldw	r16,8(r19)
   224e8:	8c7fffc4 	addi	r17,r17,-1
   224ec:	88000b16 	blt	r17,zero,2251c <_fwalk+0x74>
   224f0:	84000304 	addi	r16,r16,12
   224f4:	80c0000f 	ldh	r3,0(r16)
   224f8:	8c7fffc4 	addi	r17,r17,-1
   224fc:	813ffd04 	addi	r4,r16,-12
   22500:	18000426 	beq	r3,zero,22514 <_fwalk+0x6c>
   22504:	80c0008f 	ldh	r3,2(r16)
   22508:	1c800226 	beq	r3,r18,22514 <_fwalk+0x6c>
   2250c:	a83ee83a 	callr	r21
   22510:	a0a8b03a 	or	r20,r20,r2
   22514:	84001704 	addi	r16,r16,92
   22518:	8cbff61e 	bne	r17,r18,224f4 <_fwalk+0x4c>
   2251c:	9cc00017 	ldw	r19,0(r19)
   22520:	983fef1e 	bne	r19,zero,224e0 <_fwalk+0x38>
   22524:	00219c80 	call	219c8 <__sfp_lock_release>
   22528:	a005883a 	mov	r2,r20
   2252c:	dfc00617 	ldw	ra,24(sp)
   22530:	dd400517 	ldw	r21,20(sp)
   22534:	dd000417 	ldw	r20,16(sp)
   22538:	dcc00317 	ldw	r19,12(sp)
   2253c:	dc800217 	ldw	r18,8(sp)
   22540:	dc400117 	ldw	r17,4(sp)
   22544:	dc000017 	ldw	r16,0(sp)
   22548:	dec00704 	addi	sp,sp,28
   2254c:	f800283a 	ret

00022550 <_fwalk_reent>:
   22550:	defff804 	addi	sp,sp,-32
   22554:	dcc00315 	stw	r19,12(sp)
   22558:	24c0b804 	addi	r19,r4,736
   2255c:	dd800615 	stw	r22,24(sp)
   22560:	dd400515 	stw	r21,20(sp)
   22564:	dd000415 	stw	r20,16(sp)
   22568:	dfc00715 	stw	ra,28(sp)
   2256c:	dc800215 	stw	r18,8(sp)
   22570:	dc400115 	stw	r17,4(sp)
   22574:	dc000015 	stw	r16,0(sp)
   22578:	2029883a 	mov	r20,r4
   2257c:	282b883a 	mov	r21,r5
   22580:	002d883a 	mov	r22,zero
   22584:	00219c40 	call	219c4 <__sfp_lock_acquire>
   22588:	98001326 	beq	r19,zero,225d8 <_fwalk_reent+0x88>
   2258c:	04bfffc4 	movi	r18,-1
   22590:	9c400117 	ldw	r17,4(r19)
   22594:	9c000217 	ldw	r16,8(r19)
   22598:	8c7fffc4 	addi	r17,r17,-1
   2259c:	88000c16 	blt	r17,zero,225d0 <_fwalk_reent+0x80>
   225a0:	84000304 	addi	r16,r16,12
   225a4:	80c0000f 	ldh	r3,0(r16)
   225a8:	8c7fffc4 	addi	r17,r17,-1
   225ac:	817ffd04 	addi	r5,r16,-12
   225b0:	18000526 	beq	r3,zero,225c8 <_fwalk_reent+0x78>
   225b4:	80c0008f 	ldh	r3,2(r16)
   225b8:	a009883a 	mov	r4,r20
   225bc:	1c800226 	beq	r3,r18,225c8 <_fwalk_reent+0x78>
   225c0:	a83ee83a 	callr	r21
   225c4:	b0acb03a 	or	r22,r22,r2
   225c8:	84001704 	addi	r16,r16,92
   225cc:	8cbff51e 	bne	r17,r18,225a4 <_fwalk_reent+0x54>
   225d0:	9cc00017 	ldw	r19,0(r19)
   225d4:	983fee1e 	bne	r19,zero,22590 <_fwalk_reent+0x40>
   225d8:	00219c80 	call	219c8 <__sfp_lock_release>
   225dc:	b005883a 	mov	r2,r22
   225e0:	dfc00717 	ldw	ra,28(sp)
   225e4:	dd800617 	ldw	r22,24(sp)
   225e8:	dd400517 	ldw	r21,20(sp)
   225ec:	dd000417 	ldw	r20,16(sp)
   225f0:	dcc00317 	ldw	r19,12(sp)
   225f4:	dc800217 	ldw	r18,8(sp)
   225f8:	dc400117 	ldw	r17,4(sp)
   225fc:	dc000017 	ldw	r16,0(sp)
   22600:	dec00804 	addi	sp,sp,32
   22604:	f800283a 	ret

00022608 <__smakebuf_r>:
   22608:	2880030b 	ldhu	r2,12(r5)
   2260c:	deffed04 	addi	sp,sp,-76
   22610:	dc401015 	stw	r17,64(sp)
   22614:	10c0008c 	andi	r3,r2,2
   22618:	18ffffcc 	andi	r3,r3,65535
   2261c:	18e0001c 	xori	r3,r3,32768
   22620:	dc000f15 	stw	r16,60(sp)
   22624:	dfc01215 	stw	ra,72(sp)
   22628:	dc801115 	stw	r18,68(sp)
   2262c:	18e00004 	addi	r3,r3,-32768
   22630:	2821883a 	mov	r16,r5
   22634:	2023883a 	mov	r17,r4
   22638:	1800381e 	bne	r3,zero,2271c <__smakebuf_r+0x114>
   2263c:	2940038f 	ldh	r5,14(r5)
   22640:	28002d16 	blt	r5,zero,226f8 <__smakebuf_r+0xf0>
   22644:	d80d883a 	mov	r6,sp
   22648:	00224400 	call	22440 <_fstat_r>
   2264c:	10002916 	blt	r2,zero,226f4 <__smakebuf_r+0xec>
   22650:	d8800117 	ldw	r2,4(sp)
   22654:	00e00014 	movui	r3,32768
   22658:	10bc000c 	andi	r2,r2,61440
   2265c:	10c03c26 	beq	r2,r3,22750 <__smakebuf_r+0x148>
   22660:	80c0030b 	ldhu	r3,12(r16)
   22664:	18c20014 	ori	r3,r3,2048
   22668:	80c0030d 	sth	r3,12(r16)
   2266c:	00c80004 	movi	r3,8192
   22670:	10c00c1e 	bne	r2,r3,226a4 <__smakebuf_r+0x9c>
   22674:	8140038f 	ldh	r5,14(r16)
   22678:	8809883a 	mov	r4,r17
   2267c:	002790c0 	call	2790c <_isatty_r>
   22680:	10000826 	beq	r2,zero,226a4 <__smakebuf_r+0x9c>
   22684:	80c0030b 	ldhu	r3,12(r16)
   22688:	808010c4 	addi	r2,r16,67
   2268c:	80800015 	stw	r2,0(r16)
   22690:	18c00054 	ori	r3,r3,1
   22694:	80800415 	stw	r2,16(r16)
   22698:	00800044 	movi	r2,1
   2269c:	80c0030d 	sth	r3,12(r16)
   226a0:	80800515 	stw	r2,20(r16)
   226a4:	04810004 	movi	r18,1024
   226a8:	8809883a 	mov	r4,r17
   226ac:	900b883a 	mov	r5,r18
   226b0:	00227b00 	call	227b0 <_malloc_r>
   226b4:	10003026 	beq	r2,zero,22778 <__smakebuf_r+0x170>
   226b8:	80c0030b 	ldhu	r3,12(r16)
   226bc:	010000b4 	movhi	r4,2
   226c0:	2105ca04 	addi	r4,r4,5928
   226c4:	89000f15 	stw	r4,60(r17)
   226c8:	18c02014 	ori	r3,r3,128
   226cc:	80c0030d 	sth	r3,12(r16)
   226d0:	80800015 	stw	r2,0(r16)
   226d4:	80800415 	stw	r2,16(r16)
   226d8:	84800515 	stw	r18,20(r16)
   226dc:	dfc01217 	ldw	ra,72(sp)
   226e0:	dc801117 	ldw	r18,68(sp)
   226e4:	dc401017 	ldw	r17,64(sp)
   226e8:	dc000f17 	ldw	r16,60(sp)
   226ec:	dec01304 	addi	sp,sp,76
   226f0:	f800283a 	ret
   226f4:	8080030b 	ldhu	r2,12(r16)
   226f8:	10c0200c 	andi	r3,r2,128
   226fc:	18ffffcc 	andi	r3,r3,65535
   22700:	18e0001c 	xori	r3,r3,32768
   22704:	18e00004 	addi	r3,r3,-32768
   22708:	18000f1e 	bne	r3,zero,22748 <__smakebuf_r+0x140>
   2270c:	04810004 	movi	r18,1024
   22710:	10820014 	ori	r2,r2,2048
   22714:	8080030d 	sth	r2,12(r16)
   22718:	003fe306 	br	226a8 <__smakebuf_r+0xa0>
   2271c:	288010c4 	addi	r2,r5,67
   22720:	28800015 	stw	r2,0(r5)
   22724:	28800415 	stw	r2,16(r5)
   22728:	00800044 	movi	r2,1
   2272c:	28800515 	stw	r2,20(r5)
   22730:	dfc01217 	ldw	ra,72(sp)
   22734:	dc801117 	ldw	r18,68(sp)
   22738:	dc401017 	ldw	r17,64(sp)
   2273c:	dc000f17 	ldw	r16,60(sp)
   22740:	dec01304 	addi	sp,sp,76
   22744:	f800283a 	ret
   22748:	04801004 	movi	r18,64
   2274c:	003ff006 	br	22710 <__smakebuf_r+0x108>
   22750:	81000a17 	ldw	r4,40(r16)
   22754:	00c000b4 	movhi	r3,2
   22758:	18cda504 	addi	r3,r3,13972
   2275c:	20ffc01e 	bne	r4,r3,22660 <__smakebuf_r+0x58>
   22760:	8080030b 	ldhu	r2,12(r16)
   22764:	00c10004 	movi	r3,1024
   22768:	80c01315 	stw	r3,76(r16)
   2276c:	10c4b03a 	or	r2,r2,r3
   22770:	8080030d 	sth	r2,12(r16)
   22774:	003fcb06 	br	226a4 <__smakebuf_r+0x9c>
   22778:	8080030b 	ldhu	r2,12(r16)
   2277c:	10c0800c 	andi	r3,r2,512
   22780:	18ffffcc 	andi	r3,r3,65535
   22784:	18e0001c 	xori	r3,r3,32768
   22788:	18e00004 	addi	r3,r3,-32768
   2278c:	183fd31e 	bne	r3,zero,226dc <__smakebuf_r+0xd4>
   22790:	10800094 	ori	r2,r2,2
   22794:	80c010c4 	addi	r3,r16,67
   22798:	8080030d 	sth	r2,12(r16)
   2279c:	00800044 	movi	r2,1
   227a0:	80c00015 	stw	r3,0(r16)
   227a4:	80c00415 	stw	r3,16(r16)
   227a8:	80800515 	stw	r2,20(r16)
   227ac:	003fcb06 	br	226dc <__smakebuf_r+0xd4>

000227b0 <_malloc_r>:
   227b0:	defff604 	addi	sp,sp,-40
   227b4:	dc800215 	stw	r18,8(sp)
   227b8:	dfc00915 	stw	ra,36(sp)
   227bc:	df000815 	stw	fp,32(sp)
   227c0:	ddc00715 	stw	r23,28(sp)
   227c4:	dd800615 	stw	r22,24(sp)
   227c8:	dd400515 	stw	r21,20(sp)
   227cc:	dd000415 	stw	r20,16(sp)
   227d0:	dcc00315 	stw	r19,12(sp)
   227d4:	dc400115 	stw	r17,4(sp)
   227d8:	dc000015 	stw	r16,0(sp)
   227dc:	288002c4 	addi	r2,r5,11
   227e0:	00c00584 	movi	r3,22
   227e4:	2025883a 	mov	r18,r4
   227e8:	18802b2e 	bgeu	r3,r2,22898 <_malloc_r+0xe8>
   227ec:	047ffe04 	movi	r17,-8
   227f0:	1462703a 	and	r17,r2,r17
   227f4:	88002a16 	blt	r17,zero,228a0 <_malloc_r+0xf0>
   227f8:	89402936 	bltu	r17,r5,228a0 <_malloc_r+0xf0>
   227fc:	9009883a 	mov	r4,r18
   22800:	002bba80 	call	2bba8 <__malloc_lock>
   22804:	00807dc4 	movi	r2,503
   22808:	14402936 	bltu	r2,r17,228b0 <_malloc_r+0x100>
   2280c:	8808d0fa 	srli	r4,r17,3
   22810:	04c000f4 	movhi	r19,3
   22814:	9cfcea04 	addi	r19,r19,-3160
   22818:	2105883a 	add	r2,r4,r4
   2281c:	1085883a 	add	r2,r2,r2
   22820:	1085883a 	add	r2,r2,r2
   22824:	9885883a 	add	r2,r19,r2
   22828:	14000317 	ldw	r16,12(r2)
   2282c:	80815526 	beq	r16,r2,22d84 <_malloc_r+0x5d4>
   22830:	81000117 	ldw	r4,4(r16)
   22834:	00bfff04 	movi	r2,-4
   22838:	80c00317 	ldw	r3,12(r16)
   2283c:	2084703a 	and	r2,r4,r2
   22840:	8085883a 	add	r2,r16,r2
   22844:	11800117 	ldw	r6,4(r2)
   22848:	81400217 	ldw	r5,8(r16)
   2284c:	9009883a 	mov	r4,r18
   22850:	31800054 	ori	r6,r6,1
   22854:	11800115 	stw	r6,4(r2)
   22858:	28c00315 	stw	r3,12(r5)
   2285c:	19400215 	stw	r5,8(r3)
   22860:	002bbc80 	call	2bbc8 <__malloc_unlock>
   22864:	80800204 	addi	r2,r16,8
   22868:	dfc00917 	ldw	ra,36(sp)
   2286c:	df000817 	ldw	fp,32(sp)
   22870:	ddc00717 	ldw	r23,28(sp)
   22874:	dd800617 	ldw	r22,24(sp)
   22878:	dd400517 	ldw	r21,20(sp)
   2287c:	dd000417 	ldw	r20,16(sp)
   22880:	dcc00317 	ldw	r19,12(sp)
   22884:	dc800217 	ldw	r18,8(sp)
   22888:	dc400117 	ldw	r17,4(sp)
   2288c:	dc000017 	ldw	r16,0(sp)
   22890:	dec00a04 	addi	sp,sp,40
   22894:	f800283a 	ret
   22898:	04400404 	movi	r17,16
   2289c:	897fd72e 	bgeu	r17,r5,227fc <_malloc_r+0x4c>
   228a0:	00800304 	movi	r2,12
   228a4:	90800015 	stw	r2,0(r18)
   228a8:	0005883a 	mov	r2,zero
   228ac:	003fee06 	br	22868 <_malloc_r+0xb8>
   228b0:	8808d27a 	srli	r4,r17,9
   228b4:	20007126 	beq	r4,zero,22a7c <_malloc_r+0x2cc>
   228b8:	00800104 	movi	r2,4
   228bc:	1100eb36 	bltu	r2,r4,22c6c <_malloc_r+0x4bc>
   228c0:	8808d1ba 	srli	r4,r17,6
   228c4:	21000e04 	addi	r4,r4,56
   228c8:	210b883a 	add	r5,r4,r4
   228cc:	294b883a 	add	r5,r5,r5
   228d0:	294b883a 	add	r5,r5,r5
   228d4:	04c000f4 	movhi	r19,3
   228d8:	9cfcea04 	addi	r19,r19,-3160
   228dc:	994b883a 	add	r5,r19,r5
   228e0:	2c000317 	ldw	r16,12(r5)
   228e4:	2c000e26 	beq	r5,r16,22920 <_malloc_r+0x170>
   228e8:	80c00117 	ldw	r3,4(r16)
   228ec:	01ffff04 	movi	r7,-4
   228f0:	018003c4 	movi	r6,15
   228f4:	19c6703a 	and	r3,r3,r7
   228f8:	1c45c83a 	sub	r2,r3,r17
   228fc:	30800716 	blt	r6,r2,2291c <_malloc_r+0x16c>
   22900:	1000610e 	bge	r2,zero,22a88 <_malloc_r+0x2d8>
   22904:	84000317 	ldw	r16,12(r16)
   22908:	2c000526 	beq	r5,r16,22920 <_malloc_r+0x170>
   2290c:	80c00117 	ldw	r3,4(r16)
   22910:	19c6703a 	and	r3,r3,r7
   22914:	1c45c83a 	sub	r2,r3,r17
   22918:	30bff90e 	bge	r6,r2,22900 <_malloc_r+0x150>
   2291c:	213fffc4 	addi	r4,r4,-1
   22920:	21000044 	addi	r4,r4,1
   22924:	9c000417 	ldw	r16,16(r19)
   22928:	00c000f4 	movhi	r3,3
   2292c:	18fcea04 	addi	r3,r3,-3160
   22930:	1a400204 	addi	r9,r3,8
   22934:	8240ff26 	beq	r16,r9,22d34 <_malloc_r+0x584>
   22938:	81400117 	ldw	r5,4(r16)
   2293c:	00bfff04 	movi	r2,-4
   22940:	018003c4 	movi	r6,15
   22944:	2884703a 	and	r2,r5,r2
   22948:	144bc83a 	sub	r5,r2,r17
   2294c:	3140ea16 	blt	r6,r5,22cf8 <_malloc_r+0x548>
   22950:	1a400515 	stw	r9,20(r3)
   22954:	1a400415 	stw	r9,16(r3)
   22958:	2800570e 	bge	r5,zero,22ab8 <_malloc_r+0x308>
   2295c:	01407fc4 	movi	r5,511
   22960:	2880ca36 	bltu	r5,r2,22c8c <_malloc_r+0x4dc>
   22964:	1004d0fa 	srli	r2,r2,3
   22968:	02000044 	movi	r8,1
   2296c:	19c00117 	ldw	r7,4(r3)
   22970:	108b883a 	add	r5,r2,r2
   22974:	294b883a 	add	r5,r5,r5
   22978:	1005d0ba 	srai	r2,r2,2
   2297c:	294b883a 	add	r5,r5,r5
   22980:	28cb883a 	add	r5,r5,r3
   22984:	29800217 	ldw	r6,8(r5)
   22988:	4084983a 	sll	r2,r8,r2
   2298c:	81400315 	stw	r5,12(r16)
   22990:	81800215 	stw	r6,8(r16)
   22994:	11c4b03a 	or	r2,r2,r7
   22998:	18800115 	stw	r2,4(r3)
   2299c:	2c000215 	stw	r16,8(r5)
   229a0:	34000315 	stw	r16,12(r6)
   229a4:	200bd0ba 	srai	r5,r4,2
   229a8:	00c00044 	movi	r3,1
   229ac:	194a983a 	sll	r5,r3,r5
   229b0:	11404936 	bltu	r2,r5,22ad8 <_malloc_r+0x328>
   229b4:	1146703a 	and	r3,r2,r5
   229b8:	18000a1e 	bne	r3,zero,229e4 <_malloc_r+0x234>
   229bc:	00ffff04 	movi	r3,-4
   229c0:	294b883a 	add	r5,r5,r5
   229c4:	20c8703a 	and	r4,r4,r3
   229c8:	1146703a 	and	r3,r2,r5
   229cc:	21000104 	addi	r4,r4,4
   229d0:	1800041e 	bne	r3,zero,229e4 <_malloc_r+0x234>
   229d4:	294b883a 	add	r5,r5,r5
   229d8:	1146703a 	and	r3,r2,r5
   229dc:	21000104 	addi	r4,r4,4
   229e0:	183ffc26 	beq	r3,zero,229d4 <_malloc_r+0x224>
   229e4:	023fff04 	movi	r8,-4
   229e8:	01c003c4 	movi	r7,15
   229ec:	2105883a 	add	r2,r4,r4
   229f0:	1085883a 	add	r2,r2,r2
   229f4:	1085883a 	add	r2,r2,r2
   229f8:	9899883a 	add	r12,r19,r2
   229fc:	62800304 	addi	r10,r12,12
   22a00:	2017883a 	mov	r11,r4
   22a04:	54000017 	ldw	r16,0(r10)
   22a08:	51bffd04 	addi	r6,r10,-12
   22a0c:	8180041e 	bne	r16,r6,22a20 <_malloc_r+0x270>
   22a10:	0000ca06 	br	22d3c <_malloc_r+0x58c>
   22a14:	10001c0e 	bge	r2,zero,22a88 <_malloc_r+0x2d8>
   22a18:	84000317 	ldw	r16,12(r16)
   22a1c:	8180c726 	beq	r16,r6,22d3c <_malloc_r+0x58c>
   22a20:	80c00117 	ldw	r3,4(r16)
   22a24:	1a06703a 	and	r3,r3,r8
   22a28:	1c45c83a 	sub	r2,r3,r17
   22a2c:	38bff90e 	bge	r7,r2,22a14 <_malloc_r+0x264>
   22a30:	81000317 	ldw	r4,12(r16)
   22a34:	81400217 	ldw	r5,8(r16)
   22a38:	8447883a 	add	r3,r16,r17
   22a3c:	8c400054 	ori	r17,r17,1
   22a40:	29000315 	stw	r4,12(r5)
   22a44:	21400215 	stw	r5,8(r4)
   22a48:	84400115 	stw	r17,4(r16)
   22a4c:	1889883a 	add	r4,r3,r2
   22a50:	11400054 	ori	r5,r2,1
   22a54:	98c00515 	stw	r3,20(r19)
   22a58:	98c00415 	stw	r3,16(r19)
   22a5c:	20800015 	stw	r2,0(r4)
   22a60:	1a400315 	stw	r9,12(r3)
   22a64:	1a400215 	stw	r9,8(r3)
   22a68:	19400115 	stw	r5,4(r3)
   22a6c:	9009883a 	mov	r4,r18
   22a70:	002bbc80 	call	2bbc8 <__malloc_unlock>
   22a74:	80800204 	addi	r2,r16,8
   22a78:	003f7b06 	br	22868 <_malloc_r+0xb8>
   22a7c:	8808d0fa 	srli	r4,r17,3
   22a80:	210b883a 	add	r5,r4,r4
   22a84:	003f9106 	br	228cc <_malloc_r+0x11c>
   22a88:	80c7883a 	add	r3,r16,r3
   22a8c:	19400117 	ldw	r5,4(r3)
   22a90:	80800317 	ldw	r2,12(r16)
   22a94:	81000217 	ldw	r4,8(r16)
   22a98:	29400054 	ori	r5,r5,1
   22a9c:	19400115 	stw	r5,4(r3)
   22aa0:	20800315 	stw	r2,12(r4)
   22aa4:	11000215 	stw	r4,8(r2)
   22aa8:	9009883a 	mov	r4,r18
   22aac:	002bbc80 	call	2bbc8 <__malloc_unlock>
   22ab0:	80800204 	addi	r2,r16,8
   22ab4:	003f6c06 	br	22868 <_malloc_r+0xb8>
   22ab8:	8085883a 	add	r2,r16,r2
   22abc:	10c00117 	ldw	r3,4(r2)
   22ac0:	9009883a 	mov	r4,r18
   22ac4:	18c00054 	ori	r3,r3,1
   22ac8:	10c00115 	stw	r3,4(r2)
   22acc:	002bbc80 	call	2bbc8 <__malloc_unlock>
   22ad0:	80800204 	addi	r2,r16,8
   22ad4:	003f6406 	br	22868 <_malloc_r+0xb8>
   22ad8:	9c000217 	ldw	r16,8(r19)
   22adc:	00bfff04 	movi	r2,-4
   22ae0:	85400117 	ldw	r21,4(r16)
   22ae4:	a8aa703a 	and	r21,r21,r2
   22ae8:	ac400336 	bltu	r21,r17,22af8 <_malloc_r+0x348>
   22aec:	ac45c83a 	sub	r2,r21,r17
   22af0:	00c003c4 	movi	r3,15
   22af4:	18805316 	blt	r3,r2,22c44 <_malloc_r+0x494>
   22af8:	d5e2cb17 	ldw	r23,-29908(gp)
   22afc:	d0e00217 	ldw	r3,-32760(gp)
   22b00:	00bfffc4 	movi	r2,-1
   22b04:	8579883a 	add	fp,r16,r21
   22b08:	8def883a 	add	r23,r17,r23
   22b0c:	1880d226 	beq	r3,r2,22e58 <_malloc_r+0x6a8>
   22b10:	bdc403c4 	addi	r23,r23,4111
   22b14:	00bc0004 	movi	r2,-4096
   22b18:	b8ae703a 	and	r23,r23,r2
   22b1c:	9009883a 	mov	r4,r18
   22b20:	b80b883a 	mov	r5,r23
   22b24:	00235540 	call	23554 <_sbrk_r>
   22b28:	1029883a 	mov	r20,r2
   22b2c:	00bfffc4 	movi	r2,-1
   22b30:	a080d126 	beq	r20,r2,22e78 <_malloc_r+0x6c8>
   22b34:	a7009f36 	bltu	r20,fp,22db4 <_malloc_r+0x604>
   22b38:	058000f4 	movhi	r22,3
   22b3c:	b5814304 	addi	r22,r22,1292
   22b40:	b0800017 	ldw	r2,0(r22)
   22b44:	b885883a 	add	r2,r23,r2
   22b48:	b0800015 	stw	r2,0(r22)
   22b4c:	e500cf26 	beq	fp,r20,22e8c <_malloc_r+0x6dc>
   22b50:	d1200217 	ldw	r4,-32760(gp)
   22b54:	00ffffc4 	movi	r3,-1
   22b58:	20c0e026 	beq	r4,r3,22edc <_malloc_r+0x72c>
   22b5c:	a739c83a 	sub	fp,r20,fp
   22b60:	1705883a 	add	r2,r2,fp
   22b64:	b0800015 	stw	r2,0(r22)
   22b68:	a08001cc 	andi	r2,r20,7
   22b6c:	1000a526 	beq	r2,zero,22e04 <_malloc_r+0x654>
   22b70:	a0a9c83a 	sub	r20,r20,r2
   22b74:	00c40204 	movi	r3,4104
   22b78:	a5000204 	addi	r20,r20,8
   22b7c:	1885c83a 	sub	r2,r3,r2
   22b80:	a5c7883a 	add	r3,r20,r23
   22b84:	18c3ffcc 	andi	r3,r3,4095
   22b88:	10efc83a 	sub	r23,r2,r3
   22b8c:	9009883a 	mov	r4,r18
   22b90:	b80b883a 	mov	r5,r23
   22b94:	00235540 	call	23554 <_sbrk_r>
   22b98:	00ffffc4 	movi	r3,-1
   22b9c:	10c0cc26 	beq	r2,r3,22ed0 <_malloc_r+0x720>
   22ba0:	1505c83a 	sub	r2,r2,r20
   22ba4:	b887883a 	add	r3,r23,r2
   22ba8:	18c00054 	ori	r3,r3,1
   22bac:	b0800017 	ldw	r2,0(r22)
   22bb0:	9d000215 	stw	r20,8(r19)
   22bb4:	a0c00115 	stw	r3,4(r20)
   22bb8:	b885883a 	add	r2,r23,r2
   22bbc:	b0800015 	stw	r2,0(r22)
   22bc0:	84c00e26 	beq	r16,r19,22bfc <_malloc_r+0x44c>
   22bc4:	00c003c4 	movi	r3,15
   22bc8:	1d40902e 	bgeu	r3,r21,22e0c <_malloc_r+0x65c>
   22bcc:	ad7ffd04 	addi	r21,r21,-12
   22bd0:	013ffe04 	movi	r4,-8
   22bd4:	a908703a 	and	r4,r21,r4
   22bd8:	810b883a 	add	r5,r16,r4
   22bdc:	01800144 	movi	r6,5
   22be0:	29800115 	stw	r6,4(r5)
   22be4:	29800215 	stw	r6,8(r5)
   22be8:	81400117 	ldw	r5,4(r16)
   22bec:	2940004c 	andi	r5,r5,1
   22bf0:	214ab03a 	or	r5,r4,r5
   22bf4:	81400115 	stw	r5,4(r16)
   22bf8:	1900ae36 	bltu	r3,r4,22eb4 <_malloc_r+0x704>
   22bfc:	d0e2ca17 	ldw	r3,-29912(gp)
   22c00:	1880012e 	bgeu	r3,r2,22c08 <_malloc_r+0x458>
   22c04:	d0a2ca15 	stw	r2,-29912(gp)
   22c08:	d0e2c917 	ldw	r3,-29916(gp)
   22c0c:	9c000217 	ldw	r16,8(r19)
   22c10:	1880012e 	bgeu	r3,r2,22c18 <_malloc_r+0x468>
   22c14:	d0a2c915 	stw	r2,-29916(gp)
   22c18:	80c00117 	ldw	r3,4(r16)
   22c1c:	00bfff04 	movi	r2,-4
   22c20:	1886703a 	and	r3,r3,r2
   22c24:	1c45c83a 	sub	r2,r3,r17
   22c28:	1c400236 	bltu	r3,r17,22c34 <_malloc_r+0x484>
   22c2c:	00c003c4 	movi	r3,15
   22c30:	18800416 	blt	r3,r2,22c44 <_malloc_r+0x494>
   22c34:	9009883a 	mov	r4,r18
   22c38:	002bbc80 	call	2bbc8 <__malloc_unlock>
   22c3c:	0005883a 	mov	r2,zero
   22c40:	003f0906 	br	22868 <_malloc_r+0xb8>
   22c44:	88c00054 	ori	r3,r17,1
   22c48:	10800054 	ori	r2,r2,1
   22c4c:	80c00115 	stw	r3,4(r16)
   22c50:	8463883a 	add	r17,r16,r17
   22c54:	88800115 	stw	r2,4(r17)
   22c58:	9009883a 	mov	r4,r18
   22c5c:	9c400215 	stw	r17,8(r19)
   22c60:	002bbc80 	call	2bbc8 <__malloc_unlock>
   22c64:	80800204 	addi	r2,r16,8
   22c68:	003eff06 	br	22868 <_malloc_r+0xb8>
   22c6c:	00800504 	movi	r2,20
   22c70:	1100492e 	bgeu	r2,r4,22d98 <_malloc_r+0x5e8>
   22c74:	00801504 	movi	r2,84
   22c78:	11005c36 	bltu	r2,r4,22dec <_malloc_r+0x63c>
   22c7c:	8808d33a 	srli	r4,r17,12
   22c80:	21001b84 	addi	r4,r4,110
   22c84:	210b883a 	add	r5,r4,r4
   22c88:	003f1006 	br	228cc <_malloc_r+0x11c>
   22c8c:	1006d27a 	srli	r3,r2,9
   22c90:	01400104 	movi	r5,4
   22c94:	28c0432e 	bgeu	r5,r3,22da4 <_malloc_r+0x5f4>
   22c98:	01400504 	movi	r5,20
   22c9c:	28c07036 	bltu	r5,r3,22e60 <_malloc_r+0x6b0>
   22ca0:	194016c4 	addi	r5,r3,91
   22ca4:	294d883a 	add	r6,r5,r5
   22ca8:	318d883a 	add	r6,r6,r6
   22cac:	318d883a 	add	r6,r6,r6
   22cb0:	998d883a 	add	r6,r19,r6
   22cb4:	30c00217 	ldw	r3,8(r6)
   22cb8:	01c000f4 	movhi	r7,3
   22cbc:	39fcea04 	addi	r7,r7,-3160
   22cc0:	19805726 	beq	r3,r6,22e20 <_malloc_r+0x670>
   22cc4:	01ffff04 	movi	r7,-4
   22cc8:	19400117 	ldw	r5,4(r3)
   22ccc:	29ca703a 	and	r5,r5,r7
   22cd0:	1140022e 	bgeu	r2,r5,22cdc <_malloc_r+0x52c>
   22cd4:	18c00217 	ldw	r3,8(r3)
   22cd8:	30fffb1e 	bne	r6,r3,22cc8 <_malloc_r+0x518>
   22cdc:	19400317 	ldw	r5,12(r3)
   22ce0:	98800117 	ldw	r2,4(r19)
   22ce4:	81400315 	stw	r5,12(r16)
   22ce8:	80c00215 	stw	r3,8(r16)
   22cec:	2c000215 	stw	r16,8(r5)
   22cf0:	1c000315 	stw	r16,12(r3)
   22cf4:	003f2b06 	br	229a4 <_malloc_r+0x1f4>
   22cf8:	8445883a 	add	r2,r16,r17
   22cfc:	8c400054 	ori	r17,r17,1
   22d00:	18800515 	stw	r2,20(r3)
   22d04:	18800415 	stw	r2,16(r3)
   22d08:	29000054 	ori	r4,r5,1
   22d0c:	1147883a 	add	r3,r2,r5
   22d10:	84400115 	stw	r17,4(r16)
   22d14:	11000115 	stw	r4,4(r2)
   22d18:	12400315 	stw	r9,12(r2)
   22d1c:	12400215 	stw	r9,8(r2)
   22d20:	19400015 	stw	r5,0(r3)
   22d24:	9009883a 	mov	r4,r18
   22d28:	002bbc80 	call	2bbc8 <__malloc_unlock>
   22d2c:	80800204 	addi	r2,r16,8
   22d30:	003ecd06 	br	22868 <_malloc_r+0xb8>
   22d34:	18800117 	ldw	r2,4(r3)
   22d38:	003f1a06 	br	229a4 <_malloc_r+0x1f4>
   22d3c:	5ac00044 	addi	r11,r11,1
   22d40:	588000cc 	andi	r2,r11,3
   22d44:	52800204 	addi	r10,r10,8
   22d48:	103f2e1e 	bne	r2,zero,22a04 <_malloc_r+0x254>
   22d4c:	20c000cc 	andi	r3,r4,3
   22d50:	60bffe04 	addi	r2,r12,-8
   22d54:	18006f26 	beq	r3,zero,22f14 <_malloc_r+0x764>
   22d58:	63000017 	ldw	r12,0(r12)
   22d5c:	213fffc4 	addi	r4,r4,-1
   22d60:	60bffa26 	beq	r12,r2,22d4c <_malloc_r+0x59c>
   22d64:	98800117 	ldw	r2,4(r19)
   22d68:	294b883a 	add	r5,r5,r5
   22d6c:	117f5a36 	bltu	r2,r5,22ad8 <_malloc_r+0x328>
   22d70:	283f5926 	beq	r5,zero,22ad8 <_malloc_r+0x328>
   22d74:	1146703a 	and	r3,r2,r5
   22d78:	18001626 	beq	r3,zero,22dd4 <_malloc_r+0x624>
   22d7c:	5809883a 	mov	r4,r11
   22d80:	003f1a06 	br	229ec <_malloc_r+0x23c>
   22d84:	80800204 	addi	r2,r16,8
   22d88:	84000517 	ldw	r16,20(r16)
   22d8c:	143ea81e 	bne	r2,r16,22830 <_malloc_r+0x80>
   22d90:	21000084 	addi	r4,r4,2
   22d94:	003ee306 	br	22924 <_malloc_r+0x174>
   22d98:	210016c4 	addi	r4,r4,91
   22d9c:	210b883a 	add	r5,r4,r4
   22da0:	003eca06 	br	228cc <_malloc_r+0x11c>
   22da4:	100ad1ba 	srli	r5,r2,6
   22da8:	29400e04 	addi	r5,r5,56
   22dac:	294d883a 	add	r6,r5,r5
   22db0:	003fbd06 	br	22ca8 <_malloc_r+0x4f8>
   22db4:	84ff6026 	beq	r16,r19,22b38 <_malloc_r+0x388>
   22db8:	008000f4 	movhi	r2,3
   22dbc:	10bcea04 	addi	r2,r2,-3160
   22dc0:	14000217 	ldw	r16,8(r2)
   22dc4:	00bfff04 	movi	r2,-4
   22dc8:	80c00117 	ldw	r3,4(r16)
   22dcc:	1886703a 	and	r3,r3,r2
   22dd0:	003f9406 	br	22c24 <_malloc_r+0x474>
   22dd4:	294b883a 	add	r5,r5,r5
   22dd8:	1146703a 	and	r3,r2,r5
   22ddc:	5ac00104 	addi	r11,r11,4
   22de0:	183ffc26 	beq	r3,zero,22dd4 <_malloc_r+0x624>
   22de4:	5809883a 	mov	r4,r11
   22de8:	003f0006 	br	229ec <_malloc_r+0x23c>
   22dec:	00805504 	movi	r2,340
   22df0:	11001336 	bltu	r2,r4,22e40 <_malloc_r+0x690>
   22df4:	8808d3fa 	srli	r4,r17,15
   22df8:	21001dc4 	addi	r4,r4,119
   22dfc:	210b883a 	add	r5,r4,r4
   22e00:	003eb206 	br	228cc <_malloc_r+0x11c>
   22e04:	00840004 	movi	r2,4096
   22e08:	003f5d06 	br	22b80 <_malloc_r+0x3d0>
   22e0c:	00800044 	movi	r2,1
   22e10:	a0800115 	stw	r2,4(r20)
   22e14:	a021883a 	mov	r16,r20
   22e18:	0007883a 	mov	r3,zero
   22e1c:	003f8106 	br	22c24 <_malloc_r+0x474>
   22e20:	280bd0ba 	srai	r5,r5,2
   22e24:	01800044 	movi	r6,1
   22e28:	38800117 	ldw	r2,4(r7)
   22e2c:	314c983a 	sll	r6,r6,r5
   22e30:	180b883a 	mov	r5,r3
   22e34:	3084b03a 	or	r2,r6,r2
   22e38:	38800115 	stw	r2,4(r7)
   22e3c:	003fa906 	br	22ce4 <_malloc_r+0x534>
   22e40:	00815504 	movi	r2,1364
   22e44:	11001836 	bltu	r2,r4,22ea8 <_malloc_r+0x6f8>
   22e48:	8808d4ba 	srli	r4,r17,18
   22e4c:	21001f04 	addi	r4,r4,124
   22e50:	210b883a 	add	r5,r4,r4
   22e54:	003e9d06 	br	228cc <_malloc_r+0x11c>
   22e58:	bdc00404 	addi	r23,r23,16
   22e5c:	003f2f06 	br	22b1c <_malloc_r+0x36c>
   22e60:	01401504 	movi	r5,84
   22e64:	28c01f36 	bltu	r5,r3,22ee4 <_malloc_r+0x734>
   22e68:	100ad33a 	srli	r5,r2,12
   22e6c:	29401b84 	addi	r5,r5,110
   22e70:	294d883a 	add	r6,r5,r5
   22e74:	003f8c06 	br	22ca8 <_malloc_r+0x4f8>
   22e78:	9c000217 	ldw	r16,8(r19)
   22e7c:	00bfff04 	movi	r2,-4
   22e80:	80c00117 	ldw	r3,4(r16)
   22e84:	1886703a 	and	r3,r3,r2
   22e88:	003f6606 	br	22c24 <_malloc_r+0x474>
   22e8c:	e0c3ffcc 	andi	r3,fp,4095
   22e90:	183f2f1e 	bne	r3,zero,22b50 <_malloc_r+0x3a0>
   22e94:	98c00217 	ldw	r3,8(r19)
   22e98:	bd49883a 	add	r4,r23,r21
   22e9c:	21000054 	ori	r4,r4,1
   22ea0:	19000115 	stw	r4,4(r3)
   22ea4:	003f5506 	br	22bfc <_malloc_r+0x44c>
   22ea8:	01403f04 	movi	r5,252
   22eac:	01001f84 	movi	r4,126
   22eb0:	003e8606 	br	228cc <_malloc_r+0x11c>
   22eb4:	9009883a 	mov	r4,r18
   22eb8:	81400204 	addi	r5,r16,8
   22ebc:	0021cd80 	call	21cd8 <_free_r>
   22ec0:	008000f4 	movhi	r2,3
   22ec4:	10814304 	addi	r2,r2,1292
   22ec8:	10800017 	ldw	r2,0(r2)
   22ecc:	003f4b06 	br	22bfc <_malloc_r+0x44c>
   22ed0:	00c00044 	movi	r3,1
   22ed4:	002f883a 	mov	r23,zero
   22ed8:	003f3406 	br	22bac <_malloc_r+0x3fc>
   22edc:	d5200215 	stw	r20,-32760(gp)
   22ee0:	003f2106 	br	22b68 <_malloc_r+0x3b8>
   22ee4:	01405504 	movi	r5,340
   22ee8:	28c00436 	bltu	r5,r3,22efc <_malloc_r+0x74c>
   22eec:	100ad3fa 	srli	r5,r2,15
   22ef0:	29401dc4 	addi	r5,r5,119
   22ef4:	294d883a 	add	r6,r5,r5
   22ef8:	003f6b06 	br	22ca8 <_malloc_r+0x4f8>
   22efc:	01415504 	movi	r5,1364
   22f00:	28c00936 	bltu	r5,r3,22f28 <_malloc_r+0x778>
   22f04:	100ad4ba 	srli	r5,r2,18
   22f08:	29401f04 	addi	r5,r5,124
   22f0c:	294d883a 	add	r6,r5,r5
   22f10:	003f6506 	br	22ca8 <_malloc_r+0x4f8>
   22f14:	98800117 	ldw	r2,4(r19)
   22f18:	0146303a 	nor	r3,zero,r5
   22f1c:	1884703a 	and	r2,r3,r2
   22f20:	98800115 	stw	r2,4(r19)
   22f24:	003f9006 	br	22d68 <_malloc_r+0x5b8>
   22f28:	01803f04 	movi	r6,252
   22f2c:	01401f84 	movi	r5,126
   22f30:	003f5d06 	br	22ca8 <_malloc_r+0x4f8>

00022f34 <memchr>:
   22f34:	008000c4 	movi	r2,3
   22f38:	29403fcc 	andi	r5,r5,255
   22f3c:	1180282e 	bgeu	r2,r6,22fe0 <memchr+0xac>
   22f40:	2086703a 	and	r3,r4,r2
   22f44:	1800351e 	bne	r3,zero,2301c <memchr+0xe8>
   22f48:	2816923a 	slli	r11,r5,8
   22f4c:	2093883a 	add	r9,r4,r2
   22f50:	22000084 	addi	r8,r4,2
   22f54:	5957883a 	add	r11,r11,r5
   22f58:	5816923a 	slli	r11,r11,8
   22f5c:	20c00044 	addi	r3,r4,1
   22f60:	037fbff4 	movhi	r13,65279
   22f64:	6b7fbfc4 	addi	r13,r13,-257
   22f68:	5957883a 	add	r11,r11,r5
   22f6c:	5816923a 	slli	r11,r11,8
   22f70:	03202074 	movhi	r12,32897
   22f74:	63202004 	addi	r12,r12,-32640
   22f78:	101d883a 	mov	r14,r2
   22f7c:	5957883a 	add	r11,r11,r5
   22f80:	21c00017 	ldw	r7,0(r4)
   22f84:	31bfff04 	addi	r6,r6,-4
   22f88:	1805883a 	mov	r2,r3
   22f8c:	3acef03a 	xor	r7,r7,r11
   22f90:	3b55883a 	add	r10,r7,r13
   22f94:	01ce303a 	nor	r7,zero,r7
   22f98:	51ce703a 	and	r7,r10,r7
   22f9c:	3b0e703a 	and	r7,r7,r12
   22fa0:	38000a26 	beq	r7,zero,22fcc <memchr+0x98>
   22fa4:	21c00003 	ldbu	r7,0(r4)
   22fa8:	39401e26 	beq	r7,r5,23024 <memchr+0xf0>
   22fac:	19c00003 	ldbu	r7,0(r3)
   22fb0:	39401926 	beq	r7,r5,23018 <memchr+0xe4>
   22fb4:	41c00003 	ldbu	r7,0(r8)
   22fb8:	4005883a 	mov	r2,r8
   22fbc:	39401626 	beq	r7,r5,23018 <memchr+0xe4>
   22fc0:	49c00003 	ldbu	r7,0(r9)
   22fc4:	4805883a 	mov	r2,r9
   22fc8:	39401326 	beq	r7,r5,23018 <memchr+0xe4>
   22fcc:	21000104 	addi	r4,r4,4
   22fd0:	4a400104 	addi	r9,r9,4
   22fd4:	42000104 	addi	r8,r8,4
   22fd8:	18c00104 	addi	r3,r3,4
   22fdc:	71bfe836 	bltu	r14,r6,22f80 <memchr+0x4c>
   22fe0:	2005883a 	mov	r2,r4
   22fe4:	30000a26 	beq	r6,zero,23010 <memchr+0xdc>
   22fe8:	10c00003 	ldbu	r3,0(r2)
   22fec:	19400a26 	beq	r3,r5,23018 <memchr+0xe4>
   22ff0:	10c00044 	addi	r3,r2,1
   22ff4:	118d883a 	add	r6,r2,r6
   22ff8:	00000306 	br	23008 <memchr+0xd4>
   22ffc:	11000003 	ldbu	r4,0(r2)
   23000:	18c00044 	addi	r3,r3,1
   23004:	21400426 	beq	r4,r5,23018 <memchr+0xe4>
   23008:	1805883a 	mov	r2,r3
   2300c:	19bffb1e 	bne	r3,r6,22ffc <memchr+0xc8>
   23010:	0005883a 	mov	r2,zero
   23014:	f800283a 	ret
   23018:	f800283a 	ret
   2301c:	2005883a 	mov	r2,r4
   23020:	003ff106 	br	22fe8 <memchr+0xb4>
   23024:	2005883a 	mov	r2,r4
   23028:	f800283a 	ret

0002302c <memcpy>:
   2302c:	defffb04 	addi	sp,sp,-20
   23030:	dc000015 	stw	r16,0(sp)
   23034:	dfc00415 	stw	ra,16(sp)
   23038:	dcc00315 	stw	r19,12(sp)
   2303c:	dc800215 	stw	r18,8(sp)
   23040:	dc400115 	stw	r17,4(sp)
   23044:	00c003c4 	movi	r3,15
   23048:	2021883a 	mov	r16,r4
   2304c:	3005883a 	mov	r2,r6
   23050:	1980032e 	bgeu	r3,r6,23060 <memcpy+0x34>
   23054:	2906b03a 	or	r3,r5,r4
   23058:	18c000cc 	andi	r3,r3,3
   2305c:	18001026 	beq	r3,zero,230a0 <memcpy+0x74>
   23060:	8007883a 	mov	r3,r16
   23064:	288f883a 	add	r7,r5,r2
   23068:	10000526 	beq	r2,zero,23080 <memcpy+0x54>
   2306c:	29800003 	ldbu	r6,0(r5)
   23070:	18c00044 	addi	r3,r3,1
   23074:	29400044 	addi	r5,r5,1
   23078:	19bfffc5 	stb	r6,-1(r3)
   2307c:	29fffb1e 	bne	r5,r7,2306c <memcpy+0x40>
   23080:	8005883a 	mov	r2,r16
   23084:	dfc00417 	ldw	ra,16(sp)
   23088:	dcc00317 	ldw	r19,12(sp)
   2308c:	dc800217 	ldw	r18,8(sp)
   23090:	dc400117 	ldw	r17,4(sp)
   23094:	dc000017 	ldw	r16,0(sp)
   23098:	dec00504 	addi	sp,sp,20
   2309c:	f800283a 	ret
   230a0:	32bffc04 	addi	r10,r6,-16
   230a4:	5014d13a 	srli	r10,r10,4
   230a8:	20800404 	addi	r2,r4,16
   230ac:	2007883a 	mov	r3,r4
   230b0:	5008913a 	slli	r4,r10,4
   230b4:	280f883a 	mov	r7,r5
   230b8:	1105883a 	add	r2,r2,r4
   230bc:	3a000017 	ldw	r8,0(r7)
   230c0:	18c00404 	addi	r3,r3,16
   230c4:	39c00404 	addi	r7,r7,16
   230c8:	1a3ffc15 	stw	r8,-16(r3)
   230cc:	3a3ffd17 	ldw	r8,-12(r7)
   230d0:	1a3ffd15 	stw	r8,-12(r3)
   230d4:	3a3ffe17 	ldw	r8,-8(r7)
   230d8:	1a3ffe15 	stw	r8,-8(r3)
   230dc:	3a3fff17 	ldw	r8,-4(r7)
   230e0:	1a3fff15 	stw	r8,-4(r3)
   230e4:	18bff51e 	bne	r3,r2,230bc <memcpy+0x90>
   230e8:	52800044 	addi	r10,r10,1
   230ec:	5014913a 	slli	r10,r10,4
   230f0:	308003cc 	andi	r2,r6,15
   230f4:	010000c4 	movi	r4,3
   230f8:	8287883a 	add	r3,r16,r10
   230fc:	2a95883a 	add	r10,r5,r10
   23100:	2080182e 	bgeu	r4,r2,23164 <memcpy+0x138>
   23104:	147fff04 	addi	r17,r2,-4
   23108:	8808d0ba 	srli	r4,r17,2
   2310c:	1a400104 	addi	r9,r3,4
   23110:	180d883a 	mov	r6,r3
   23114:	2105883a 	add	r2,r4,r4
   23118:	1085883a 	add	r2,r2,r2
   2311c:	4893883a 	add	r9,r9,r2
   23120:	500f883a 	mov	r7,r10
   23124:	3a000017 	ldw	r8,0(r7)
   23128:	31800104 	addi	r6,r6,4
   2312c:	39c00104 	addi	r7,r7,4
   23130:	323fff15 	stw	r8,-4(r6)
   23134:	327ffb1e 	bne	r6,r9,23124 <memcpy+0xf8>
   23138:	20800044 	addi	r2,r4,1
   2313c:	1085883a 	add	r2,r2,r2
   23140:	1085883a 	add	r2,r2,r2
   23144:	017fff04 	movi	r5,-4
   23148:	18a5883a 	add	r18,r3,r2
   2314c:	50a7883a 	add	r19,r10,r2
   23150:	00212100 	call	21210 <__mulsi3>
   23154:	1445883a 	add	r2,r2,r17
   23158:	980b883a 	mov	r5,r19
   2315c:	9007883a 	mov	r3,r18
   23160:	003fc006 	br	23064 <memcpy+0x38>
   23164:	500b883a 	mov	r5,r10
   23168:	003fbe06 	br	23064 <memcpy+0x38>

0002316c <memset>:
   2316c:	00c000c4 	movi	r3,3
   23170:	2005883a 	mov	r2,r4
   23174:	29403fcc 	andi	r5,r5,255
   23178:	19802d2e 	bgeu	r3,r6,23230 <memset+0xc4>
   2317c:	20c6703a 	and	r3,r4,r3
   23180:	18002e1e 	bne	r3,zero,2323c <memset+0xd0>
   23184:	2806923a 	slli	r3,r5,8
   23188:	010003c4 	movi	r4,15
   2318c:	3011883a 	mov	r8,r6
   23190:	1946b03a 	or	r3,r3,r5
   23194:	180e943a 	slli	r7,r3,16
   23198:	38ceb03a 	or	r7,r7,r3
   2319c:	1007883a 	mov	r3,r2
   231a0:	21800f2e 	bgeu	r4,r6,231e0 <memset+0x74>
   231a4:	19c00015 	stw	r7,0(r3)
   231a8:	19c00115 	stw	r7,4(r3)
   231ac:	19c00215 	stw	r7,8(r3)
   231b0:	19c00315 	stw	r7,12(r3)
   231b4:	423ffc04 	addi	r8,r8,-16
   231b8:	18c00404 	addi	r3,r3,16
   231bc:	223ff936 	bltu	r4,r8,231a4 <memset+0x38>
   231c0:	30fffc04 	addi	r3,r6,-16
   231c4:	1806d13a 	srli	r3,r3,4
   231c8:	318003cc 	andi	r6,r6,15
   231cc:	010000c4 	movi	r4,3
   231d0:	18c00044 	addi	r3,r3,1
   231d4:	1806913a 	slli	r3,r3,4
   231d8:	10c7883a 	add	r3,r2,r3
   231dc:	21800e2e 	bgeu	r4,r6,23218 <memset+0xac>
   231e0:	1813883a 	mov	r9,r3
   231e4:	3011883a 	mov	r8,r6
   231e8:	010000c4 	movi	r4,3
   231ec:	49c00015 	stw	r7,0(r9)
   231f0:	423fff04 	addi	r8,r8,-4
   231f4:	4a400104 	addi	r9,r9,4
   231f8:	223ffc36 	bltu	r4,r8,231ec <memset+0x80>
   231fc:	313fff04 	addi	r4,r6,-4
   23200:	2008d0ba 	srli	r4,r4,2
   23204:	318000cc 	andi	r6,r6,3
   23208:	21000044 	addi	r4,r4,1
   2320c:	2109883a 	add	r4,r4,r4
   23210:	2109883a 	add	r4,r4,r4
   23214:	1907883a 	add	r3,r3,r4
   23218:	30000a26 	beq	r6,zero,23244 <memset+0xd8>
   2321c:	198d883a 	add	r6,r3,r6
   23220:	19400005 	stb	r5,0(r3)
   23224:	18c00044 	addi	r3,r3,1
   23228:	19bffd1e 	bne	r3,r6,23220 <memset+0xb4>
   2322c:	f800283a 	ret
   23230:	2007883a 	mov	r3,r4
   23234:	303ff91e 	bne	r6,zero,2321c <memset+0xb0>
   23238:	00000206 	br	23244 <memset+0xd8>
   2323c:	2007883a 	mov	r3,r4
   23240:	003ff606 	br	2321c <memset+0xb0>
   23244:	f800283a 	ret

00023248 <_open_r>:
   23248:	defffd04 	addi	sp,sp,-12
   2324c:	dc400115 	stw	r17,4(sp)
   23250:	dc000015 	stw	r16,0(sp)
   23254:	2023883a 	mov	r17,r4
   23258:	040000f4 	movhi	r16,3
   2325c:	84013604 	addi	r16,r16,1240
   23260:	2809883a 	mov	r4,r5
   23264:	300b883a 	mov	r5,r6
   23268:	380d883a 	mov	r6,r7
   2326c:	dfc00215 	stw	ra,8(sp)
   23270:	80000015 	stw	zero,0(r16)
   23274:	002bd280 	call	2bd28 <open>
   23278:	00ffffc4 	movi	r3,-1
   2327c:	10c00526 	beq	r2,r3,23294 <_open_r+0x4c>
   23280:	dfc00217 	ldw	ra,8(sp)
   23284:	dc400117 	ldw	r17,4(sp)
   23288:	dc000017 	ldw	r16,0(sp)
   2328c:	dec00304 	addi	sp,sp,12
   23290:	f800283a 	ret
   23294:	80c00017 	ldw	r3,0(r16)
   23298:	183ff926 	beq	r3,zero,23280 <_open_r+0x38>
   2329c:	88c00015 	stw	r3,0(r17)
   232a0:	dfc00217 	ldw	ra,8(sp)
   232a4:	dc400117 	ldw	r17,4(sp)
   232a8:	dc000017 	ldw	r16,0(sp)
   232ac:	dec00304 	addi	sp,sp,12
   232b0:	f800283a 	ret

000232b4 <_puts_r>:
   232b4:	defff604 	addi	sp,sp,-40
   232b8:	dc400815 	stw	r17,32(sp)
   232bc:	2023883a 	mov	r17,r4
   232c0:	2809883a 	mov	r4,r5
   232c4:	dc000715 	stw	r16,28(sp)
   232c8:	dfc00915 	stw	ra,36(sp)
   232cc:	2821883a 	mov	r16,r5
   232d0:	00236f80 	call	236f8 <strlen>
   232d4:	10c00044 	addi	r3,r2,1
   232d8:	d8800115 	stw	r2,4(sp)
   232dc:	89400217 	ldw	r5,8(r17)
   232e0:	008000f4 	movhi	r2,3
   232e4:	10ba8004 	addi	r2,r2,-5632
   232e8:	d8800215 	stw	r2,8(sp)
   232ec:	00800044 	movi	r2,1
   232f0:	d8800315 	stw	r2,12(sp)
   232f4:	8809883a 	mov	r4,r17
   232f8:	00800084 	movi	r2,2
   232fc:	d9800404 	addi	r6,sp,16
   23300:	dc000015 	stw	r16,0(sp)
   23304:	d8c00615 	stw	r3,24(sp)
   23308:	dec00415 	stw	sp,16(sp)
   2330c:	d8800515 	stw	r2,20(sp)
   23310:	00274280 	call	27428 <__sfvwrite_r>
   23314:	1000061e 	bne	r2,zero,23330 <_puts_r+0x7c>
   23318:	00800284 	movi	r2,10
   2331c:	dfc00917 	ldw	ra,36(sp)
   23320:	dc400817 	ldw	r17,32(sp)
   23324:	dc000717 	ldw	r16,28(sp)
   23328:	dec00a04 	addi	sp,sp,40
   2332c:	f800283a 	ret
   23330:	00bfffc4 	movi	r2,-1
   23334:	003ff906 	br	2331c <_puts_r+0x68>

00023338 <puts>:
   23338:	008000f4 	movhi	r2,3
   2333c:	10be6f04 	addi	r2,r2,-1604
   23340:	200b883a 	mov	r5,r4
   23344:	11000017 	ldw	r4,0(r2)
   23348:	00232b41 	jmpi	232b4 <_puts_r>

0002334c <lflush>:
   2334c:	20c0030b 	ldhu	r3,12(r4)
   23350:	00800244 	movi	r2,9
   23354:	18c0024c 	andi	r3,r3,9
   23358:	18800226 	beq	r3,r2,23364 <lflush+0x18>
   2335c:	0005883a 	mov	r2,zero
   23360:	f800283a 	ret
   23364:	00215881 	jmpi	21588 <fflush>

00023368 <__srefill_r>:
   23368:	defffd04 	addi	sp,sp,-12
   2336c:	dc400115 	stw	r17,4(sp)
   23370:	dc000015 	stw	r16,0(sp)
   23374:	dfc00215 	stw	ra,8(sp)
   23378:	2023883a 	mov	r17,r4
   2337c:	2821883a 	mov	r16,r5
   23380:	20000226 	beq	r4,zero,2338c <__srefill_r+0x24>
   23384:	20800e17 	ldw	r2,56(r4)
   23388:	10004426 	beq	r2,zero,2349c <__srefill_r+0x134>
   2338c:	8080030b 	ldhu	r2,12(r16)
   23390:	80000115 	stw	zero,4(r16)
   23394:	10c0080c 	andi	r3,r2,32
   23398:	18ffffcc 	andi	r3,r3,65535
   2339c:	18e0001c 	xori	r3,r3,32768
   233a0:	18e00004 	addi	r3,r3,-32768
   233a4:	1800371e 	bne	r3,zero,23484 <__srefill_r+0x11c>
   233a8:	10c0010c 	andi	r3,r2,4
   233ac:	18ffffcc 	andi	r3,r3,65535
   233b0:	18e0001c 	xori	r3,r3,32768
   233b4:	18e00004 	addi	r3,r3,-32768
   233b8:	18002226 	beq	r3,zero,23444 <__srefill_r+0xdc>
   233bc:	81400c17 	ldw	r5,48(r16)
   233c0:	28000826 	beq	r5,zero,233e4 <__srefill_r+0x7c>
   233c4:	80801004 	addi	r2,r16,64
   233c8:	28800226 	beq	r5,r2,233d4 <__srefill_r+0x6c>
   233cc:	8809883a 	mov	r4,r17
   233d0:	0021cd80 	call	21cd8 <_free_r>
   233d4:	80800f17 	ldw	r2,60(r16)
   233d8:	80000c15 	stw	zero,48(r16)
   233dc:	80800115 	stw	r2,4(r16)
   233e0:	1000401e 	bne	r2,zero,234e4 <__srefill_r+0x17c>
   233e4:	80800417 	ldw	r2,16(r16)
   233e8:	10005026 	beq	r2,zero,2352c <__srefill_r+0x1c4>
   233ec:	8080030b 	ldhu	r2,12(r16)
   233f0:	108000cc 	andi	r2,r2,3
   233f4:	10002b1e 	bne	r2,zero,234a4 <__srefill_r+0x13c>
   233f8:	81800417 	ldw	r6,16(r16)
   233fc:	80800817 	ldw	r2,32(r16)
   23400:	81400717 	ldw	r5,28(r16)
   23404:	81c00517 	ldw	r7,20(r16)
   23408:	8809883a 	mov	r4,r17
   2340c:	81800015 	stw	r6,0(r16)
   23410:	103ee83a 	callr	r2
   23414:	8100030b 	ldhu	r4,12(r16)
   23418:	00f7ffc4 	movi	r3,-8193
   2341c:	80800115 	stw	r2,4(r16)
   23420:	20c6703a 	and	r3,r4,r3
   23424:	80c0030d 	sth	r3,12(r16)
   23428:	0080130e 	bge	zero,r2,23478 <__srefill_r+0x110>
   2342c:	0005883a 	mov	r2,zero
   23430:	dfc00217 	ldw	ra,8(sp)
   23434:	dc400117 	ldw	r17,4(sp)
   23438:	dc000017 	ldw	r16,0(sp)
   2343c:	dec00304 	addi	sp,sp,12
   23440:	f800283a 	ret
   23444:	10c0040c 	andi	r3,r2,16
   23448:	18ffffcc 	andi	r3,r3,65535
   2344c:	18e0001c 	xori	r3,r3,32768
   23450:	18e00004 	addi	r3,r3,-32768
   23454:	18003926 	beq	r3,zero,2353c <__srefill_r+0x1d4>
   23458:	10c0020c 	andi	r3,r2,8
   2345c:	18ffffcc 	andi	r3,r3,65535
   23460:	18e0001c 	xori	r3,r3,32768
   23464:	18e00004 	addi	r3,r3,-32768
   23468:	1800261e 	bne	r3,zero,23504 <__srefill_r+0x19c>
   2346c:	10800114 	ori	r2,r2,4
   23470:	8080030d 	sth	r2,12(r16)
   23474:	003fdb06 	br	233e4 <__srefill_r+0x7c>
   23478:	1000111e 	bne	r2,zero,234c0 <__srefill_r+0x158>
   2347c:	18c00814 	ori	r3,r3,32
   23480:	80c0030d 	sth	r3,12(r16)
   23484:	00bfffc4 	movi	r2,-1
   23488:	dfc00217 	ldw	ra,8(sp)
   2348c:	dc400117 	ldw	r17,4(sp)
   23490:	dc000017 	ldw	r16,0(sp)
   23494:	dec00304 	addi	sp,sp,12
   23498:	f800283a 	ret
   2349c:	00217bc0 	call	217bc <__sinit>
   234a0:	003fba06 	br	2338c <__srefill_r+0x24>
   234a4:	008000f4 	movhi	r2,3
   234a8:	10be6e04 	addi	r2,r2,-1608
   234ac:	11000017 	ldw	r4,0(r2)
   234b0:	014000b4 	movhi	r5,2
   234b4:	294cd304 	addi	r5,r5,13132
   234b8:	00224a80 	call	224a8 <_fwalk>
   234bc:	003fce06 	br	233f8 <__srefill_r+0x90>
   234c0:	18c01014 	ori	r3,r3,64
   234c4:	00bfffc4 	movi	r2,-1
   234c8:	80000115 	stw	zero,4(r16)
   234cc:	80c0030d 	sth	r3,12(r16)
   234d0:	dfc00217 	ldw	ra,8(sp)
   234d4:	dc400117 	ldw	r17,4(sp)
   234d8:	dc000017 	ldw	r16,0(sp)
   234dc:	dec00304 	addi	sp,sp,12
   234e0:	f800283a 	ret
   234e4:	80c00e17 	ldw	r3,56(r16)
   234e8:	0005883a 	mov	r2,zero
   234ec:	80c00015 	stw	r3,0(r16)
   234f0:	dfc00217 	ldw	ra,8(sp)
   234f4:	dc400117 	ldw	r17,4(sp)
   234f8:	dc000017 	ldw	r16,0(sp)
   234fc:	dec00304 	addi	sp,sp,12
   23500:	f800283a 	ret
   23504:	8809883a 	mov	r4,r17
   23508:	800b883a 	mov	r5,r16
   2350c:	00213a00 	call	213a0 <_fflush_r>
   23510:	103fdc1e 	bne	r2,zero,23484 <__srefill_r+0x11c>
   23514:	8080030b 	ldhu	r2,12(r16)
   23518:	00fffdc4 	movi	r3,-9
   2351c:	80000215 	stw	zero,8(r16)
   23520:	1884703a 	and	r2,r3,r2
   23524:	80000615 	stw	zero,24(r16)
   23528:	003fd006 	br	2346c <__srefill_r+0x104>
   2352c:	8809883a 	mov	r4,r17
   23530:	800b883a 	mov	r5,r16
   23534:	00226080 	call	22608 <__smakebuf_r>
   23538:	003fac06 	br	233ec <__srefill_r+0x84>
   2353c:	00c00244 	movi	r3,9
   23540:	10801014 	ori	r2,r2,64
   23544:	88c00015 	stw	r3,0(r17)
   23548:	8080030d 	sth	r2,12(r16)
   2354c:	00bfffc4 	movi	r2,-1
   23550:	003fb706 	br	23430 <__srefill_r+0xc8>

00023554 <_sbrk_r>:
   23554:	defffd04 	addi	sp,sp,-12
   23558:	dc400115 	stw	r17,4(sp)
   2355c:	dc000015 	stw	r16,0(sp)
   23560:	2023883a 	mov	r17,r4
   23564:	040000f4 	movhi	r16,3
   23568:	84013604 	addi	r16,r16,1240
   2356c:	2809883a 	mov	r4,r5
   23570:	dfc00215 	stw	ra,8(sp)
   23574:	80000015 	stw	zero,0(r16)
   23578:	002c0440 	call	2c044 <sbrk>
   2357c:	00ffffc4 	movi	r3,-1
   23580:	10c00526 	beq	r2,r3,23598 <_sbrk_r+0x44>
   23584:	dfc00217 	ldw	ra,8(sp)
   23588:	dc400117 	ldw	r17,4(sp)
   2358c:	dc000017 	ldw	r16,0(sp)
   23590:	dec00304 	addi	sp,sp,12
   23594:	f800283a 	ret
   23598:	80c00017 	ldw	r3,0(r16)
   2359c:	183ff926 	beq	r3,zero,23584 <_sbrk_r+0x30>
   235a0:	88c00015 	stw	r3,0(r17)
   235a4:	dfc00217 	ldw	ra,8(sp)
   235a8:	dc400117 	ldw	r17,4(sp)
   235ac:	dc000017 	ldw	r16,0(sp)
   235b0:	dec00304 	addi	sp,sp,12
   235b4:	f800283a 	ret

000235b8 <__sread>:
   235b8:	defffe04 	addi	sp,sp,-8
   235bc:	dc000015 	stw	r16,0(sp)
   235c0:	2821883a 	mov	r16,r5
   235c4:	2940038f 	ldh	r5,14(r5)
   235c8:	dfc00115 	stw	ra,4(sp)
   235cc:	0028c940 	call	28c94 <_read_r>
   235d0:	10000716 	blt	r2,zero,235f0 <__sread+0x38>
   235d4:	80c01417 	ldw	r3,80(r16)
   235d8:	1887883a 	add	r3,r3,r2
   235dc:	80c01415 	stw	r3,80(r16)
   235e0:	dfc00117 	ldw	ra,4(sp)
   235e4:	dc000017 	ldw	r16,0(sp)
   235e8:	dec00204 	addi	sp,sp,8
   235ec:	f800283a 	ret
   235f0:	80c0030b 	ldhu	r3,12(r16)
   235f4:	18fbffcc 	andi	r3,r3,61439
   235f8:	80c0030d 	sth	r3,12(r16)
   235fc:	dfc00117 	ldw	ra,4(sp)
   23600:	dc000017 	ldw	r16,0(sp)
   23604:	dec00204 	addi	sp,sp,8
   23608:	f800283a 	ret

0002360c <__swrite>:
   2360c:	2880030b 	ldhu	r2,12(r5)
   23610:	defffb04 	addi	sp,sp,-20
   23614:	dcc00315 	stw	r19,12(sp)
   23618:	10c0400c 	andi	r3,r2,256
   2361c:	18ffffcc 	andi	r3,r3,65535
   23620:	18e0001c 	xori	r3,r3,32768
   23624:	dc800215 	stw	r18,8(sp)
   23628:	dc400115 	stw	r17,4(sp)
   2362c:	dc000015 	stw	r16,0(sp)
   23630:	dfc00415 	stw	ra,16(sp)
   23634:	18e00004 	addi	r3,r3,-32768
   23638:	2821883a 	mov	r16,r5
   2363c:	2027883a 	mov	r19,r4
   23640:	3025883a 	mov	r18,r6
   23644:	3823883a 	mov	r17,r7
   23648:	18000526 	beq	r3,zero,23660 <__swrite+0x54>
   2364c:	2940038f 	ldh	r5,14(r5)
   23650:	000d883a 	mov	r6,zero
   23654:	01c00084 	movi	r7,2
   23658:	0027a4c0 	call	27a4c <_lseek_r>
   2365c:	8080030b 	ldhu	r2,12(r16)
   23660:	8140038f 	ldh	r5,14(r16)
   23664:	10bbffcc 	andi	r2,r2,61439
   23668:	9809883a 	mov	r4,r19
   2366c:	900d883a 	mov	r6,r18
   23670:	880f883a 	mov	r7,r17
   23674:	8080030d 	sth	r2,12(r16)
   23678:	dfc00417 	ldw	ra,16(sp)
   2367c:	dcc00317 	ldw	r19,12(sp)
   23680:	dc800217 	ldw	r18,8(sp)
   23684:	dc400117 	ldw	r17,4(sp)
   23688:	dc000017 	ldw	r16,0(sp)
   2368c:	dec00504 	addi	sp,sp,20
   23690:	00258f41 	jmpi	258f4 <_write_r>

00023694 <__sseek>:
   23694:	defffe04 	addi	sp,sp,-8
   23698:	dc000015 	stw	r16,0(sp)
   2369c:	2821883a 	mov	r16,r5
   236a0:	2940038f 	ldh	r5,14(r5)
   236a4:	dfc00115 	stw	ra,4(sp)
   236a8:	0027a4c0 	call	27a4c <_lseek_r>
   236ac:	00ffffc4 	movi	r3,-1
   236b0:	10c00826 	beq	r2,r3,236d4 <__sseek+0x40>
   236b4:	80c0030b 	ldhu	r3,12(r16)
   236b8:	80801415 	stw	r2,80(r16)
   236bc:	18c40014 	ori	r3,r3,4096
   236c0:	80c0030d 	sth	r3,12(r16)
   236c4:	dfc00117 	ldw	ra,4(sp)
   236c8:	dc000017 	ldw	r16,0(sp)
   236cc:	dec00204 	addi	sp,sp,8
   236d0:	f800283a 	ret
   236d4:	80c0030b 	ldhu	r3,12(r16)
   236d8:	18fbffcc 	andi	r3,r3,61439
   236dc:	80c0030d 	sth	r3,12(r16)
   236e0:	dfc00117 	ldw	ra,4(sp)
   236e4:	dc000017 	ldw	r16,0(sp)
   236e8:	dec00204 	addi	sp,sp,8
   236ec:	f800283a 	ret

000236f0 <__sclose>:
   236f0:	2940038f 	ldh	r5,14(r5)
   236f4:	0025ad41 	jmpi	25ad4 <_close_r>

000236f8 <strlen>:
   236f8:	208000cc 	andi	r2,r4,3
   236fc:	10001f1e 	bne	r2,zero,2377c <strlen+0x84>
   23700:	20800017 	ldw	r2,0(r4)
   23704:	01ffbff4 	movhi	r7,65279
   23708:	39ffbfc4 	addi	r7,r7,-257
   2370c:	01a02074 	movhi	r6,32897
   23710:	31a02004 	addi	r6,r6,-32640
   23714:	11c7883a 	add	r3,r2,r7
   23718:	0084303a 	nor	r2,zero,r2
   2371c:	1886703a 	and	r3,r3,r2
   23720:	1986703a 	and	r3,r3,r6
   23724:	2005883a 	mov	r2,r4
   23728:	1800101e 	bne	r3,zero,2376c <strlen+0x74>
   2372c:	10800104 	addi	r2,r2,4
   23730:	10c00017 	ldw	r3,0(r2)
   23734:	19cb883a 	add	r5,r3,r7
   23738:	00c6303a 	nor	r3,zero,r3
   2373c:	28c6703a 	and	r3,r5,r3
   23740:	1986703a 	and	r3,r3,r6
   23744:	1800091e 	bne	r3,zero,2376c <strlen+0x74>
   23748:	10800104 	addi	r2,r2,4
   2374c:	10c00017 	ldw	r3,0(r2)
   23750:	19cb883a 	add	r5,r3,r7
   23754:	00c6303a 	nor	r3,zero,r3
   23758:	28c6703a 	and	r3,r5,r3
   2375c:	1986703a 	and	r3,r3,r6
   23760:	183ff226 	beq	r3,zero,2372c <strlen+0x34>
   23764:	00000106 	br	2376c <strlen+0x74>
   23768:	10800044 	addi	r2,r2,1
   2376c:	10c00007 	ldb	r3,0(r2)
   23770:	183ffd1e 	bne	r3,zero,23768 <strlen+0x70>
   23774:	1105c83a 	sub	r2,r2,r4
   23778:	f800283a 	ret
   2377c:	2005883a 	mov	r2,r4
   23780:	003ffa06 	br	2376c <strlen+0x74>

00023784 <_strtol_r>:
   23784:	defff304 	addi	sp,sp,-52
   23788:	008000f4 	movhi	r2,3
   2378c:	10be7204 	addi	r2,r2,-1592
   23790:	df000b15 	stw	fp,44(sp)
   23794:	17000017 	ldw	fp,0(r2)
   23798:	ddc00a15 	stw	r23,40(sp)
   2379c:	dd000715 	stw	r20,28(sp)
   237a0:	dcc00615 	stw	r19,24(sp)
   237a4:	dc000315 	stw	r16,12(sp)
   237a8:	dfc00c15 	stw	ra,48(sp)
   237ac:	dd800915 	stw	r22,36(sp)
   237b0:	dd400815 	stw	r21,32(sp)
   237b4:	dc800515 	stw	r18,20(sp)
   237b8:	dc400415 	stw	r17,16(sp)
   237bc:	2827883a 	mov	r19,r5
   237c0:	d9000215 	stw	r4,8(sp)
   237c4:	3029883a 	mov	r20,r6
   237c8:	382f883a 	mov	r23,r7
   237cc:	2821883a 	mov	r16,r5
   237d0:	84400007 	ldb	r17,0(r16)
   237d4:	84000044 	addi	r16,r16,1
   237d8:	e445883a 	add	r2,fp,r17
   237dc:	10800003 	ldbu	r2,0(r2)
   237e0:	1080020c 	andi	r2,r2,8
   237e4:	10803fcc 	andi	r2,r2,255
   237e8:	1080201c 	xori	r2,r2,128
   237ec:	10bfe004 	addi	r2,r2,-128
   237f0:	103ff71e 	bne	r2,zero,237d0 <_strtol_r+0x4c>
   237f4:	00800b44 	movi	r2,45
   237f8:	88806d26 	beq	r17,r2,239b0 <_strtol_r+0x22c>
   237fc:	00800ac4 	movi	r2,43
   23800:	88807026 	beq	r17,r2,239c4 <_strtol_r+0x240>
   23804:	d8000015 	stw	zero,0(sp)
   23808:	b800471e 	bne	r23,zero,23928 <_strtol_r+0x1a4>
   2380c:	00800c04 	movi	r2,48
   23810:	88804926 	beq	r17,r2,23938 <_strtol_r+0x1b4>
   23814:	05c00284 	movi	r23,10
   23818:	b825883a 	mov	r18,r23
   2381c:	d9000017 	ldw	r4,0(sp)
   23820:	20006026 	beq	r4,zero,239a4 <_strtol_r+0x220>
   23824:	05600034 	movhi	r21,32768
   23828:	a809883a 	mov	r4,r21
   2382c:	900b883a 	mov	r5,r18
   23830:	002afb00 	call	2afb0 <__umodsi3>
   23834:	a809883a 	mov	r4,r21
   23838:	900b883a 	mov	r5,r18
   2383c:	d8800115 	stw	r2,4(sp)
   23840:	002afa80 	call	2afa8 <__udivsi3>
   23844:	e447883a 	add	r3,fp,r17
   23848:	18c00003 	ldbu	r3,0(r3)
   2384c:	102b883a 	mov	r21,r2
   23850:	000d883a 	mov	r6,zero
   23854:	1940010c 	andi	r5,r3,4
   23858:	29403fcc 	andi	r5,r5,255
   2385c:	2940201c 	xori	r5,r5,128
   23860:	297fe004 	addi	r5,r5,-128
   23864:	0009883a 	mov	r4,zero
   23868:	05bfffc4 	movi	r22,-1
   2386c:	28001226 	beq	r5,zero,238b8 <_strtol_r+0x134>
   23870:	8c7ff404 	addi	r17,r17,-48
   23874:	8dc0170e 	bge	r17,r23,238d4 <_strtol_r+0x150>
   23878:	35800626 	beq	r6,r22,23894 <_strtol_r+0x110>
   2387c:	a9003a36 	bltu	r21,r4,23968 <_strtol_r+0x1e4>
   23880:	25403726 	beq	r4,r21,23960 <_strtol_r+0x1dc>
   23884:	900b883a 	mov	r5,r18
   23888:	00212100 	call	21210 <__mulsi3>
   2388c:	8889883a 	add	r4,r17,r2
   23890:	01800044 	movi	r6,1
   23894:	84400007 	ldb	r17,0(r16)
   23898:	84000044 	addi	r16,r16,1
   2389c:	e447883a 	add	r3,fp,r17
   238a0:	18c00003 	ldbu	r3,0(r3)
   238a4:	1940010c 	andi	r5,r3,4
   238a8:	29403fcc 	andi	r5,r5,255
   238ac:	2940201c 	xori	r5,r5,128
   238b0:	297fe004 	addi	r5,r5,-128
   238b4:	283fee1e 	bne	r5,zero,23870 <_strtol_r+0xec>
   238b8:	188000cc 	andi	r2,r3,3
   238bc:	10000526 	beq	r2,zero,238d4 <_strtol_r+0x150>
   238c0:	18c0004c 	andi	r3,r3,1
   238c4:	18002a26 	beq	r3,zero,23970 <_strtol_r+0x1ec>
   238c8:	00800dc4 	movi	r2,55
   238cc:	88a3c83a 	sub	r17,r17,r2
   238d0:	8dffe916 	blt	r17,r23,23878 <_strtol_r+0xf4>
   238d4:	00bfffc4 	movi	r2,-1
   238d8:	30802826 	beq	r6,r2,2397c <_strtol_r+0x1f8>
   238dc:	d8800017 	ldw	r2,0(sp)
   238e0:	10000126 	beq	r2,zero,238e8 <_strtol_r+0x164>
   238e4:	0109c83a 	sub	r4,zero,r4
   238e8:	2005883a 	mov	r2,r4
   238ec:	a0000226 	beq	r20,zero,238f8 <_strtol_r+0x174>
   238f0:	30002a1e 	bne	r6,zero,2399c <_strtol_r+0x218>
   238f4:	a4c00015 	stw	r19,0(r20)
   238f8:	dfc00c17 	ldw	ra,48(sp)
   238fc:	df000b17 	ldw	fp,44(sp)
   23900:	ddc00a17 	ldw	r23,40(sp)
   23904:	dd800917 	ldw	r22,36(sp)
   23908:	dd400817 	ldw	r21,32(sp)
   2390c:	dd000717 	ldw	r20,28(sp)
   23910:	dcc00617 	ldw	r19,24(sp)
   23914:	dc800517 	ldw	r18,20(sp)
   23918:	dc400417 	ldw	r17,16(sp)
   2391c:	dc000317 	ldw	r16,12(sp)
   23920:	dec00d04 	addi	sp,sp,52
   23924:	f800283a 	ret
   23928:	00800404 	movi	r2,16
   2392c:	b8bfba1e 	bne	r23,r2,23818 <_strtol_r+0x94>
   23930:	00800c04 	movi	r2,48
   23934:	88bfb81e 	bne	r17,r2,23818 <_strtol_r+0x94>
   23938:	80800007 	ldb	r2,0(r16)
   2393c:	00c01e04 	movi	r3,120
   23940:	10c02626 	beq	r2,r3,239dc <_strtol_r+0x258>
   23944:	00c01604 	movi	r3,88
   23948:	10c02426 	beq	r2,r3,239dc <_strtol_r+0x258>
   2394c:	b800281e 	bne	r23,zero,239f0 <_strtol_r+0x26c>
   23950:	04800204 	movi	r18,8
   23954:	04400c04 	movi	r17,48
   23958:	902f883a 	mov	r23,r18
   2395c:	003faf06 	br	2381c <_strtol_r+0x98>
   23960:	d8800117 	ldw	r2,4(sp)
   23964:	147fc70e 	bge	r2,r17,23884 <_strtol_r+0x100>
   23968:	01bfffc4 	movi	r6,-1
   2396c:	003fc906 	br	23894 <_strtol_r+0x110>
   23970:	008015c4 	movi	r2,87
   23974:	88a3c83a 	sub	r17,r17,r2
   23978:	003fd506 	br	238d0 <_strtol_r+0x14c>
   2397c:	d9000017 	ldw	r4,0(sp)
   23980:	2000141e 	bne	r4,zero,239d4 <_strtol_r+0x250>
   23984:	00a00034 	movhi	r2,32768
   23988:	10bfffc4 	addi	r2,r2,-1
   2398c:	d9000217 	ldw	r4,8(sp)
   23990:	00c00884 	movi	r3,34
   23994:	20c00015 	stw	r3,0(r4)
   23998:	a03fd726 	beq	r20,zero,238f8 <_strtol_r+0x174>
   2399c:	84ffffc4 	addi	r19,r16,-1
   239a0:	003fd406 	br	238f4 <_strtol_r+0x170>
   239a4:	05600034 	movhi	r21,32768
   239a8:	ad7fffc4 	addi	r21,r21,-1
   239ac:	003f9e06 	br	23828 <_strtol_r+0xa4>
   239b0:	00800044 	movi	r2,1
   239b4:	84400007 	ldb	r17,0(r16)
   239b8:	d8800015 	stw	r2,0(sp)
   239bc:	80a1883a 	add	r16,r16,r2
   239c0:	003f9106 	br	23808 <_strtol_r+0x84>
   239c4:	84400007 	ldb	r17,0(r16)
   239c8:	d8000015 	stw	zero,0(sp)
   239cc:	84000044 	addi	r16,r16,1
   239d0:	003f8d06 	br	23808 <_strtol_r+0x84>
   239d4:	00a00034 	movhi	r2,32768
   239d8:	003fec06 	br	2398c <_strtol_r+0x208>
   239dc:	04800404 	movi	r18,16
   239e0:	84400047 	ldb	r17,1(r16)
   239e4:	902f883a 	mov	r23,r18
   239e8:	84000084 	addi	r16,r16,2
   239ec:	003f8b06 	br	2381c <_strtol_r+0x98>
   239f0:	b825883a 	mov	r18,r23
   239f4:	04400c04 	movi	r17,48
   239f8:	003f8806 	br	2381c <_strtol_r+0x98>

000239fc <strtol>:
   239fc:	008000f4 	movhi	r2,3
   23a00:	10be6f04 	addi	r2,r2,-1604
   23a04:	2007883a 	mov	r3,r4
   23a08:	11000017 	ldw	r4,0(r2)
   23a0c:	2805883a 	mov	r2,r5
   23a10:	300f883a 	mov	r7,r6
   23a14:	180b883a 	mov	r5,r3
   23a18:	100d883a 	mov	r6,r2
   23a1c:	00237841 	jmpi	23784 <_strtol_r>

00023a20 <__sprint_r>:
   23a20:	30800217 	ldw	r2,8(r6)
   23a24:	defffe04 	addi	sp,sp,-8
   23a28:	dc000015 	stw	r16,0(sp)
   23a2c:	dfc00115 	stw	ra,4(sp)
   23a30:	3021883a 	mov	r16,r6
   23a34:	10000226 	beq	r2,zero,23a40 <__sprint_r+0x20>
   23a38:	00274280 	call	27428 <__sfvwrite_r>
   23a3c:	80000215 	stw	zero,8(r16)
   23a40:	80000115 	stw	zero,4(r16)
   23a44:	dfc00117 	ldw	ra,4(sp)
   23a48:	dc000017 	ldw	r16,0(sp)
   23a4c:	dec00204 	addi	sp,sp,8
   23a50:	f800283a 	ret

00023a54 <___vfprintf_internal_r>:
   23a54:	defeb904 	addi	sp,sp,-1308
   23a58:	dc013d15 	stw	r16,1268(sp)
   23a5c:	d9013015 	stw	r4,1216(sp)
   23a60:	dfc14615 	stw	ra,1304(sp)
   23a64:	df014515 	stw	fp,1300(sp)
   23a68:	ddc14415 	stw	r23,1296(sp)
   23a6c:	dd814315 	stw	r22,1292(sp)
   23a70:	dd414215 	stw	r21,1288(sp)
   23a74:	dd014115 	stw	r20,1284(sp)
   23a78:	dcc14015 	stw	r19,1280(sp)
   23a7c:	dc813f15 	stw	r18,1276(sp)
   23a80:	dc413e15 	stw	r17,1272(sp)
   23a84:	d9412915 	stw	r5,1188(sp)
   23a88:	3021883a 	mov	r16,r6
   23a8c:	d9c12d15 	stw	r7,1204(sp)
   23a90:	0027a180 	call	27a18 <_localeconv_r>
   23a94:	10800017 	ldw	r2,0(r2)
   23a98:	d9013017 	ldw	r4,1216(sp)
   23a9c:	d8013315 	stw	zero,1228(sp)
   23aa0:	d8813715 	stw	r2,1244(sp)
   23aa4:	d8013415 	stw	zero,1232(sp)
   23aa8:	20000226 	beq	r4,zero,23ab4 <___vfprintf_internal_r+0x60>
   23aac:	20800e17 	ldw	r2,56(r4)
   23ab0:	10014b26 	beq	r2,zero,23fe0 <___vfprintf_internal_r+0x58c>
   23ab4:	d8c12917 	ldw	r3,1188(sp)
   23ab8:	1880030b 	ldhu	r2,12(r3)
   23abc:	10c0020c 	andi	r3,r2,8
   23ac0:	18ffffcc 	andi	r3,r3,65535
   23ac4:	18e0001c 	xori	r3,r3,32768
   23ac8:	18e00004 	addi	r3,r3,-32768
   23acc:	1800ed26 	beq	r3,zero,23e84 <___vfprintf_internal_r+0x430>
   23ad0:	d9012917 	ldw	r4,1188(sp)
   23ad4:	20c00417 	ldw	r3,16(r4)
   23ad8:	1800ea26 	beq	r3,zero,23e84 <___vfprintf_internal_r+0x430>
   23adc:	1100068c 	andi	r4,r2,26
   23ae0:	00c00284 	movi	r3,10
   23ae4:	20c0f026 	beq	r4,r3,23ea8 <___vfprintf_internal_r+0x454>
   23ae8:	d9010dc4 	addi	r4,sp,1079
   23aec:	d8810e04 	addi	r2,sp,1080
   23af0:	dc413017 	ldw	r17,1216(sp)
   23af4:	d8c00404 	addi	r3,sp,16
   23af8:	d9012615 	stw	r4,1176(sp)
   23afc:	1109c83a 	sub	r4,r2,r4
   23b00:	d8812715 	stw	r2,1180(sp)
   23b04:	d8c11b15 	stw	r3,1132(sp)
   23b08:	d8011d15 	stw	zero,1140(sp)
   23b0c:	d8011c15 	stw	zero,1136(sp)
   23b10:	802b883a 	mov	r21,r16
   23b14:	d8013215 	stw	zero,1224(sp)
   23b18:	d8013615 	stw	zero,1240(sp)
   23b1c:	d8013515 	stw	zero,1236(sp)
   23b20:	d8012c15 	stw	zero,1200(sp)
   23b24:	1813883a 	mov	r9,r3
   23b28:	d9013915 	stw	r4,1252(sp)
   23b2c:	a8800007 	ldb	r2,0(r21)
   23b30:	1002f326 	beq	r2,zero,24700 <___vfprintf_internal_r+0xcac>
   23b34:	00c00944 	movi	r3,37
   23b38:	a825883a 	mov	r18,r21
   23b3c:	10c0021e 	bne	r2,r3,23b48 <___vfprintf_internal_r+0xf4>
   23b40:	00001406 	br	23b94 <___vfprintf_internal_r+0x140>
   23b44:	10c00326 	beq	r2,r3,23b54 <___vfprintf_internal_r+0x100>
   23b48:	94800044 	addi	r18,r18,1
   23b4c:	90800007 	ldb	r2,0(r18)
   23b50:	103ffc1e 	bne	r2,zero,23b44 <___vfprintf_internal_r+0xf0>
   23b54:	9561c83a 	sub	r16,r18,r21
   23b58:	80000e26 	beq	r16,zero,23b94 <___vfprintf_internal_r+0x140>
   23b5c:	da011d17 	ldw	r8,1140(sp)
   23b60:	d8c11c17 	ldw	r3,1136(sp)
   23b64:	4d400015 	stw	r21,0(r9)
   23b68:	4c000115 	stw	r16,4(r9)
   23b6c:	4411883a 	add	r8,r8,r16
   23b70:	18c00044 	addi	r3,r3,1
   23b74:	da011d15 	stw	r8,1140(sp)
   23b78:	d8c11c15 	stw	r3,1136(sp)
   23b7c:	008001c4 	movi	r2,7
   23b80:	10c11016 	blt	r2,r3,23fc4 <___vfprintf_internal_r+0x570>
   23b84:	4a400204 	addi	r9,r9,8
   23b88:	d8812c17 	ldw	r2,1200(sp)
   23b8c:	1405883a 	add	r2,r2,r16
   23b90:	d8812c15 	stw	r2,1200(sp)
   23b94:	90800007 	ldb	r2,0(r18)
   23b98:	1000ee26 	beq	r2,zero,23f54 <___vfprintf_internal_r+0x500>
   23b9c:	95400044 	addi	r21,r18,1
   23ba0:	94800047 	ldb	r18,1(r18)
   23ba4:	073fffc4 	movi	fp,-1
   23ba8:	e007883a 	mov	r3,fp
   23bac:	d8012585 	stb	zero,1174(sp)
   23bb0:	d8012e15 	stw	zero,1208(sp)
   23bb4:	0021883a 	mov	r16,zero
   23bb8:	05001604 	movi	r20,88
   23bbc:	04c00244 	movi	r19,9
   23bc0:	4839883a 	mov	fp,r9
   23bc4:	ad400044 	addi	r21,r21,1
   23bc8:	90bff804 	addi	r2,r18,-32
   23bcc:	a080462e 	bgeu	r20,r2,23ce8 <___vfprintf_internal_r+0x294>
   23bd0:	e013883a 	mov	r9,fp
   23bd4:	9000df26 	beq	r18,zero,23f54 <___vfprintf_internal_r+0x500>
   23bd8:	00c00044 	movi	r3,1
   23bdc:	d8c12815 	stw	r3,1184(sp)
   23be0:	dc810405 	stb	r18,1040(sp)
   23be4:	d8012585 	stb	zero,1174(sp)
   23be8:	d8c12b15 	stw	r3,1196(sp)
   23bec:	dcc10404 	addi	r19,sp,1040
   23bf0:	d8013115 	stw	zero,1220(sp)
   23bf4:	80c0008c 	andi	r3,r16,2
   23bf8:	d8c12a15 	stw	r3,1192(sp)
   23bfc:	18000326 	beq	r3,zero,23c0c <___vfprintf_internal_r+0x1b8>
   23c00:	d8c12817 	ldw	r3,1184(sp)
   23c04:	18c00084 	addi	r3,r3,2
   23c08:	d8c12815 	stw	r3,1184(sp)
   23c0c:	80c0210c 	andi	r3,r16,132
   23c10:	d8c12f15 	stw	r3,1212(sp)
   23c14:	1802251e 	bne	r3,zero,244ac <___vfprintf_internal_r+0xa58>
   23c18:	d9012e17 	ldw	r4,1208(sp)
   23c1c:	d8c12817 	ldw	r3,1184(sp)
   23c20:	20edc83a 	sub	r22,r4,r3
   23c24:	0582210e 	bge	zero,r22,244ac <___vfprintf_internal_r+0xa58>
   23c28:	02800404 	movi	r10,16
   23c2c:	da011d17 	ldw	r8,1140(sp)
   23c30:	d8c11c17 	ldw	r3,1136(sp)
   23c34:	05c000f4 	movhi	r23,3
   23c38:	bdfa9184 	addi	r23,r23,-5562
   23c3c:	5580200e 	bge	r10,r22,23cc0 <___vfprintf_internal_r+0x26c>
   23c40:	dc813815 	stw	r18,1248(sp)
   23c44:	5039883a 	mov	fp,r10
   23c48:	b825883a 	mov	r18,r23
   23c4c:	050001c4 	movi	r20,7
   23c50:	b02f883a 	mov	r23,r22
   23c54:	802d883a 	mov	r22,r16
   23c58:	dc012917 	ldw	r16,1188(sp)
   23c5c:	00000306 	br	23c6c <___vfprintf_internal_r+0x218>
   23c60:	bdfffc04 	addi	r23,r23,-16
   23c64:	4a400204 	addi	r9,r9,8
   23c68:	e5c0110e 	bge	fp,r23,23cb0 <___vfprintf_internal_r+0x25c>
   23c6c:	4c800015 	stw	r18,0(r9)
   23c70:	4f000115 	stw	fp,4(r9)
   23c74:	42000404 	addi	r8,r8,16
   23c78:	18c00044 	addi	r3,r3,1
   23c7c:	da011d15 	stw	r8,1140(sp)
   23c80:	d8c11c15 	stw	r3,1136(sp)
   23c84:	a0fff60e 	bge	r20,r3,23c60 <___vfprintf_internal_r+0x20c>
   23c88:	8809883a 	mov	r4,r17
   23c8c:	800b883a 	mov	r5,r16
   23c90:	d9811b04 	addi	r6,sp,1132
   23c94:	0023a200 	call	23a20 <__sprint_r>
   23c98:	1000b41e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   23c9c:	bdfffc04 	addi	r23,r23,-16
   23ca0:	da011d17 	ldw	r8,1140(sp)
   23ca4:	d8c11c17 	ldw	r3,1136(sp)
   23ca8:	da400404 	addi	r9,sp,16
   23cac:	e5ffef16 	blt	fp,r23,23c6c <___vfprintf_internal_r+0x218>
   23cb0:	b021883a 	mov	r16,r22
   23cb4:	b82d883a 	mov	r22,r23
   23cb8:	902f883a 	mov	r23,r18
   23cbc:	dc813817 	ldw	r18,1248(sp)
   23cc0:	4dc00015 	stw	r23,0(r9)
   23cc4:	4d800115 	stw	r22,4(r9)
   23cc8:	4591883a 	add	r8,r8,r22
   23ccc:	18c00044 	addi	r3,r3,1
   23cd0:	da011d15 	stw	r8,1140(sp)
   23cd4:	d8c11c15 	stw	r3,1136(sp)
   23cd8:	008001c4 	movi	r2,7
   23cdc:	10c3fe16 	blt	r2,r3,24cd8 <___vfprintf_internal_r+0x1284>
   23ce0:	4a400204 	addi	r9,r9,8
   23ce4:	0001f306 	br	244b4 <___vfprintf_internal_r+0xa60>
   23ce8:	1085883a 	add	r2,r2,r2
   23cec:	1085883a 	add	r2,r2,r2
   23cf0:	010000b4 	movhi	r4,2
   23cf4:	210f4104 	addi	r4,r4,15620
   23cf8:	1105883a 	add	r2,r2,r4
   23cfc:	10800017 	ldw	r2,0(r2)
   23d00:	1000683a 	jmp	r2
   23d04:	000243e0 	cmpeqi	zero,zero,2319
   23d08:	00023bd0 	cmplti	zero,zero,2287
   23d0c:	00023bd0 	cmplti	zero,zero,2287
   23d10:	000243f8 	rdprs	zero,zero,2319
   23d14:	00023bd0 	cmplti	zero,zero,2287
   23d18:	00023bd0 	cmplti	zero,zero,2287
   23d1c:	00023bd0 	cmplti	zero,zero,2287
   23d20:	00023bd0 	cmplti	zero,zero,2287
   23d24:	00023bd0 	cmplti	zero,zero,2287
   23d28:	00023bd0 	cmplti	zero,zero,2287
   23d2c:	000242b0 	cmpltui	zero,zero,2314
   23d30:	00024444 	movi	zero,2321
   23d34:	00023bd0 	cmplti	zero,zero,2287
   23d38:	00023e78 	rdprs	zero,zero,2297
   23d3c:	00024218 	cmpnei	zero,zero,2312
   23d40:	00023bd0 	cmplti	zero,zero,2287
   23d44:	00024404 	movi	zero,2320
   23d48:	00024410 	cmplti	zero,zero,2320
   23d4c:	00024410 	cmplti	zero,zero,2320
   23d50:	00024410 	cmplti	zero,zero,2320
   23d54:	00024410 	cmplti	zero,zero,2320
   23d58:	00024410 	cmplti	zero,zero,2320
   23d5c:	00024410 	cmplti	zero,zero,2320
   23d60:	00024410 	cmplti	zero,zero,2320
   23d64:	00024410 	cmplti	zero,zero,2320
   23d68:	00024410 	cmplti	zero,zero,2320
   23d6c:	00023bd0 	cmplti	zero,zero,2287
   23d70:	00023bd0 	cmplti	zero,zero,2287
   23d74:	00023bd0 	cmplti	zero,zero,2287
   23d78:	00023bd0 	cmplti	zero,zero,2287
   23d7c:	00023bd0 	cmplti	zero,zero,2287
   23d80:	00023bd0 	cmplti	zero,zero,2287
   23d84:	00023bd0 	cmplti	zero,zero,2287
   23d88:	00023bd0 	cmplti	zero,zero,2287
   23d8c:	00023bd0 	cmplti	zero,zero,2287
   23d90:	00023bd0 	cmplti	zero,zero,2287
   23d94:	00023fe8 	cmpgeui	zero,zero,2303
   23d98:	000240a8 	cmpgeui	zero,zero,2306
   23d9c:	00023bd0 	cmplti	zero,zero,2287
   23da0:	000240a8 	cmpgeui	zero,zero,2306
   23da4:	00023bd0 	cmplti	zero,zero,2287
   23da8:	00023bd0 	cmplti	zero,zero,2287
   23dac:	00023bd0 	cmplti	zero,zero,2287
   23db0:	00023bd0 	cmplti	zero,zero,2287
   23db4:	0002413c 	xorhi	zero,zero,2308
   23db8:	00023bd0 	cmplti	zero,zero,2287
   23dbc:	00023bd0 	cmplti	zero,zero,2287
   23dc0:	00024148 	cmpgei	zero,zero,2309
   23dc4:	00023bd0 	cmplti	zero,zero,2287
   23dc8:	00023bd0 	cmplti	zero,zero,2287
   23dcc:	00023bd0 	cmplti	zero,zero,2287
   23dd0:	00023bd0 	cmplti	zero,zero,2287
   23dd4:	00023bd0 	cmplti	zero,zero,2287
   23dd8:	00024180 	call	2418 <__alt_mem_tightly_coupled_instruction_memory-0x1dbe8>
   23ddc:	00023bd0 	cmplti	zero,zero,2287
   23de0:	00023bd0 	cmplti	zero,zero,2287
   23de4:	000241bc 	xorhi	zero,zero,2310
   23de8:	00023bd0 	cmplti	zero,zero,2287
   23dec:	00023bd0 	cmplti	zero,zero,2287
   23df0:	00023bd0 	cmplti	zero,zero,2287
   23df4:	00023bd0 	cmplti	zero,zero,2287
   23df8:	00023bd0 	cmplti	zero,zero,2287
   23dfc:	00023bd0 	cmplti	zero,zero,2287
   23e00:	00023bd0 	cmplti	zero,zero,2287
   23e04:	00023bd0 	cmplti	zero,zero,2287
   23e08:	00023bd0 	cmplti	zero,zero,2287
   23e0c:	00023bd0 	cmplti	zero,zero,2287
   23e10:	00024454 	movui	zero,2321
   23e14:	00024488 	cmpgei	zero,zero,2322
   23e18:	000240a8 	cmpgeui	zero,zero,2306
   23e1c:	000240a8 	cmpgeui	zero,zero,2306
   23e20:	000240a8 	cmpgeui	zero,zero,2306
   23e24:	000243d4 	movui	zero,2319
   23e28:	00024488 	cmpgei	zero,zero,2322
   23e2c:	00023bd0 	cmplti	zero,zero,2287
   23e30:	00023bd0 	cmplti	zero,zero,2287
   23e34:	00024260 	cmpeqi	zero,zero,2313
   23e38:	00023bd0 	cmplti	zero,zero,2287
   23e3c:	00024278 	rdprs	zero,zero,2313
   23e40:	00024494 	movui	zero,2322
   23e44:	000242d8 	cmpnei	zero,zero,2315
   23e48:	00024328 	cmpgeui	zero,zero,2316
   23e4c:	00023bd0 	cmplti	zero,zero,2287
   23e50:	00024334 	movhi	zero,2316
   23e54:	00023bd0 	cmplti	zero,zero,2287
   23e58:	000244a0 	cmpeqi	zero,zero,2322
   23e5c:	00023bd0 	cmplti	zero,zero,2287
   23e60:	00023bd0 	cmplti	zero,zero,2287
   23e64:	00024398 	cmpnei	zero,zero,2318
   23e68:	d9012e17 	ldw	r4,1208(sp)
   23e6c:	d8812d15 	stw	r2,1204(sp)
   23e70:	0109c83a 	sub	r4,zero,r4
   23e74:	d9012e15 	stw	r4,1208(sp)
   23e78:	84000114 	ori	r16,r16,4
   23e7c:	ac800007 	ldb	r18,0(r21)
   23e80:	003f5006 	br	23bc4 <___vfprintf_internal_r+0x170>
   23e84:	d9013017 	ldw	r4,1216(sp)
   23e88:	d9412917 	ldw	r5,1188(sp)
   23e8c:	00259600 	call	25960 <__swsetup_r>
   23e90:	10003d1e 	bne	r2,zero,23f88 <___vfprintf_internal_r+0x534>
   23e94:	d8c12917 	ldw	r3,1188(sp)
   23e98:	1880030b 	ldhu	r2,12(r3)
   23e9c:	00c00284 	movi	r3,10
   23ea0:	1100068c 	andi	r4,r2,26
   23ea4:	20ff101e 	bne	r4,r3,23ae8 <___vfprintf_internal_r+0x94>
   23ea8:	d9012917 	ldw	r4,1188(sp)
   23eac:	20c0038b 	ldhu	r3,14(r4)
   23eb0:	193fffcc 	andi	r4,r3,65535
   23eb4:	2120001c 	xori	r4,r4,32768
   23eb8:	21200004 	addi	r4,r4,-32768
   23ebc:	203f0a16 	blt	r4,zero,23ae8 <___vfprintf_internal_r+0x94>
   23ec0:	d9012917 	ldw	r4,1188(sp)
   23ec4:	d9c12d17 	ldw	r7,1204(sp)
   23ec8:	10bfff4c 	andi	r2,r2,65533
   23ecc:	22800717 	ldw	r10,28(r4)
   23ed0:	22400917 	ldw	r9,36(r4)
   23ed4:	d9013017 	ldw	r4,1216(sp)
   23ed8:	02010004 	movi	r8,1024
   23edc:	d881070d 	sth	r2,1052(sp)
   23ee0:	d9410404 	addi	r5,sp,1040
   23ee4:	d8800404 	addi	r2,sp,16
   23ee8:	800d883a 	mov	r6,r16
   23eec:	d8c1078d 	sth	r3,1054(sp)
   23ef0:	da810b15 	stw	r10,1068(sp)
   23ef4:	da410d15 	stw	r9,1076(sp)
   23ef8:	d8810415 	stw	r2,1040(sp)
   23efc:	d8810815 	stw	r2,1056(sp)
   23f00:	da010615 	stw	r8,1048(sp)
   23f04:	da010915 	stw	r8,1060(sp)
   23f08:	d8010a15 	stw	zero,1064(sp)
   23f0c:	0023a540 	call	23a54 <___vfprintf_internal_r>
   23f10:	d8812c15 	stw	r2,1200(sp)
   23f14:	10000416 	blt	r2,zero,23f28 <___vfprintf_internal_r+0x4d4>
   23f18:	d9013017 	ldw	r4,1216(sp)
   23f1c:	d9410404 	addi	r5,sp,1040
   23f20:	00213a00 	call	213a0 <_fflush_r>
   23f24:	1006501e 	bne	r2,zero,25868 <___vfprintf_internal_r+0x1e14>
   23f28:	d881070b 	ldhu	r2,1052(sp)
   23f2c:	1080100c 	andi	r2,r2,64
   23f30:	10bfffcc 	andi	r2,r2,65535
   23f34:	10a0001c 	xori	r2,r2,32768
   23f38:	10a00004 	addi	r2,r2,-32768
   23f3c:	10001426 	beq	r2,zero,23f90 <___vfprintf_internal_r+0x53c>
   23f40:	d8c12917 	ldw	r3,1188(sp)
   23f44:	1880030b 	ldhu	r2,12(r3)
   23f48:	10801014 	ori	r2,r2,64
   23f4c:	1880030d 	sth	r2,12(r3)
   23f50:	00000f06 	br	23f90 <___vfprintf_internal_r+0x53c>
   23f54:	d8811d17 	ldw	r2,1140(sp)
   23f58:	10000426 	beq	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   23f5c:	d9013017 	ldw	r4,1216(sp)
   23f60:	d9412917 	ldw	r5,1188(sp)
   23f64:	d9811b04 	addi	r6,sp,1132
   23f68:	0023a200 	call	23a20 <__sprint_r>
   23f6c:	d8c12917 	ldw	r3,1188(sp)
   23f70:	1880030b 	ldhu	r2,12(r3)
   23f74:	1080100c 	andi	r2,r2,64
   23f78:	10bfffcc 	andi	r2,r2,65535
   23f7c:	10a0001c 	xori	r2,r2,32768
   23f80:	10a00004 	addi	r2,r2,-32768
   23f84:	10000226 	beq	r2,zero,23f90 <___vfprintf_internal_r+0x53c>
   23f88:	00bfffc4 	movi	r2,-1
   23f8c:	d8812c15 	stw	r2,1200(sp)
   23f90:	d8812c17 	ldw	r2,1200(sp)
   23f94:	dfc14617 	ldw	ra,1304(sp)
   23f98:	df014517 	ldw	fp,1300(sp)
   23f9c:	ddc14417 	ldw	r23,1296(sp)
   23fa0:	dd814317 	ldw	r22,1292(sp)
   23fa4:	dd414217 	ldw	r21,1288(sp)
   23fa8:	dd014117 	ldw	r20,1284(sp)
   23fac:	dcc14017 	ldw	r19,1280(sp)
   23fb0:	dc813f17 	ldw	r18,1276(sp)
   23fb4:	dc413e17 	ldw	r17,1272(sp)
   23fb8:	dc013d17 	ldw	r16,1268(sp)
   23fbc:	dec14704 	addi	sp,sp,1308
   23fc0:	f800283a 	ret
   23fc4:	d9412917 	ldw	r5,1188(sp)
   23fc8:	8809883a 	mov	r4,r17
   23fcc:	d9811b04 	addi	r6,sp,1132
   23fd0:	0023a200 	call	23a20 <__sprint_r>
   23fd4:	103fe51e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   23fd8:	da400404 	addi	r9,sp,16
   23fdc:	003eea06 	br	23b88 <___vfprintf_internal_r+0x134>
   23fe0:	00217bc0 	call	217bc <__sinit>
   23fe4:	003eb306 	br	23ab4 <___vfprintf_internal_r+0x60>
   23fe8:	e013883a 	mov	r9,fp
   23fec:	84000414 	ori	r16,r16,16
   23ff0:	1839883a 	mov	fp,r3
   23ff4:	8080080c 	andi	r2,r16,32
   23ff8:	10034426 	beq	r2,zero,24d0c <___vfprintf_internal_r+0x12b8>
   23ffc:	d8c12d17 	ldw	r3,1204(sp)
   24000:	18800117 	ldw	r2,4(r3)
   24004:	1dc00017 	ldw	r23,0(r3)
   24008:	18c00204 	addi	r3,r3,8
   2400c:	d8c12d15 	stw	r3,1204(sp)
   24010:	102d883a 	mov	r22,r2
   24014:	1003020e 	bge	r2,zero,24c20 <___vfprintf_internal_r+0x11cc>
   24018:	05efc83a 	sub	r23,zero,r23
   2401c:	b804c03a 	cmpne	r2,r23,zero
   24020:	05adc83a 	sub	r22,zero,r22
   24024:	b0adc83a 	sub	r22,r22,r2
   24028:	00800b44 	movi	r2,45
   2402c:	d8812585 	stb	r2,1174(sp)
   24030:	00c00044 	movi	r3,1
   24034:	bd84b03a 	or	r2,r23,r22
   24038:	e0000216 	blt	fp,zero,24044 <___vfprintf_internal_r+0x5f0>
   2403c:	013fdfc4 	movi	r4,-129
   24040:	8120703a 	and	r16,r16,r4
   24044:	1001cc1e 	bne	r2,zero,24778 <___vfprintf_internal_r+0xd24>
   24048:	e001cb1e 	bne	fp,zero,24778 <___vfprintf_internal_r+0xd24>
   2404c:	18c03fcc 	andi	r3,r3,255
   24050:	1802ca1e 	bne	r3,zero,24b7c <___vfprintf_internal_r+0x1128>
   24054:	8080004c 	andi	r2,r16,1
   24058:	1002c826 	beq	r2,zero,24b7c <___vfprintf_internal_r+0x1128>
   2405c:	d8c13917 	ldw	r3,1252(sp)
   24060:	00800c04 	movi	r2,48
   24064:	d8810dc5 	stb	r2,1079(sp)
   24068:	d8c12b15 	stw	r3,1196(sp)
   2406c:	dcc10dc4 	addi	r19,sp,1079
   24070:	d8812b17 	ldw	r2,1196(sp)
   24074:	d8812815 	stw	r2,1184(sp)
   24078:	1700010e 	bge	r2,fp,24080 <___vfprintf_internal_r+0x62c>
   2407c:	df012815 	stw	fp,1184(sp)
   24080:	d8812583 	ldbu	r2,1174(sp)
   24084:	df013115 	stw	fp,1220(sp)
   24088:	10803fcc 	andi	r2,r2,255
   2408c:	1080201c 	xori	r2,r2,128
   24090:	10bfe004 	addi	r2,r2,-128
   24094:	103ed726 	beq	r2,zero,23bf4 <___vfprintf_internal_r+0x1a0>
   24098:	d8c12817 	ldw	r3,1184(sp)
   2409c:	18c00044 	addi	r3,r3,1
   240a0:	d8c12815 	stw	r3,1184(sp)
   240a4:	003ed306 	br	23bf4 <___vfprintf_internal_r+0x1a0>
   240a8:	8080020c 	andi	r2,r16,8
   240ac:	e013883a 	mov	r9,fp
   240b0:	1839883a 	mov	fp,r3
   240b4:	1003a626 	beq	r2,zero,24f50 <___vfprintf_internal_r+0x14fc>
   240b8:	d9012d17 	ldw	r4,1204(sp)
   240bc:	25800017 	ldw	r22,0(r4)
   240c0:	25000117 	ldw	r20,4(r4)
   240c4:	21000204 	addi	r4,r4,8
   240c8:	d9012d15 	stw	r4,1204(sp)
   240cc:	dd813315 	stw	r22,1228(sp)
   240d0:	dd013415 	stw	r20,1232(sp)
   240d4:	b009883a 	mov	r4,r22
   240d8:	a00b883a 	mov	r5,r20
   240dc:	da413c15 	stw	r9,1264(sp)
   240e0:	00292fc0 	call	292fc <__isinfd>
   240e4:	da413c17 	ldw	r9,1264(sp)
   240e8:	b009883a 	mov	r4,r22
   240ec:	a00b883a 	mov	r5,r20
   240f0:	10041d26 	beq	r2,zero,25168 <___vfprintf_internal_r+0x1714>
   240f4:	000d883a 	mov	r6,zero
   240f8:	000f883a 	mov	r7,zero
   240fc:	002ab680 	call	2ab68 <__ltdf2>
   24100:	da413c17 	ldw	r9,1264(sp)
   24104:	1004da16 	blt	r2,zero,25470 <___vfprintf_internal_r+0x1a1c>
   24108:	d8812583 	ldbu	r2,1174(sp)
   2410c:	00c011c4 	movi	r3,71
   24110:	1c83d116 	blt	r3,r18,25058 <___vfprintf_internal_r+0x1604>
   24114:	04c000f4 	movhi	r19,3
   24118:	9cfa8104 	addi	r19,r19,-5628
   2411c:	00c000c4 	movi	r3,3
   24120:	d8c12815 	stw	r3,1184(sp)
   24124:	00ffdfc4 	movi	r3,-129
   24128:	80e0703a 	and	r16,r16,r3
   2412c:	d8c12817 	ldw	r3,1184(sp)
   24130:	d8013115 	stw	zero,1220(sp)
   24134:	d8c12b15 	stw	r3,1196(sp)
   24138:	003fd306 	br	24088 <___vfprintf_internal_r+0x634>
   2413c:	84000214 	ori	r16,r16,8
   24140:	ac800007 	ldb	r18,0(r21)
   24144:	003e9f06 	br	23bc4 <___vfprintf_internal_r+0x170>
   24148:	e013883a 	mov	r9,fp
   2414c:	84000414 	ori	r16,r16,16
   24150:	1839883a 	mov	fp,r3
   24154:	8080080c 	andi	r2,r16,32
   24158:	10031d26 	beq	r2,zero,24dd0 <___vfprintf_internal_r+0x137c>
   2415c:	d8812d17 	ldw	r2,1204(sp)
   24160:	0007883a 	mov	r3,zero
   24164:	15c00017 	ldw	r23,0(r2)
   24168:	15800117 	ldw	r22,4(r2)
   2416c:	10800204 	addi	r2,r2,8
   24170:	d8812d15 	stw	r2,1204(sp)
   24174:	d8012585 	stb	zero,1174(sp)
   24178:	bd84b03a 	or	r2,r23,r22
   2417c:	003fae06 	br	24038 <___vfprintf_internal_r+0x5e4>
   24180:	e013883a 	mov	r9,fp
   24184:	84000414 	ori	r16,r16,16
   24188:	1839883a 	mov	fp,r3
   2418c:	8080080c 	andi	r2,r16,32
   24190:	1002e726 	beq	r2,zero,24d30 <___vfprintf_internal_r+0x12dc>
   24194:	d8c12d17 	ldw	r3,1204(sp)
   24198:	d9012d17 	ldw	r4,1204(sp)
   2419c:	1dc00017 	ldw	r23,0(r3)
   241a0:	1d800117 	ldw	r22,4(r3)
   241a4:	21000204 	addi	r4,r4,8
   241a8:	00c00044 	movi	r3,1
   241ac:	d9012d15 	stw	r4,1204(sp)
   241b0:	bd84b03a 	or	r2,r23,r22
   241b4:	d8012585 	stb	zero,1174(sp)
   241b8:	003f9f06 	br	24038 <___vfprintf_internal_r+0x5e4>
   241bc:	e013883a 	mov	r9,fp
   241c0:	1839883a 	mov	fp,r3
   241c4:	00c000f4 	movhi	r3,3
   241c8:	18fa8504 	addi	r3,r3,-5612
   241cc:	d8c13615 	stw	r3,1240(sp)
   241d0:	8080080c 	andi	r2,r16,32
   241d4:	10007726 	beq	r2,zero,243b4 <___vfprintf_internal_r+0x960>
   241d8:	d9012d17 	ldw	r4,1204(sp)
   241dc:	25c00017 	ldw	r23,0(r4)
   241e0:	25800117 	ldw	r22,4(r4)
   241e4:	21000204 	addi	r4,r4,8
   241e8:	d9012d15 	stw	r4,1204(sp)
   241ec:	8080004c 	andi	r2,r16,1
   241f0:	1002c226 	beq	r2,zero,24cfc <___vfprintf_internal_r+0x12a8>
   241f4:	bd84b03a 	or	r2,r23,r22
   241f8:	10035d26 	beq	r2,zero,24f70 <___vfprintf_internal_r+0x151c>
   241fc:	00c00c04 	movi	r3,48
   24200:	d8c12505 	stb	r3,1172(sp)
   24204:	dc812545 	stb	r18,1173(sp)
   24208:	84000094 	ori	r16,r16,2
   2420c:	00c00084 	movi	r3,2
   24210:	d8012585 	stb	zero,1174(sp)
   24214:	003f8806 	br	24038 <___vfprintf_internal_r+0x5e4>
   24218:	ac800007 	ldb	r18,0(r21)
   2421c:	00c00a84 	movi	r3,42
   24220:	adc00044 	addi	r23,r21,1
   24224:	90c57526 	beq	r18,r3,257fc <___vfprintf_internal_r+0x1da8>
   24228:	95bff404 	addi	r22,r18,-48
   2422c:	0009883a 	mov	r4,zero
   24230:	9d84ff36 	bltu	r19,r22,25630 <___vfprintf_internal_r+0x1bdc>
   24234:	01400284 	movi	r5,10
   24238:	00212100 	call	21210 <__mulsi3>
   2423c:	bc800007 	ldb	r18,0(r23)
   24240:	b089883a 	add	r4,r22,r2
   24244:	bdc00044 	addi	r23,r23,1
   24248:	95bff404 	addi	r22,r18,-48
   2424c:	9dbff92e 	bgeu	r19,r22,24234 <___vfprintf_internal_r+0x7e0>
   24250:	2007883a 	mov	r3,r4
   24254:	20044316 	blt	r4,zero,25364 <___vfprintf_internal_r+0x1910>
   24258:	b82b883a 	mov	r21,r23
   2425c:	003e5a06 	br	23bc8 <___vfprintf_internal_r+0x174>
   24260:	ac800007 	ldb	r18,0(r21)
   24264:	01001b04 	movi	r4,108
   24268:	a805883a 	mov	r2,r21
   2426c:	91045526 	beq	r18,r4,253c4 <___vfprintf_internal_r+0x1970>
   24270:	84000414 	ori	r16,r16,16
   24274:	003e5306 	br	23bc4 <___vfprintf_internal_r+0x170>
   24278:	8080080c 	andi	r2,r16,32
   2427c:	e013883a 	mov	r9,fp
   24280:	10034026 	beq	r2,zero,24f84 <___vfprintf_internal_r+0x1530>
   24284:	d9012d17 	ldw	r4,1204(sp)
   24288:	20800017 	ldw	r2,0(r4)
   2428c:	d9012c17 	ldw	r4,1200(sp)
   24290:	2007d7fa 	srai	r3,r4,31
   24294:	d9012d17 	ldw	r4,1204(sp)
   24298:	10c00115 	stw	r3,4(r2)
   2429c:	21000104 	addi	r4,r4,4
   242a0:	d9012d15 	stw	r4,1204(sp)
   242a4:	d9012c17 	ldw	r4,1200(sp)
   242a8:	11000015 	stw	r4,0(r2)
   242ac:	003e1f06 	br	23b2c <___vfprintf_internal_r+0xd8>
   242b0:	d9012d17 	ldw	r4,1204(sp)
   242b4:	21000017 	ldw	r4,0(r4)
   242b8:	d9012e15 	stw	r4,1208(sp)
   242bc:	d9012d17 	ldw	r4,1204(sp)
   242c0:	20800104 	addi	r2,r4,4
   242c4:	d9012e17 	ldw	r4,1208(sp)
   242c8:	203ee716 	blt	r4,zero,23e68 <___vfprintf_internal_r+0x414>
   242cc:	d8812d15 	stw	r2,1204(sp)
   242d0:	ac800007 	ldb	r18,0(r21)
   242d4:	003e3b06 	br	23bc4 <___vfprintf_internal_r+0x170>
   242d8:	e013883a 	mov	r9,fp
   242dc:	1839883a 	mov	fp,r3
   242e0:	d8c12d17 	ldw	r3,1204(sp)
   242e4:	00800c04 	movi	r2,48
   242e8:	010000f4 	movhi	r4,3
   242ec:	213a8a04 	addi	r4,r4,-5592
   242f0:	1dc00017 	ldw	r23,0(r3)
   242f4:	18c00104 	addi	r3,r3,4
   242f8:	d8812505 	stb	r2,1172(sp)
   242fc:	00801e04 	movi	r2,120
   24300:	d8812545 	stb	r2,1173(sp)
   24304:	d8c12d15 	stw	r3,1204(sp)
   24308:	002d883a 	mov	r22,zero
   2430c:	84000094 	ori	r16,r16,2
   24310:	d9013615 	stw	r4,1240(sp)
   24314:	00c00084 	movi	r3,2
   24318:	04801e04 	movi	r18,120
   2431c:	b805883a 	mov	r2,r23
   24320:	d8012585 	stb	zero,1174(sp)
   24324:	003f4406 	br	24038 <___vfprintf_internal_r+0x5e4>
   24328:	84000814 	ori	r16,r16,32
   2432c:	ac800007 	ldb	r18,0(r21)
   24330:	003e2406 	br	23bc4 <___vfprintf_internal_r+0x170>
   24334:	d8812d17 	ldw	r2,1204(sp)
   24338:	d8012585 	stb	zero,1174(sp)
   2433c:	e013883a 	mov	r9,fp
   24340:	14c00017 	ldw	r19,0(r2)
   24344:	1839883a 	mov	fp,r3
   24348:	15c00104 	addi	r23,r2,4
   2434c:	98045526 	beq	r19,zero,254a4 <___vfprintf_internal_r+0x1a50>
   24350:	9809883a 	mov	r4,r19
   24354:	18043116 	blt	r3,zero,2541c <___vfprintf_internal_r+0x19c8>
   24358:	000b883a 	mov	r5,zero
   2435c:	180d883a 	mov	r6,r3
   24360:	da413c15 	stw	r9,1264(sp)
   24364:	0022f340 	call	22f34 <memchr>
   24368:	da413c17 	ldw	r9,1264(sp)
   2436c:	10047a26 	beq	r2,zero,25558 <___vfprintf_internal_r+0x1b04>
   24370:	14c5c83a 	sub	r2,r2,r19
   24374:	d8812b15 	stw	r2,1196(sp)
   24378:	e083d40e 	bge	fp,r2,252cc <___vfprintf_internal_r+0x1878>
   2437c:	df012815 	stw	fp,1184(sp)
   24380:	e004e416 	blt	fp,zero,25714 <___vfprintf_internal_r+0x1cc0>
   24384:	d8812583 	ldbu	r2,1174(sp)
   24388:	df012b15 	stw	fp,1196(sp)
   2438c:	ddc12d15 	stw	r23,1204(sp)
   24390:	d8013115 	stw	zero,1220(sp)
   24394:	003f3c06 	br	24088 <___vfprintf_internal_r+0x634>
   24398:	008000f4 	movhi	r2,3
   2439c:	10ba8a04 	addi	r2,r2,-5592
   243a0:	d8813615 	stw	r2,1240(sp)
   243a4:	8080080c 	andi	r2,r16,32
   243a8:	e013883a 	mov	r9,fp
   243ac:	1839883a 	mov	fp,r3
   243b0:	103f891e 	bne	r2,zero,241d8 <___vfprintf_internal_r+0x784>
   243b4:	8080040c 	andi	r2,r16,16
   243b8:	1002c326 	beq	r2,zero,24ec8 <___vfprintf_internal_r+0x1474>
   243bc:	d8812d17 	ldw	r2,1204(sp)
   243c0:	002d883a 	mov	r22,zero
   243c4:	15c00017 	ldw	r23,0(r2)
   243c8:	10800104 	addi	r2,r2,4
   243cc:	d8812d15 	stw	r2,1204(sp)
   243d0:	003f8606 	br	241ec <___vfprintf_internal_r+0x798>
   243d4:	84001014 	ori	r16,r16,64
   243d8:	ac800007 	ldb	r18,0(r21)
   243dc:	003df906 	br	23bc4 <___vfprintf_internal_r+0x170>
   243e0:	d8812587 	ldb	r2,1174(sp)
   243e4:	1002e51e 	bne	r2,zero,24f7c <___vfprintf_internal_r+0x1528>
   243e8:	00800804 	movi	r2,32
   243ec:	d8812585 	stb	r2,1174(sp)
   243f0:	ac800007 	ldb	r18,0(r21)
   243f4:	003df306 	br	23bc4 <___vfprintf_internal_r+0x170>
   243f8:	84000054 	ori	r16,r16,1
   243fc:	ac800007 	ldb	r18,0(r21)
   24400:	003df006 	br	23bc4 <___vfprintf_internal_r+0x170>
   24404:	84002014 	ori	r16,r16,128
   24408:	ac800007 	ldb	r18,0(r21)
   2440c:	003ded06 	br	23bc4 <___vfprintf_internal_r+0x170>
   24410:	0009883a 	mov	r4,zero
   24414:	95bff404 	addi	r22,r18,-48
   24418:	182f883a 	mov	r23,r3
   2441c:	01400284 	movi	r5,10
   24420:	00212100 	call	21210 <__mulsi3>
   24424:	ac800007 	ldb	r18,0(r21)
   24428:	1589883a 	add	r4,r2,r22
   2442c:	ad400044 	addi	r21,r21,1
   24430:	95bff404 	addi	r22,r18,-48
   24434:	9dbff92e 	bgeu	r19,r22,2441c <___vfprintf_internal_r+0x9c8>
   24438:	b807883a 	mov	r3,r23
   2443c:	d9012e15 	stw	r4,1208(sp)
   24440:	003de106 	br	23bc8 <___vfprintf_internal_r+0x174>
   24444:	00800ac4 	movi	r2,43
   24448:	d8812585 	stb	r2,1174(sp)
   2444c:	ac800007 	ldb	r18,0(r21)
   24450:	003ddc06 	br	23bc4 <___vfprintf_internal_r+0x170>
   24454:	d8c12d17 	ldw	r3,1204(sp)
   24458:	d9012d17 	ldw	r4,1204(sp)
   2445c:	e013883a 	mov	r9,fp
   24460:	18800017 	ldw	r2,0(r3)
   24464:	21000104 	addi	r4,r4,4
   24468:	00c00044 	movi	r3,1
   2446c:	d8c12815 	stw	r3,1184(sp)
   24470:	d8012585 	stb	zero,1174(sp)
   24474:	d8810405 	stb	r2,1040(sp)
   24478:	d9012d15 	stw	r4,1204(sp)
   2447c:	d8c12b15 	stw	r3,1196(sp)
   24480:	dcc10404 	addi	r19,sp,1040
   24484:	003dda06 	br	23bf0 <___vfprintf_internal_r+0x19c>
   24488:	e013883a 	mov	r9,fp
   2448c:	1839883a 	mov	fp,r3
   24490:	003ed806 	br	23ff4 <___vfprintf_internal_r+0x5a0>
   24494:	e013883a 	mov	r9,fp
   24498:	1839883a 	mov	fp,r3
   2449c:	003f2d06 	br	24154 <___vfprintf_internal_r+0x700>
   244a0:	e013883a 	mov	r9,fp
   244a4:	1839883a 	mov	fp,r3
   244a8:	003f3806 	br	2418c <___vfprintf_internal_r+0x738>
   244ac:	da011d17 	ldw	r8,1140(sp)
   244b0:	d8c11c17 	ldw	r3,1136(sp)
   244b4:	d8812587 	ldb	r2,1174(sp)
   244b8:	10000b26 	beq	r2,zero,244e8 <___vfprintf_internal_r+0xa94>
   244bc:	d8812584 	addi	r2,sp,1174
   244c0:	48800015 	stw	r2,0(r9)
   244c4:	00800044 	movi	r2,1
   244c8:	48800115 	stw	r2,4(r9)
   244cc:	4091883a 	add	r8,r8,r2
   244d0:	1887883a 	add	r3,r3,r2
   244d4:	da011d15 	stw	r8,1140(sp)
   244d8:	d8c11c15 	stw	r3,1136(sp)
   244dc:	008001c4 	movi	r2,7
   244e0:	10c18e16 	blt	r2,r3,24b1c <___vfprintf_internal_r+0x10c8>
   244e4:	4a400204 	addi	r9,r9,8
   244e8:	d9012a17 	ldw	r4,1192(sp)
   244ec:	20000b26 	beq	r4,zero,2451c <___vfprintf_internal_r+0xac8>
   244f0:	d8812504 	addi	r2,sp,1172
   244f4:	48800015 	stw	r2,0(r9)
   244f8:	00800084 	movi	r2,2
   244fc:	48800115 	stw	r2,4(r9)
   24500:	4091883a 	add	r8,r8,r2
   24504:	18c00044 	addi	r3,r3,1
   24508:	da011d15 	stw	r8,1140(sp)
   2450c:	d8c11c15 	stw	r3,1136(sp)
   24510:	008001c4 	movi	r2,7
   24514:	10c17816 	blt	r2,r3,24af8 <___vfprintf_internal_r+0x10a4>
   24518:	4a400204 	addi	r9,r9,8
   2451c:	d9012f17 	ldw	r4,1212(sp)
   24520:	00802004 	movi	r2,128
   24524:	2080fc26 	beq	r4,r2,24918 <___vfprintf_internal_r+0xec4>
   24528:	d8813117 	ldw	r2,1220(sp)
   2452c:	d9012b17 	ldw	r4,1196(sp)
   24530:	112fc83a 	sub	r23,r2,r4
   24534:	05c02a0e 	bge	zero,r23,245e0 <___vfprintf_internal_r+0xb8c>
   24538:	07000404 	movi	fp,16
   2453c:	050000f4 	movhi	r20,3
   24540:	a53a9584 	addi	r20,r20,-5546
   24544:	e5c01d0e 	bge	fp,r23,245bc <___vfprintf_internal_r+0xb68>
   24548:	dc812a15 	stw	r18,1192(sp)
   2454c:	058001c4 	movi	r22,7
   24550:	a025883a 	mov	r18,r20
   24554:	8029883a 	mov	r20,r16
   24558:	dc012917 	ldw	r16,1188(sp)
   2455c:	00000306 	br	2456c <___vfprintf_internal_r+0xb18>
   24560:	bdfffc04 	addi	r23,r23,-16
   24564:	4a400204 	addi	r9,r9,8
   24568:	e5c0110e 	bge	fp,r23,245b0 <___vfprintf_internal_r+0xb5c>
   2456c:	4c800015 	stw	r18,0(r9)
   24570:	4f000115 	stw	fp,4(r9)
   24574:	42000404 	addi	r8,r8,16
   24578:	18c00044 	addi	r3,r3,1
   2457c:	da011d15 	stw	r8,1140(sp)
   24580:	d8c11c15 	stw	r3,1136(sp)
   24584:	b0fff60e 	bge	r22,r3,24560 <___vfprintf_internal_r+0xb0c>
   24588:	8809883a 	mov	r4,r17
   2458c:	800b883a 	mov	r5,r16
   24590:	d9811b04 	addi	r6,sp,1132
   24594:	0023a200 	call	23a20 <__sprint_r>
   24598:	103e741e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   2459c:	bdfffc04 	addi	r23,r23,-16
   245a0:	da011d17 	ldw	r8,1140(sp)
   245a4:	d8c11c17 	ldw	r3,1136(sp)
   245a8:	da400404 	addi	r9,sp,16
   245ac:	e5ffef16 	blt	fp,r23,2456c <___vfprintf_internal_r+0xb18>
   245b0:	a021883a 	mov	r16,r20
   245b4:	9029883a 	mov	r20,r18
   245b8:	dc812a17 	ldw	r18,1192(sp)
   245bc:	4d000015 	stw	r20,0(r9)
   245c0:	4dc00115 	stw	r23,4(r9)
   245c4:	45d1883a 	add	r8,r8,r23
   245c8:	18c00044 	addi	r3,r3,1
   245cc:	da011d15 	stw	r8,1140(sp)
   245d0:	d8c11c15 	stw	r3,1136(sp)
   245d4:	008001c4 	movi	r2,7
   245d8:	10c13e16 	blt	r2,r3,24ad4 <___vfprintf_internal_r+0x1080>
   245dc:	4a400204 	addi	r9,r9,8
   245e0:	8080400c 	andi	r2,r16,256
   245e4:	1000831e 	bne	r2,zero,247f4 <___vfprintf_internal_r+0xda0>
   245e8:	d8812b17 	ldw	r2,1196(sp)
   245ec:	4cc00015 	stw	r19,0(r9)
   245f0:	48800115 	stw	r2,4(r9)
   245f4:	4091883a 	add	r8,r8,r2
   245f8:	18c00044 	addi	r3,r3,1
   245fc:	da011d15 	stw	r8,1140(sp)
   24600:	d8c11c15 	stw	r3,1136(sp)
   24604:	008001c4 	movi	r2,7
   24608:	10c05316 	blt	r2,r3,24758 <___vfprintf_internal_r+0xd04>
   2460c:	4a400204 	addi	r9,r9,8
   24610:	8400010c 	andi	r16,r16,4
   24614:	80002e26 	beq	r16,zero,246d0 <___vfprintf_internal_r+0xc7c>
   24618:	d8812e17 	ldw	r2,1208(sp)
   2461c:	d8c12817 	ldw	r3,1184(sp)
   24620:	10e1c83a 	sub	r16,r2,r3
   24624:	04002a0e 	bge	zero,r16,246d0 <___vfprintf_internal_r+0xc7c>
   24628:	04800404 	movi	r18,16
   2462c:	d8c11c17 	ldw	r3,1136(sp)
   24630:	05c000f4 	movhi	r23,3
   24634:	bdfa9184 	addi	r23,r23,-5562
   24638:	9400170e 	bge	r18,r16,24698 <___vfprintf_internal_r+0xc44>
   2463c:	04c001c4 	movi	r19,7
   24640:	dd012917 	ldw	r20,1188(sp)
   24644:	00000306 	br	24654 <___vfprintf_internal_r+0xc00>
   24648:	843ffc04 	addi	r16,r16,-16
   2464c:	4a400204 	addi	r9,r9,8
   24650:	9400110e 	bge	r18,r16,24698 <___vfprintf_internal_r+0xc44>
   24654:	4dc00015 	stw	r23,0(r9)
   24658:	4c800115 	stw	r18,4(r9)
   2465c:	42000404 	addi	r8,r8,16
   24660:	18c00044 	addi	r3,r3,1
   24664:	da011d15 	stw	r8,1140(sp)
   24668:	d8c11c15 	stw	r3,1136(sp)
   2466c:	98fff60e 	bge	r19,r3,24648 <___vfprintf_internal_r+0xbf4>
   24670:	8809883a 	mov	r4,r17
   24674:	a00b883a 	mov	r5,r20
   24678:	d9811b04 	addi	r6,sp,1132
   2467c:	0023a200 	call	23a20 <__sprint_r>
   24680:	103e3a1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24684:	843ffc04 	addi	r16,r16,-16
   24688:	da011d17 	ldw	r8,1140(sp)
   2468c:	d8c11c17 	ldw	r3,1136(sp)
   24690:	da400404 	addi	r9,sp,16
   24694:	943fef16 	blt	r18,r16,24654 <___vfprintf_internal_r+0xc00>
   24698:	4dc00015 	stw	r23,0(r9)
   2469c:	4c000115 	stw	r16,4(r9)
   246a0:	8211883a 	add	r8,r16,r8
   246a4:	18c00044 	addi	r3,r3,1
   246a8:	da011d15 	stw	r8,1140(sp)
   246ac:	d8c11c15 	stw	r3,1136(sp)
   246b0:	008001c4 	movi	r2,7
   246b4:	10c0060e 	bge	r2,r3,246d0 <___vfprintf_internal_r+0xc7c>
   246b8:	d9412917 	ldw	r5,1188(sp)
   246bc:	8809883a 	mov	r4,r17
   246c0:	d9811b04 	addi	r6,sp,1132
   246c4:	0023a200 	call	23a20 <__sprint_r>
   246c8:	103e281e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   246cc:	da011d17 	ldw	r8,1140(sp)
   246d0:	dd012817 	ldw	r20,1184(sp)
   246d4:	d9012e17 	ldw	r4,1208(sp)
   246d8:	a100010e 	bge	r20,r4,246e0 <___vfprintf_internal_r+0xc8c>
   246dc:	2029883a 	mov	r20,r4
   246e0:	d8812c17 	ldw	r2,1200(sp)
   246e4:	1505883a 	add	r2,r2,r20
   246e8:	d8812c15 	stw	r2,1200(sp)
   246ec:	4000b91e 	bne	r8,zero,249d4 <___vfprintf_internal_r+0xf80>
   246f0:	d8011c15 	stw	zero,1136(sp)
   246f4:	a8800007 	ldb	r2,0(r21)
   246f8:	da400404 	addi	r9,sp,16
   246fc:	103d0d1e 	bne	r2,zero,23b34 <___vfprintf_internal_r+0xe0>
   24700:	a825883a 	mov	r18,r21
   24704:	003d2306 	br	23b94 <___vfprintf_internal_r+0x140>
   24708:	d9412917 	ldw	r5,1188(sp)
   2470c:	8809883a 	mov	r4,r17
   24710:	d9811b04 	addi	r6,sp,1132
   24714:	0023a200 	call	23a20 <__sprint_r>
   24718:	103e141e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   2471c:	da011d17 	ldw	r8,1140(sp)
   24720:	da400404 	addi	r9,sp,16
   24724:	8080004c 	andi	r2,r16,1
   24728:	103fb926 	beq	r2,zero,24610 <___vfprintf_internal_r+0xbbc>
   2472c:	d8c11c17 	ldw	r3,1136(sp)
   24730:	d9013717 	ldw	r4,1244(sp)
   24734:	00800044 	movi	r2,1
   24738:	48800115 	stw	r2,4(r9)
   2473c:	49000015 	stw	r4,0(r9)
   24740:	4091883a 	add	r8,r8,r2
   24744:	1887883a 	add	r3,r3,r2
   24748:	da011d15 	stw	r8,1140(sp)
   2474c:	d8c11c15 	stw	r3,1136(sp)
   24750:	008001c4 	movi	r2,7
   24754:	10ffad0e 	bge	r2,r3,2460c <___vfprintf_internal_r+0xbb8>
   24758:	d9412917 	ldw	r5,1188(sp)
   2475c:	8809883a 	mov	r4,r17
   24760:	d9811b04 	addi	r6,sp,1132
   24764:	0023a200 	call	23a20 <__sprint_r>
   24768:	103e001e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   2476c:	da400404 	addi	r9,sp,16
   24770:	da011d17 	ldw	r8,1140(sp)
   24774:	003fa606 	br	24610 <___vfprintf_internal_r+0xbbc>
   24778:	18803fcc 	andi	r2,r3,255
   2477c:	00c00044 	movi	r3,1
   24780:	10c10126 	beq	r2,r3,24b88 <___vfprintf_internal_r+0x1134>
   24784:	00c00084 	movi	r3,2
   24788:	10c0ed26 	beq	r2,r3,24b40 <___vfprintf_internal_r+0x10ec>
   2478c:	d8c10dc4 	addi	r3,sp,1079
   24790:	b808d0fa 	srli	r4,r23,3
   24794:	b00a977a 	slli	r5,r22,29
   24798:	b02cd0fa 	srli	r22,r22,3
   2479c:	bdc001cc 	andi	r23,r23,7
   247a0:	b8800c04 	addi	r2,r23,48
   247a4:	292eb03a 	or	r23,r5,r4
   247a8:	18800005 	stb	r2,0(r3)
   247ac:	bd88b03a 	or	r4,r23,r22
   247b0:	1827883a 	mov	r19,r3
   247b4:	18ffffc4 	addi	r3,r3,-1
   247b8:	203ff51e 	bne	r4,zero,24790 <___vfprintf_internal_r+0xd3c>
   247bc:	8100004c 	andi	r4,r16,1
   247c0:	980b883a 	mov	r5,r19
   247c4:	20000726 	beq	r4,zero,247e4 <___vfprintf_internal_r+0xd90>
   247c8:	10803fcc 	andi	r2,r2,255
   247cc:	1080201c 	xori	r2,r2,128
   247d0:	10bfe004 	addi	r2,r2,-128
   247d4:	01000c04 	movi	r4,48
   247d8:	11000226 	beq	r2,r4,247e4 <___vfprintf_internal_r+0xd90>
   247dc:	1827883a 	mov	r19,r3
   247e0:	293fffc5 	stb	r4,-1(r5)
   247e4:	d8812717 	ldw	r2,1180(sp)
   247e8:	14c5c83a 	sub	r2,r2,r19
   247ec:	d8812b15 	stw	r2,1196(sp)
   247f0:	003e1f06 	br	24070 <___vfprintf_internal_r+0x61c>
   247f4:	00801944 	movi	r2,101
   247f8:	14807c0e 	bge	r2,r18,249ec <___vfprintf_internal_r+0xf98>
   247fc:	d9013317 	ldw	r4,1228(sp)
   24800:	d9413417 	ldw	r5,1232(sp)
   24804:	000d883a 	mov	r6,zero
   24808:	000f883a 	mov	r7,zero
   2480c:	d8c13b15 	stw	r3,1260(sp)
   24810:	da013a15 	stw	r8,1256(sp)
   24814:	da413c15 	stw	r9,1264(sp)
   24818:	002a9e80 	call	2a9e8 <__eqdf2>
   2481c:	d8c13b17 	ldw	r3,1260(sp)
   24820:	da013a17 	ldw	r8,1256(sp)
   24824:	da413c17 	ldw	r9,1264(sp)
   24828:	1001001e 	bne	r2,zero,24c2c <___vfprintf_internal_r+0x11d8>
   2482c:	008000f4 	movhi	r2,3
   24830:	10ba9104 	addi	r2,r2,-5564
   24834:	48800015 	stw	r2,0(r9)
   24838:	00800044 	movi	r2,1
   2483c:	48800115 	stw	r2,4(r9)
   24840:	4091883a 	add	r8,r8,r2
   24844:	1887883a 	add	r3,r3,r2
   24848:	da011d15 	stw	r8,1140(sp)
   2484c:	d8c11c15 	stw	r3,1136(sp)
   24850:	008001c4 	movi	r2,7
   24854:	10c20316 	blt	r2,r3,25064 <___vfprintf_internal_r+0x1610>
   24858:	4a400204 	addi	r9,r9,8
   2485c:	d8812417 	ldw	r2,1168(sp)
   24860:	d8c13217 	ldw	r3,1224(sp)
   24864:	10c00216 	blt	r2,r3,24870 <___vfprintf_internal_r+0xe1c>
   24868:	8080004c 	andi	r2,r16,1
   2486c:	103f6826 	beq	r2,zero,24610 <___vfprintf_internal_r+0xbbc>
   24870:	d8c11c17 	ldw	r3,1136(sp)
   24874:	d9013717 	ldw	r4,1244(sp)
   24878:	00800044 	movi	r2,1
   2487c:	48800115 	stw	r2,4(r9)
   24880:	49000015 	stw	r4,0(r9)
   24884:	4091883a 	add	r8,r8,r2
   24888:	1887883a 	add	r3,r3,r2
   2488c:	da011d15 	stw	r8,1140(sp)
   24890:	d8c11c15 	stw	r3,1136(sp)
   24894:	008001c4 	movi	r2,7
   24898:	10c2ce16 	blt	r2,r3,253d4 <___vfprintf_internal_r+0x1980>
   2489c:	4a400204 	addi	r9,r9,8
   248a0:	d8813217 	ldw	r2,1224(sp)
   248a4:	14bfffc4 	addi	r18,r2,-1
   248a8:	04bf590e 	bge	zero,r18,24610 <___vfprintf_internal_r+0xbbc>
   248ac:	04c00404 	movi	r19,16
   248b0:	d8c11c17 	ldw	r3,1136(sp)
   248b4:	050000f4 	movhi	r20,3
   248b8:	a53a9584 	addi	r20,r20,-5546
   248bc:	9c818a0e 	bge	r19,r18,24ee8 <___vfprintf_internal_r+0x1494>
   248c0:	058001c4 	movi	r22,7
   248c4:	ddc12917 	ldw	r23,1188(sp)
   248c8:	00000306 	br	248d8 <___vfprintf_internal_r+0xe84>
   248cc:	4a400204 	addi	r9,r9,8
   248d0:	94bffc04 	addi	r18,r18,-16
   248d4:	9c81840e 	bge	r19,r18,24ee8 <___vfprintf_internal_r+0x1494>
   248d8:	4d000015 	stw	r20,0(r9)
   248dc:	4cc00115 	stw	r19,4(r9)
   248e0:	42000404 	addi	r8,r8,16
   248e4:	18c00044 	addi	r3,r3,1
   248e8:	da011d15 	stw	r8,1140(sp)
   248ec:	d8c11c15 	stw	r3,1136(sp)
   248f0:	b0fff60e 	bge	r22,r3,248cc <___vfprintf_internal_r+0xe78>
   248f4:	8809883a 	mov	r4,r17
   248f8:	b80b883a 	mov	r5,r23
   248fc:	d9811b04 	addi	r6,sp,1132
   24900:	0023a200 	call	23a20 <__sprint_r>
   24904:	103d991e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24908:	da011d17 	ldw	r8,1140(sp)
   2490c:	d8c11c17 	ldw	r3,1136(sp)
   24910:	da400404 	addi	r9,sp,16
   24914:	003fee06 	br	248d0 <___vfprintf_internal_r+0xe7c>
   24918:	d8812e17 	ldw	r2,1208(sp)
   2491c:	d9012817 	ldw	r4,1184(sp)
   24920:	112fc83a 	sub	r23,r2,r4
   24924:	05ff000e 	bge	zero,r23,24528 <___vfprintf_internal_r+0xad4>
   24928:	07000404 	movi	fp,16
   2492c:	050000f4 	movhi	r20,3
   24930:	a53a9584 	addi	r20,r20,-5546
   24934:	e5c01d0e 	bge	fp,r23,249ac <___vfprintf_internal_r+0xf58>
   24938:	dc812a15 	stw	r18,1192(sp)
   2493c:	058001c4 	movi	r22,7
   24940:	a025883a 	mov	r18,r20
   24944:	8029883a 	mov	r20,r16
   24948:	dc012917 	ldw	r16,1188(sp)
   2494c:	00000306 	br	2495c <___vfprintf_internal_r+0xf08>
   24950:	bdfffc04 	addi	r23,r23,-16
   24954:	4a400204 	addi	r9,r9,8
   24958:	e5c0110e 	bge	fp,r23,249a0 <___vfprintf_internal_r+0xf4c>
   2495c:	4c800015 	stw	r18,0(r9)
   24960:	4f000115 	stw	fp,4(r9)
   24964:	42000404 	addi	r8,r8,16
   24968:	18c00044 	addi	r3,r3,1
   2496c:	da011d15 	stw	r8,1140(sp)
   24970:	d8c11c15 	stw	r3,1136(sp)
   24974:	b0fff60e 	bge	r22,r3,24950 <___vfprintf_internal_r+0xefc>
   24978:	8809883a 	mov	r4,r17
   2497c:	800b883a 	mov	r5,r16
   24980:	d9811b04 	addi	r6,sp,1132
   24984:	0023a200 	call	23a20 <__sprint_r>
   24988:	103d781e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   2498c:	bdfffc04 	addi	r23,r23,-16
   24990:	da011d17 	ldw	r8,1140(sp)
   24994:	d8c11c17 	ldw	r3,1136(sp)
   24998:	da400404 	addi	r9,sp,16
   2499c:	e5ffef16 	blt	fp,r23,2495c <___vfprintf_internal_r+0xf08>
   249a0:	a021883a 	mov	r16,r20
   249a4:	9029883a 	mov	r20,r18
   249a8:	dc812a17 	ldw	r18,1192(sp)
   249ac:	4d000015 	stw	r20,0(r9)
   249b0:	4dc00115 	stw	r23,4(r9)
   249b4:	45d1883a 	add	r8,r8,r23
   249b8:	18c00044 	addi	r3,r3,1
   249bc:	da011d15 	stw	r8,1140(sp)
   249c0:	d8c11c15 	stw	r3,1136(sp)
   249c4:	008001c4 	movi	r2,7
   249c8:	10c13616 	blt	r2,r3,24ea4 <___vfprintf_internal_r+0x1450>
   249cc:	4a400204 	addi	r9,r9,8
   249d0:	003ed506 	br	24528 <___vfprintf_internal_r+0xad4>
   249d4:	d9412917 	ldw	r5,1188(sp)
   249d8:	8809883a 	mov	r4,r17
   249dc:	d9811b04 	addi	r6,sp,1132
   249e0:	0023a200 	call	23a20 <__sprint_r>
   249e4:	103f4226 	beq	r2,zero,246f0 <___vfprintf_internal_r+0xc9c>
   249e8:	003d6006 	br	23f6c <___vfprintf_internal_r+0x518>
   249ec:	d9013217 	ldw	r4,1224(sp)
   249f0:	00800044 	movi	r2,1
   249f4:	4cc00015 	stw	r19,0(r9)
   249f8:	1101000e 	bge	r2,r4,24dfc <___vfprintf_internal_r+0x13a8>
   249fc:	00800044 	movi	r2,1
   24a00:	48800115 	stw	r2,4(r9)
   24a04:	4091883a 	add	r8,r8,r2
   24a08:	1887883a 	add	r3,r3,r2
   24a0c:	da011d15 	stw	r8,1140(sp)
   24a10:	d8c11c15 	stw	r3,1136(sp)
   24a14:	008001c4 	movi	r2,7
   24a18:	10c10c16 	blt	r2,r3,24e4c <___vfprintf_internal_r+0x13f8>
   24a1c:	4a400204 	addi	r9,r9,8
   24a20:	d8813717 	ldw	r2,1244(sp)
   24a24:	48800015 	stw	r2,0(r9)
   24a28:	00800044 	movi	r2,1
   24a2c:	48800115 	stw	r2,4(r9)
   24a30:	4091883a 	add	r8,r8,r2
   24a34:	1887883a 	add	r3,r3,r2
   24a38:	da011d15 	stw	r8,1140(sp)
   24a3c:	d8c11c15 	stw	r3,1136(sp)
   24a40:	008001c4 	movi	r2,7
   24a44:	10c10a16 	blt	r2,r3,24e70 <___vfprintf_internal_r+0x141c>
   24a48:	4c800204 	addi	r18,r9,8
   24a4c:	d9013317 	ldw	r4,1228(sp)
   24a50:	d9413417 	ldw	r5,1232(sp)
   24a54:	000d883a 	mov	r6,zero
   24a58:	000f883a 	mov	r7,zero
   24a5c:	d8c13b15 	stw	r3,1260(sp)
   24a60:	da013a15 	stw	r8,1256(sp)
   24a64:	002aa440 	call	2aa44 <__nedf2>
   24a68:	d8c13b17 	ldw	r3,1260(sp)
   24a6c:	da013a17 	ldw	r8,1256(sp)
   24a70:	1000ba26 	beq	r2,zero,24d5c <___vfprintf_internal_r+0x1308>
   24a74:	d9013217 	ldw	r4,1224(sp)
   24a78:	9cc00044 	addi	r19,r19,1
   24a7c:	94c00015 	stw	r19,0(r18)
   24a80:	20bfffc4 	addi	r2,r4,-1
   24a84:	90800115 	stw	r2,4(r18)
   24a88:	4091883a 	add	r8,r8,r2
   24a8c:	18c00044 	addi	r3,r3,1
   24a90:	da011d15 	stw	r8,1140(sp)
   24a94:	d8c11c15 	stw	r3,1136(sp)
   24a98:	008001c4 	movi	r2,7
   24a9c:	10c0e216 	blt	r2,r3,24e28 <___vfprintf_internal_r+0x13d4>
   24aa0:	94800204 	addi	r18,r18,8
   24aa4:	d9013517 	ldw	r4,1236(sp)
   24aa8:	d8811fc4 	addi	r2,sp,1151
   24aac:	90800015 	stw	r2,0(r18)
   24ab0:	91000115 	stw	r4,4(r18)
   24ab4:	4111883a 	add	r8,r8,r4
   24ab8:	18c00044 	addi	r3,r3,1
   24abc:	da011d15 	stw	r8,1140(sp)
   24ac0:	d8c11c15 	stw	r3,1136(sp)
   24ac4:	008001c4 	movi	r2,7
   24ac8:	10ff2316 	blt	r2,r3,24758 <___vfprintf_internal_r+0xd04>
   24acc:	92400204 	addi	r9,r18,8
   24ad0:	003ecf06 	br	24610 <___vfprintf_internal_r+0xbbc>
   24ad4:	d9412917 	ldw	r5,1188(sp)
   24ad8:	8809883a 	mov	r4,r17
   24adc:	d9811b04 	addi	r6,sp,1132
   24ae0:	0023a200 	call	23a20 <__sprint_r>
   24ae4:	103d211e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24ae8:	da011d17 	ldw	r8,1140(sp)
   24aec:	d8c11c17 	ldw	r3,1136(sp)
   24af0:	da400404 	addi	r9,sp,16
   24af4:	003eba06 	br	245e0 <___vfprintf_internal_r+0xb8c>
   24af8:	d9412917 	ldw	r5,1188(sp)
   24afc:	8809883a 	mov	r4,r17
   24b00:	d9811b04 	addi	r6,sp,1132
   24b04:	0023a200 	call	23a20 <__sprint_r>
   24b08:	103d181e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24b0c:	da011d17 	ldw	r8,1140(sp)
   24b10:	d8c11c17 	ldw	r3,1136(sp)
   24b14:	da400404 	addi	r9,sp,16
   24b18:	003e8006 	br	2451c <___vfprintf_internal_r+0xac8>
   24b1c:	d9412917 	ldw	r5,1188(sp)
   24b20:	8809883a 	mov	r4,r17
   24b24:	d9811b04 	addi	r6,sp,1132
   24b28:	0023a200 	call	23a20 <__sprint_r>
   24b2c:	103d0f1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24b30:	da011d17 	ldw	r8,1140(sp)
   24b34:	d8c11c17 	ldw	r3,1136(sp)
   24b38:	da400404 	addi	r9,sp,16
   24b3c:	003e6a06 	br	244e8 <___vfprintf_internal_r+0xa94>
   24b40:	d9413617 	ldw	r5,1240(sp)
   24b44:	d8810dc4 	addi	r2,sp,1079
   24b48:	b8c003cc 	andi	r3,r23,15
   24b4c:	b008973a 	slli	r4,r22,28
   24b50:	28c7883a 	add	r3,r5,r3
   24b54:	b82ed13a 	srli	r23,r23,4
   24b58:	18c00003 	ldbu	r3,0(r3)
   24b5c:	b02cd13a 	srli	r22,r22,4
   24b60:	25eeb03a 	or	r23,r4,r23
   24b64:	10c00005 	stb	r3,0(r2)
   24b68:	bd86b03a 	or	r3,r23,r22
   24b6c:	1027883a 	mov	r19,r2
   24b70:	10bfffc4 	addi	r2,r2,-1
   24b74:	183ff41e 	bne	r3,zero,24b48 <___vfprintf_internal_r+0x10f4>
   24b78:	003f1a06 	br	247e4 <___vfprintf_internal_r+0xd90>
   24b7c:	d8012b15 	stw	zero,1196(sp)
   24b80:	dcc10e04 	addi	r19,sp,1080
   24b84:	003d3a06 	br	24070 <___vfprintf_internal_r+0x61c>
   24b88:	b0025426 	beq	r22,zero,254dc <___vfprintf_internal_r+0x1a88>
   24b8c:	b807883a 	mov	r3,r23
   24b90:	d8810dc4 	addi	r2,sp,1079
   24b94:	882f883a 	mov	r23,r17
   24b98:	04c00244 	movi	r19,9
   24b9c:	8023883a 	mov	r17,r16
   24ba0:	da412815 	stw	r9,1184(sp)
   24ba4:	1821883a 	mov	r16,r3
   24ba8:	8009883a 	mov	r4,r16
   24bac:	b00b883a 	mov	r5,r22
   24bb0:	01800284 	movi	r6,10
   24bb4:	000f883a 	mov	r7,zero
   24bb8:	1029883a 	mov	r20,r2
   24bbc:	0029b200 	call	29b20 <__umoddi3>
   24bc0:	10800c04 	addi	r2,r2,48
   24bc4:	8009883a 	mov	r4,r16
   24bc8:	b00b883a 	mov	r5,r22
   24bcc:	a0800005 	stb	r2,0(r20)
   24bd0:	01800284 	movi	r6,10
   24bd4:	000f883a 	mov	r7,zero
   24bd8:	00294d00 	call	294d0 <__udivdi3>
   24bdc:	1021883a 	mov	r16,r2
   24be0:	182d883a 	mov	r22,r3
   24be4:	a0bfffc4 	addi	r2,r20,-1
   24be8:	183fef1e 	bne	r3,zero,24ba8 <___vfprintf_internal_r+0x1154>
   24bec:	9c3fee36 	bltu	r19,r16,24ba8 <___vfprintf_internal_r+0x1154>
   24bf0:	da412817 	ldw	r9,1184(sp)
   24bf4:	8005883a 	mov	r2,r16
   24bf8:	8821883a 	mov	r16,r17
   24bfc:	b823883a 	mov	r17,r23
   24c00:	102f883a 	mov	r23,r2
   24c04:	d8812717 	ldw	r2,1180(sp)
   24c08:	a4ffffc4 	addi	r19,r20,-1
   24c0c:	bdc00c04 	addi	r23,r23,48
   24c10:	14c5c83a 	sub	r2,r2,r19
   24c14:	a5ffffc5 	stb	r23,-1(r20)
   24c18:	d8812b15 	stw	r2,1196(sp)
   24c1c:	003d1406 	br	24070 <___vfprintf_internal_r+0x61c>
   24c20:	00c00044 	movi	r3,1
   24c24:	bd84b03a 	or	r2,r23,r22
   24c28:	003d0306 	br	24038 <___vfprintf_internal_r+0x5e4>
   24c2c:	dc812417 	ldw	r18,1168(sp)
   24c30:	0481140e 	bge	zero,r18,25084 <___vfprintf_internal_r+0x1630>
   24c34:	d9013217 	ldw	r4,1224(sp)
   24c38:	4cc00015 	stw	r19,0(r9)
   24c3c:	9100ec16 	blt	r18,r4,24ff0 <___vfprintf_internal_r+0x159c>
   24c40:	49000115 	stw	r4,4(r9)
   24c44:	4111883a 	add	r8,r8,r4
   24c48:	18c00044 	addi	r3,r3,1
   24c4c:	da011d15 	stw	r8,1140(sp)
   24c50:	d8c11c15 	stw	r3,1136(sp)
   24c54:	008001c4 	movi	r2,7
   24c58:	10c23616 	blt	r2,r3,25534 <___vfprintf_internal_r+0x1ae0>
   24c5c:	4a400204 	addi	r9,r9,8
   24c60:	d8813217 	ldw	r2,1224(sp)
   24c64:	90a5c83a 	sub	r18,r18,r2
   24c68:	04beae0e 	bge	zero,r18,24724 <___vfprintf_internal_r+0xcd0>
   24c6c:	04c00404 	movi	r19,16
   24c70:	d8c11c17 	ldw	r3,1136(sp)
   24c74:	050000f4 	movhi	r20,3
   24c78:	a53a9584 	addi	r20,r20,-5546
   24c7c:	9c81dd0e 	bge	r19,r18,253f4 <___vfprintf_internal_r+0x19a0>
   24c80:	058001c4 	movi	r22,7
   24c84:	ddc12917 	ldw	r23,1188(sp)
   24c88:	00000306 	br	24c98 <___vfprintf_internal_r+0x1244>
   24c8c:	4a400204 	addi	r9,r9,8
   24c90:	94bffc04 	addi	r18,r18,-16
   24c94:	9c81d70e 	bge	r19,r18,253f4 <___vfprintf_internal_r+0x19a0>
   24c98:	4d000015 	stw	r20,0(r9)
   24c9c:	4cc00115 	stw	r19,4(r9)
   24ca0:	42000404 	addi	r8,r8,16
   24ca4:	18c00044 	addi	r3,r3,1
   24ca8:	da011d15 	stw	r8,1140(sp)
   24cac:	d8c11c15 	stw	r3,1136(sp)
   24cb0:	b0fff60e 	bge	r22,r3,24c8c <___vfprintf_internal_r+0x1238>
   24cb4:	8809883a 	mov	r4,r17
   24cb8:	b80b883a 	mov	r5,r23
   24cbc:	d9811b04 	addi	r6,sp,1132
   24cc0:	0023a200 	call	23a20 <__sprint_r>
   24cc4:	103ca91e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24cc8:	da011d17 	ldw	r8,1140(sp)
   24ccc:	d8c11c17 	ldw	r3,1136(sp)
   24cd0:	da400404 	addi	r9,sp,16
   24cd4:	003fee06 	br	24c90 <___vfprintf_internal_r+0x123c>
   24cd8:	d9412917 	ldw	r5,1188(sp)
   24cdc:	8809883a 	mov	r4,r17
   24ce0:	d9811b04 	addi	r6,sp,1132
   24ce4:	0023a200 	call	23a20 <__sprint_r>
   24ce8:	103ca01e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24cec:	da011d17 	ldw	r8,1140(sp)
   24cf0:	d8c11c17 	ldw	r3,1136(sp)
   24cf4:	da400404 	addi	r9,sp,16
   24cf8:	003dee06 	br	244b4 <___vfprintf_internal_r+0xa60>
   24cfc:	00c00084 	movi	r3,2
   24d00:	bd84b03a 	or	r2,r23,r22
   24d04:	d8012585 	stb	zero,1174(sp)
   24d08:	003ccb06 	br	24038 <___vfprintf_internal_r+0x5e4>
   24d0c:	8080040c 	andi	r2,r16,16
   24d10:	1000ae26 	beq	r2,zero,24fcc <___vfprintf_internal_r+0x1578>
   24d14:	d9012d17 	ldw	r4,1204(sp)
   24d18:	25c00017 	ldw	r23,0(r4)
   24d1c:	21000104 	addi	r4,r4,4
   24d20:	d9012d15 	stw	r4,1204(sp)
   24d24:	b82dd7fa 	srai	r22,r23,31
   24d28:	b005883a 	mov	r2,r22
   24d2c:	003cb906 	br	24014 <___vfprintf_internal_r+0x5c0>
   24d30:	8080040c 	andi	r2,r16,16
   24d34:	10007026 	beq	r2,zero,24ef8 <___vfprintf_internal_r+0x14a4>
   24d38:	d8812d17 	ldw	r2,1204(sp)
   24d3c:	002d883a 	mov	r22,zero
   24d40:	00c00044 	movi	r3,1
   24d44:	15c00017 	ldw	r23,0(r2)
   24d48:	10800104 	addi	r2,r2,4
   24d4c:	d8812d15 	stw	r2,1204(sp)
   24d50:	d8012585 	stb	zero,1174(sp)
   24d54:	b805883a 	mov	r2,r23
   24d58:	003cb706 	br	24038 <___vfprintf_internal_r+0x5e4>
   24d5c:	d8813217 	ldw	r2,1224(sp)
   24d60:	14ffffc4 	addi	r19,r2,-1
   24d64:	04ff4f0e 	bge	zero,r19,24aa4 <___vfprintf_internal_r+0x1050>
   24d68:	05800404 	movi	r22,16
   24d6c:	050000f4 	movhi	r20,3
   24d70:	a53a9584 	addi	r20,r20,-5546
   24d74:	b4c0470e 	bge	r22,r19,24e94 <___vfprintf_internal_r+0x1440>
   24d78:	05c001c4 	movi	r23,7
   24d7c:	df012917 	ldw	fp,1188(sp)
   24d80:	00000306 	br	24d90 <___vfprintf_internal_r+0x133c>
   24d84:	94800204 	addi	r18,r18,8
   24d88:	9cfffc04 	addi	r19,r19,-16
   24d8c:	b4c0410e 	bge	r22,r19,24e94 <___vfprintf_internal_r+0x1440>
   24d90:	95000015 	stw	r20,0(r18)
   24d94:	95800115 	stw	r22,4(r18)
   24d98:	42000404 	addi	r8,r8,16
   24d9c:	18c00044 	addi	r3,r3,1
   24da0:	da011d15 	stw	r8,1140(sp)
   24da4:	d8c11c15 	stw	r3,1136(sp)
   24da8:	b8fff60e 	bge	r23,r3,24d84 <___vfprintf_internal_r+0x1330>
   24dac:	8809883a 	mov	r4,r17
   24db0:	e00b883a 	mov	r5,fp
   24db4:	d9811b04 	addi	r6,sp,1132
   24db8:	0023a200 	call	23a20 <__sprint_r>
   24dbc:	103c6b1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24dc0:	da011d17 	ldw	r8,1140(sp)
   24dc4:	d8c11c17 	ldw	r3,1136(sp)
   24dc8:	dc800404 	addi	r18,sp,16
   24dcc:	003fee06 	br	24d88 <___vfprintf_internal_r+0x1334>
   24dd0:	8080040c 	andi	r2,r16,16
   24dd4:	10005326 	beq	r2,zero,24f24 <___vfprintf_internal_r+0x14d0>
   24dd8:	d8c12d17 	ldw	r3,1204(sp)
   24ddc:	002d883a 	mov	r22,zero
   24de0:	1dc00017 	ldw	r23,0(r3)
   24de4:	18c00104 	addi	r3,r3,4
   24de8:	d8c12d15 	stw	r3,1204(sp)
   24dec:	b805883a 	mov	r2,r23
   24df0:	0007883a 	mov	r3,zero
   24df4:	d8012585 	stb	zero,1174(sp)
   24df8:	003c8f06 	br	24038 <___vfprintf_internal_r+0x5e4>
   24dfc:	8088703a 	and	r4,r16,r2
   24e00:	203efe1e 	bne	r4,zero,249fc <___vfprintf_internal_r+0xfa8>
   24e04:	48800115 	stw	r2,4(r9)
   24e08:	42000044 	addi	r8,r8,1
   24e0c:	18c00044 	addi	r3,r3,1
   24e10:	da011d15 	stw	r8,1140(sp)
   24e14:	d8c11c15 	stw	r3,1136(sp)
   24e18:	008001c4 	movi	r2,7
   24e1c:	10c00216 	blt	r2,r3,24e28 <___vfprintf_internal_r+0x13d4>
   24e20:	4c800204 	addi	r18,r9,8
   24e24:	003f1f06 	br	24aa4 <___vfprintf_internal_r+0x1050>
   24e28:	d9412917 	ldw	r5,1188(sp)
   24e2c:	8809883a 	mov	r4,r17
   24e30:	d9811b04 	addi	r6,sp,1132
   24e34:	0023a200 	call	23a20 <__sprint_r>
   24e38:	103c4c1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24e3c:	dc800404 	addi	r18,sp,16
   24e40:	da011d17 	ldw	r8,1140(sp)
   24e44:	d8c11c17 	ldw	r3,1136(sp)
   24e48:	003f1606 	br	24aa4 <___vfprintf_internal_r+0x1050>
   24e4c:	d9412917 	ldw	r5,1188(sp)
   24e50:	8809883a 	mov	r4,r17
   24e54:	d9811b04 	addi	r6,sp,1132
   24e58:	0023a200 	call	23a20 <__sprint_r>
   24e5c:	103c431e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24e60:	da011d17 	ldw	r8,1140(sp)
   24e64:	d8c11c17 	ldw	r3,1136(sp)
   24e68:	da400404 	addi	r9,sp,16
   24e6c:	003eec06 	br	24a20 <___vfprintf_internal_r+0xfcc>
   24e70:	d9412917 	ldw	r5,1188(sp)
   24e74:	8809883a 	mov	r4,r17
   24e78:	d9811b04 	addi	r6,sp,1132
   24e7c:	0023a200 	call	23a20 <__sprint_r>
   24e80:	103c3a1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24e84:	da011d17 	ldw	r8,1140(sp)
   24e88:	d8c11c17 	ldw	r3,1136(sp)
   24e8c:	dc800404 	addi	r18,sp,16
   24e90:	003eee06 	br	24a4c <___vfprintf_internal_r+0xff8>
   24e94:	95000015 	stw	r20,0(r18)
   24e98:	94c00115 	stw	r19,4(r18)
   24e9c:	44d1883a 	add	r8,r8,r19
   24ea0:	003efa06 	br	24a8c <___vfprintf_internal_r+0x1038>
   24ea4:	d9412917 	ldw	r5,1188(sp)
   24ea8:	8809883a 	mov	r4,r17
   24eac:	d9811b04 	addi	r6,sp,1132
   24eb0:	0023a200 	call	23a20 <__sprint_r>
   24eb4:	103c2d1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   24eb8:	da011d17 	ldw	r8,1140(sp)
   24ebc:	d8c11c17 	ldw	r3,1136(sp)
   24ec0:	da400404 	addi	r9,sp,16
   24ec4:	003d9806 	br	24528 <___vfprintf_internal_r+0xad4>
   24ec8:	8080100c 	andi	r2,r16,64
   24ecc:	10011626 	beq	r2,zero,25328 <___vfprintf_internal_r+0x18d4>
   24ed0:	d8c12d17 	ldw	r3,1204(sp)
   24ed4:	002d883a 	mov	r22,zero
   24ed8:	1dc0000b 	ldhu	r23,0(r3)
   24edc:	18c00104 	addi	r3,r3,4
   24ee0:	d8c12d15 	stw	r3,1204(sp)
   24ee4:	003cc106 	br	241ec <___vfprintf_internal_r+0x798>
   24ee8:	4d000015 	stw	r20,0(r9)
   24eec:	4c800115 	stw	r18,4(r9)
   24ef0:	4491883a 	add	r8,r8,r18
   24ef4:	003dc006 	br	245f8 <___vfprintf_internal_r+0xba4>
   24ef8:	8080100c 	andi	r2,r16,64
   24efc:	10010126 	beq	r2,zero,25304 <___vfprintf_internal_r+0x18b0>
   24f00:	d8c12d17 	ldw	r3,1204(sp)
   24f04:	002d883a 	mov	r22,zero
   24f08:	1dc0000b 	ldhu	r23,0(r3)
   24f0c:	18c00104 	addi	r3,r3,4
   24f10:	d8c12d15 	stw	r3,1204(sp)
   24f14:	b805883a 	mov	r2,r23
   24f18:	00c00044 	movi	r3,1
   24f1c:	d8012585 	stb	zero,1174(sp)
   24f20:	003c4506 	br	24038 <___vfprintf_internal_r+0x5e4>
   24f24:	8080100c 	andi	r2,r16,64
   24f28:	10010526 	beq	r2,zero,25340 <___vfprintf_internal_r+0x18ec>
   24f2c:	d9012d17 	ldw	r4,1204(sp)
   24f30:	002d883a 	mov	r22,zero
   24f34:	0007883a 	mov	r3,zero
   24f38:	25c0000b 	ldhu	r23,0(r4)
   24f3c:	21000104 	addi	r4,r4,4
   24f40:	d9012d15 	stw	r4,1204(sp)
   24f44:	b805883a 	mov	r2,r23
   24f48:	d8012585 	stb	zero,1174(sp)
   24f4c:	003c3a06 	br	24038 <___vfprintf_internal_r+0x5e4>
   24f50:	d8812d17 	ldw	r2,1204(sp)
   24f54:	15800017 	ldw	r22,0(r2)
   24f58:	15000117 	ldw	r20,4(r2)
   24f5c:	10800204 	addi	r2,r2,8
   24f60:	d8812d15 	stw	r2,1204(sp)
   24f64:	dd813315 	stw	r22,1228(sp)
   24f68:	dd013415 	stw	r20,1232(sp)
   24f6c:	003c5906 	br	240d4 <___vfprintf_internal_r+0x680>
   24f70:	00c00084 	movi	r3,2
   24f74:	d8012585 	stb	zero,1174(sp)
   24f78:	003c2f06 	br	24038 <___vfprintf_internal_r+0x5e4>
   24f7c:	ac800007 	ldb	r18,0(r21)
   24f80:	003b1006 	br	23bc4 <___vfprintf_internal_r+0x170>
   24f84:	8080040c 	andi	r2,r16,16
   24f88:	1000091e 	bne	r2,zero,24fb0 <___vfprintf_internal_r+0x155c>
   24f8c:	8400100c 	andi	r16,r16,64
   24f90:	80000726 	beq	r16,zero,24fb0 <___vfprintf_internal_r+0x155c>
   24f94:	d8c12d17 	ldw	r3,1204(sp)
   24f98:	d9012c17 	ldw	r4,1200(sp)
   24f9c:	18800017 	ldw	r2,0(r3)
   24fa0:	18c00104 	addi	r3,r3,4
   24fa4:	d8c12d15 	stw	r3,1204(sp)
   24fa8:	1100000d 	sth	r4,0(r2)
   24fac:	003adf06 	br	23b2c <___vfprintf_internal_r+0xd8>
   24fb0:	d8c12d17 	ldw	r3,1204(sp)
   24fb4:	d9012c17 	ldw	r4,1200(sp)
   24fb8:	18800017 	ldw	r2,0(r3)
   24fbc:	18c00104 	addi	r3,r3,4
   24fc0:	d8c12d15 	stw	r3,1204(sp)
   24fc4:	11000015 	stw	r4,0(r2)
   24fc8:	003ad806 	br	23b2c <___vfprintf_internal_r+0xd8>
   24fcc:	8080100c 	andi	r2,r16,64
   24fd0:	1000c526 	beq	r2,zero,252e8 <___vfprintf_internal_r+0x1894>
   24fd4:	d8812d17 	ldw	r2,1204(sp)
   24fd8:	15c0000f 	ldh	r23,0(r2)
   24fdc:	10800104 	addi	r2,r2,4
   24fe0:	d8812d15 	stw	r2,1204(sp)
   24fe4:	b82dd7fa 	srai	r22,r23,31
   24fe8:	b005883a 	mov	r2,r22
   24fec:	003c0906 	br	24014 <___vfprintf_internal_r+0x5c0>
   24ff0:	4c800115 	stw	r18,4(r9)
   24ff4:	9211883a 	add	r8,r18,r8
   24ff8:	18c00044 	addi	r3,r3,1
   24ffc:	da011d15 	stw	r8,1140(sp)
   25000:	d8c11c15 	stw	r3,1136(sp)
   25004:	008001c4 	movi	r2,7
   25008:	10c14016 	blt	r2,r3,2550c <___vfprintf_internal_r+0x1ab8>
   2500c:	4a400204 	addi	r9,r9,8
   25010:	d8813717 	ldw	r2,1244(sp)
   25014:	9ca7883a 	add	r19,r19,r18
   25018:	48800015 	stw	r2,0(r9)
   2501c:	00800044 	movi	r2,1
   25020:	48800115 	stw	r2,4(r9)
   25024:	4091883a 	add	r8,r8,r2
   25028:	1887883a 	add	r3,r3,r2
   2502c:	da011d15 	stw	r8,1140(sp)
   25030:	d8c11c15 	stw	r3,1136(sp)
   25034:	008001c4 	movi	r2,7
   25038:	10c12c16 	blt	r2,r3,254ec <___vfprintf_internal_r+0x1a98>
   2503c:	4a400204 	addi	r9,r9,8
   25040:	d9013217 	ldw	r4,1224(sp)
   25044:	da011d17 	ldw	r8,1140(sp)
   25048:	d8c11c17 	ldw	r3,1136(sp)
   2504c:	24a5c83a 	sub	r18,r4,r18
   25050:	4cc00015 	stw	r19,0(r9)
   25054:	003fa506 	br	24eec <___vfprintf_internal_r+0x1498>
   25058:	04c000f4 	movhi	r19,3
   2505c:	9cfa8204 	addi	r19,r19,-5624
   25060:	003c2e06 	br	2411c <___vfprintf_internal_r+0x6c8>
   25064:	d9412917 	ldw	r5,1188(sp)
   25068:	8809883a 	mov	r4,r17
   2506c:	d9811b04 	addi	r6,sp,1132
   25070:	0023a200 	call	23a20 <__sprint_r>
   25074:	103bbd1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   25078:	da011d17 	ldw	r8,1140(sp)
   2507c:	da400404 	addi	r9,sp,16
   25080:	003df606 	br	2485c <___vfprintf_internal_r+0xe08>
   25084:	008000f4 	movhi	r2,3
   25088:	10ba9104 	addi	r2,r2,-5564
   2508c:	48800015 	stw	r2,0(r9)
   25090:	00800044 	movi	r2,1
   25094:	48800115 	stw	r2,4(r9)
   25098:	4091883a 	add	r8,r8,r2
   2509c:	1887883a 	add	r3,r3,r2
   250a0:	da011d15 	stw	r8,1140(sp)
   250a4:	d8c11c15 	stw	r3,1136(sp)
   250a8:	008001c4 	movi	r2,7
   250ac:	10c0bc16 	blt	r2,r3,253a0 <___vfprintf_internal_r+0x194c>
   250b0:	4a400204 	addi	r9,r9,8
   250b4:	9000041e 	bne	r18,zero,250c8 <___vfprintf_internal_r+0x1674>
   250b8:	d8c13217 	ldw	r3,1224(sp)
   250bc:	1800021e 	bne	r3,zero,250c8 <___vfprintf_internal_r+0x1674>
   250c0:	8080004c 	andi	r2,r16,1
   250c4:	103d5226 	beq	r2,zero,24610 <___vfprintf_internal_r+0xbbc>
   250c8:	d8c11c17 	ldw	r3,1136(sp)
   250cc:	d9013717 	ldw	r4,1244(sp)
   250d0:	00800044 	movi	r2,1
   250d4:	48800115 	stw	r2,4(r9)
   250d8:	49000015 	stw	r4,0(r9)
   250dc:	4091883a 	add	r8,r8,r2
   250e0:	1887883a 	add	r3,r3,r2
   250e4:	da011d15 	stw	r8,1140(sp)
   250e8:	d8c11c15 	stw	r3,1136(sp)
   250ec:	008001c4 	movi	r2,7
   250f0:	10c14516 	blt	r2,r3,25608 <___vfprintf_internal_r+0x1bb4>
   250f4:	4a400204 	addi	r9,r9,8
   250f8:	04a5c83a 	sub	r18,zero,r18
   250fc:	0480d70e 	bge	zero,r18,2545c <___vfprintf_internal_r+0x1a08>
   25100:	05800404 	movi	r22,16
   25104:	050000f4 	movhi	r20,3
   25108:	a53a9584 	addi	r20,r20,-5546
   2510c:	b480db0e 	bge	r22,r18,2547c <___vfprintf_internal_r+0x1a28>
   25110:	05c001c4 	movi	r23,7
   25114:	df012917 	ldw	fp,1188(sp)
   25118:	00000306 	br	25128 <___vfprintf_internal_r+0x16d4>
   2511c:	4a400204 	addi	r9,r9,8
   25120:	94bffc04 	addi	r18,r18,-16
   25124:	b480d50e 	bge	r22,r18,2547c <___vfprintf_internal_r+0x1a28>
   25128:	4d000015 	stw	r20,0(r9)
   2512c:	4d800115 	stw	r22,4(r9)
   25130:	42000404 	addi	r8,r8,16
   25134:	18c00044 	addi	r3,r3,1
   25138:	da011d15 	stw	r8,1140(sp)
   2513c:	d8c11c15 	stw	r3,1136(sp)
   25140:	b8fff60e 	bge	r23,r3,2511c <___vfprintf_internal_r+0x16c8>
   25144:	8809883a 	mov	r4,r17
   25148:	e00b883a 	mov	r5,fp
   2514c:	d9811b04 	addi	r6,sp,1132
   25150:	0023a200 	call	23a20 <__sprint_r>
   25154:	103b851e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   25158:	da011d17 	ldw	r8,1140(sp)
   2515c:	d8c11c17 	ldw	r3,1136(sp)
   25160:	da400404 	addi	r9,sp,16
   25164:	003fee06 	br	25120 <___vfprintf_internal_r+0x16cc>
   25168:	da413c15 	stw	r9,1264(sp)
   2516c:	00293340 	call	29334 <__isnand>
   25170:	da413c17 	ldw	r9,1264(sp)
   25174:	10007e1e 	bne	r2,zero,25370 <___vfprintf_internal_r+0x191c>
   25178:	00bfffc4 	movi	r2,-1
   2517c:	e0816a26 	beq	fp,r2,25728 <___vfprintf_internal_r+0x1cd4>
   25180:	008019c4 	movi	r2,103
   25184:	90816526 	beq	r18,r2,2571c <___vfprintf_internal_r+0x1cc8>
   25188:	008011c4 	movi	r2,71
   2518c:	90816326 	beq	r18,r2,2571c <___vfprintf_internal_r+0x1cc8>
   25190:	80c04014 	ori	r3,r16,256
   25194:	d8c12a15 	stw	r3,1192(sp)
   25198:	a0016516 	blt	r20,zero,25730 <___vfprintf_internal_r+0x1cdc>
   2519c:	d8012f05 	stb	zero,1212(sp)
   251a0:	00801984 	movi	r2,102
   251a4:	9080f226 	beq	r18,r2,25570 <___vfprintf_internal_r+0x1b1c>
   251a8:	00801184 	movi	r2,70
   251ac:	9080f026 	beq	r18,r2,25570 <___vfprintf_internal_r+0x1b1c>
   251b0:	00801944 	movi	r2,101
   251b4:	90818d26 	beq	r18,r2,257ec <___vfprintf_internal_r+0x1d98>
   251b8:	00801144 	movi	r2,69
   251bc:	90818b26 	beq	r18,r2,257ec <___vfprintf_internal_r+0x1d98>
   251c0:	e02f883a 	mov	r23,fp
   251c4:	d8812404 	addi	r2,sp,1168
   251c8:	d8800115 	stw	r2,4(sp)
   251cc:	d8812304 	addi	r2,sp,1164
   251d0:	d8800215 	stw	r2,8(sp)
   251d4:	d8812204 	addi	r2,sp,1160
   251d8:	ddc00015 	stw	r23,0(sp)
   251dc:	d8800315 	stw	r2,12(sp)
   251e0:	8809883a 	mov	r4,r17
   251e4:	b00b883a 	mov	r5,r22
   251e8:	a00d883a 	mov	r6,r20
   251ec:	01c00084 	movi	r7,2
   251f0:	da413c15 	stw	r9,1264(sp)
   251f4:	0025d740 	call	25d74 <_dtoa_r>
   251f8:	1027883a 	mov	r19,r2
   251fc:	008019c4 	movi	r2,103
   25200:	da413c17 	ldw	r9,1264(sp)
   25204:	9081951e 	bne	r18,r2,2585c <___vfprintf_internal_r+0x1e08>
   25208:	8080004c 	andi	r2,r16,1
   2520c:	10017926 	beq	r2,zero,257f4 <___vfprintf_internal_r+0x1da0>
   25210:	00801184 	movi	r2,70
   25214:	9dc7883a 	add	r3,r19,r23
   25218:	9080e626 	beq	r18,r2,255b4 <___vfprintf_internal_r+0x1b60>
   2521c:	b009883a 	mov	r4,r22
   25220:	a00b883a 	mov	r5,r20
   25224:	000d883a 	mov	r6,zero
   25228:	000f883a 	mov	r7,zero
   2522c:	d8c13b15 	stw	r3,1260(sp)
   25230:	da413c15 	stw	r9,1264(sp)
   25234:	002a9e80 	call	2a9e8 <__eqdf2>
   25238:	d8c13b17 	ldw	r3,1260(sp)
   2523c:	da413c17 	ldw	r9,1264(sp)
   25240:	10000726 	beq	r2,zero,25260 <___vfprintf_internal_r+0x180c>
   25244:	d8812217 	ldw	r2,1160(sp)
   25248:	10c18a2e 	bgeu	r2,r3,25874 <___vfprintf_internal_r+0x1e20>
   2524c:	01000c04 	movi	r4,48
   25250:	11000005 	stb	r4,0(r2)
   25254:	10800044 	addi	r2,r2,1
   25258:	d8812215 	stw	r2,1160(sp)
   2525c:	10fffc1e 	bne	r2,r3,25250 <___vfprintf_internal_r+0x17fc>
   25260:	1cc7c83a 	sub	r3,r3,r19
   25264:	d8c13215 	stw	r3,1224(sp)
   25268:	008019c4 	movi	r2,103
   2526c:	9080fa26 	beq	r18,r2,25658 <___vfprintf_internal_r+0x1c04>
   25270:	008011c4 	movi	r2,71
   25274:	9080f826 	beq	r18,r2,25658 <___vfprintf_internal_r+0x1c04>
   25278:	00801984 	movi	r2,102
   2527c:	90818e1e 	bne	r18,r2,258b8 <___vfprintf_internal_r+0x1e64>
   25280:	d8812417 	ldw	r2,1168(sp)
   25284:	d8812b15 	stw	r2,1196(sp)
   25288:	00817c0e 	bge	zero,r2,2587c <___vfprintf_internal_r+0x1e28>
   2528c:	e000021e 	bne	fp,zero,25298 <___vfprintf_internal_r+0x1844>
   25290:	8400004c 	andi	r16,r16,1
   25294:	80000426 	beq	r16,zero,252a8 <___vfprintf_internal_r+0x1854>
   25298:	d8812b17 	ldw	r2,1196(sp)
   2529c:	e2000044 	addi	r8,fp,1
   252a0:	1205883a 	add	r2,r2,r8
   252a4:	d8812b15 	stw	r2,1196(sp)
   252a8:	d8812815 	stw	r2,1184(sp)
   252ac:	10010b16 	blt	r2,zero,256dc <___vfprintf_internal_r+0x1c88>
   252b0:	ddc12f07 	ldb	r23,1212(sp)
   252b4:	b800e426 	beq	r23,zero,25648 <___vfprintf_internal_r+0x1bf4>
   252b8:	00800b44 	movi	r2,45
   252bc:	d8812585 	stb	r2,1174(sp)
   252c0:	dc012a17 	ldw	r16,1192(sp)
   252c4:	d8013115 	stw	zero,1220(sp)
   252c8:	003b7306 	br	24098 <___vfprintf_internal_r+0x644>
   252cc:	d8812b17 	ldw	r2,1196(sp)
   252d0:	d8812815 	stw	r2,1184(sp)
   252d4:	10005716 	blt	r2,zero,25434 <___vfprintf_internal_r+0x19e0>
   252d8:	d8812583 	ldbu	r2,1174(sp)
   252dc:	ddc12d15 	stw	r23,1204(sp)
   252e0:	d8013115 	stw	zero,1220(sp)
   252e4:	003b6806 	br	24088 <___vfprintf_internal_r+0x634>
   252e8:	d8c12d17 	ldw	r3,1204(sp)
   252ec:	1dc00017 	ldw	r23,0(r3)
   252f0:	18c00104 	addi	r3,r3,4
   252f4:	d8c12d15 	stw	r3,1204(sp)
   252f8:	b82dd7fa 	srai	r22,r23,31
   252fc:	b005883a 	mov	r2,r22
   25300:	003b4406 	br	24014 <___vfprintf_internal_r+0x5c0>
   25304:	d9012d17 	ldw	r4,1204(sp)
   25308:	002d883a 	mov	r22,zero
   2530c:	00c00044 	movi	r3,1
   25310:	25c00017 	ldw	r23,0(r4)
   25314:	21000104 	addi	r4,r4,4
   25318:	d9012d15 	stw	r4,1204(sp)
   2531c:	b805883a 	mov	r2,r23
   25320:	d8012585 	stb	zero,1174(sp)
   25324:	003b4406 	br	24038 <___vfprintf_internal_r+0x5e4>
   25328:	d9012d17 	ldw	r4,1204(sp)
   2532c:	002d883a 	mov	r22,zero
   25330:	25c00017 	ldw	r23,0(r4)
   25334:	21000104 	addi	r4,r4,4
   25338:	d9012d15 	stw	r4,1204(sp)
   2533c:	003bab06 	br	241ec <___vfprintf_internal_r+0x798>
   25340:	d8812d17 	ldw	r2,1204(sp)
   25344:	002d883a 	mov	r22,zero
   25348:	0007883a 	mov	r3,zero
   2534c:	15c00017 	ldw	r23,0(r2)
   25350:	10800104 	addi	r2,r2,4
   25354:	d8812d15 	stw	r2,1204(sp)
   25358:	d8012585 	stb	zero,1174(sp)
   2535c:	b805883a 	mov	r2,r23
   25360:	003b3506 	br	24038 <___vfprintf_internal_r+0x5e4>
   25364:	00ffffc4 	movi	r3,-1
   25368:	b82b883a 	mov	r21,r23
   2536c:	003a1606 	br	23bc8 <___vfprintf_internal_r+0x174>
   25370:	008011c4 	movi	r2,71
   25374:	1480b116 	blt	r2,r18,2563c <___vfprintf_internal_r+0x1be8>
   25378:	04c000f4 	movhi	r19,3
   2537c:	9cfa8304 	addi	r19,r19,-5620
   25380:	00c000c4 	movi	r3,3
   25384:	00bfdfc4 	movi	r2,-129
   25388:	80a0703a 	and	r16,r16,r2
   2538c:	d8c12815 	stw	r3,1184(sp)
   25390:	d8812583 	ldbu	r2,1174(sp)
   25394:	d8c12b15 	stw	r3,1196(sp)
   25398:	d8013115 	stw	zero,1220(sp)
   2539c:	003b3a06 	br	24088 <___vfprintf_internal_r+0x634>
   253a0:	d9412917 	ldw	r5,1188(sp)
   253a4:	8809883a 	mov	r4,r17
   253a8:	d9811b04 	addi	r6,sp,1132
   253ac:	0023a200 	call	23a20 <__sprint_r>
   253b0:	103aee1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   253b4:	dc812417 	ldw	r18,1168(sp)
   253b8:	da011d17 	ldw	r8,1140(sp)
   253bc:	da400404 	addi	r9,sp,16
   253c0:	003f3c06 	br	250b4 <___vfprintf_internal_r+0x1660>
   253c4:	ad400044 	addi	r21,r21,1
   253c8:	84000814 	ori	r16,r16,32
   253cc:	14800047 	ldb	r18,1(r2)
   253d0:	0039fc06 	br	23bc4 <___vfprintf_internal_r+0x170>
   253d4:	d9412917 	ldw	r5,1188(sp)
   253d8:	8809883a 	mov	r4,r17
   253dc:	d9811b04 	addi	r6,sp,1132
   253e0:	0023a200 	call	23a20 <__sprint_r>
   253e4:	103ae11e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   253e8:	da011d17 	ldw	r8,1140(sp)
   253ec:	da400404 	addi	r9,sp,16
   253f0:	003d2b06 	br	248a0 <___vfprintf_internal_r+0xe4c>
   253f4:	4d000015 	stw	r20,0(r9)
   253f8:	4c800115 	stw	r18,4(r9)
   253fc:	4491883a 	add	r8,r8,r18
   25400:	18c00044 	addi	r3,r3,1
   25404:	da011d15 	stw	r8,1140(sp)
   25408:	d8c11c15 	stw	r3,1136(sp)
   2540c:	008001c4 	movi	r2,7
   25410:	10fcbd16 	blt	r2,r3,24708 <___vfprintf_internal_r+0xcb4>
   25414:	4a400204 	addi	r9,r9,8
   25418:	003cc206 	br	24724 <___vfprintf_internal_r+0xcd0>
   2541c:	da413c15 	stw	r9,1264(sp)
   25420:	00236f80 	call	236f8 <strlen>
   25424:	d8812b15 	stw	r2,1196(sp)
   25428:	d8812815 	stw	r2,1184(sp)
   2542c:	da413c17 	ldw	r9,1264(sp)
   25430:	103fa90e 	bge	r2,zero,252d8 <___vfprintf_internal_r+0x1884>
   25434:	d8012815 	stw	zero,1184(sp)
   25438:	003fa706 	br	252d8 <___vfprintf_internal_r+0x1884>
   2543c:	d9412917 	ldw	r5,1188(sp)
   25440:	8809883a 	mov	r4,r17
   25444:	d9811b04 	addi	r6,sp,1132
   25448:	0023a200 	call	23a20 <__sprint_r>
   2544c:	103ac71e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   25450:	da011d17 	ldw	r8,1140(sp)
   25454:	d8c11c17 	ldw	r3,1136(sp)
   25458:	da400404 	addi	r9,sp,16
   2545c:	d8813217 	ldw	r2,1224(sp)
   25460:	4cc00015 	stw	r19,0(r9)
   25464:	48800115 	stw	r2,4(r9)
   25468:	4091883a 	add	r8,r8,r2
   2546c:	003c6206 	br	245f8 <___vfprintf_internal_r+0xba4>
   25470:	00800b44 	movi	r2,45
   25474:	d8812585 	stb	r2,1174(sp)
   25478:	003b2406 	br	2410c <___vfprintf_internal_r+0x6b8>
   2547c:	4d000015 	stw	r20,0(r9)
   25480:	4c800115 	stw	r18,4(r9)
   25484:	4491883a 	add	r8,r8,r18
   25488:	18c00044 	addi	r3,r3,1
   2548c:	da011d15 	stw	r8,1140(sp)
   25490:	d8c11c15 	stw	r3,1136(sp)
   25494:	008001c4 	movi	r2,7
   25498:	10ffe816 	blt	r2,r3,2543c <___vfprintf_internal_r+0x19e8>
   2549c:	4a400204 	addi	r9,r9,8
   254a0:	003fee06 	br	2545c <___vfprintf_internal_r+0x1a08>
   254a4:	d8c12b15 	stw	r3,1196(sp)
   254a8:	00800184 	movi	r2,6
   254ac:	10c0062e 	bgeu	r2,r3,254c8 <___vfprintf_internal_r+0x1a74>
   254b0:	d8812b15 	stw	r2,1196(sp)
   254b4:	d8812815 	stw	r2,1184(sp)
   254b8:	ddc12d15 	stw	r23,1204(sp)
   254bc:	04c000f4 	movhi	r19,3
   254c0:	9cfa8f04 	addi	r19,r19,-5572
   254c4:	0039ca06 	br	23bf0 <___vfprintf_internal_r+0x19c>
   254c8:	d8812b17 	ldw	r2,1196(sp)
   254cc:	d8812815 	stw	r2,1184(sp)
   254d0:	103ff90e 	bge	r2,zero,254b8 <___vfprintf_internal_r+0x1a64>
   254d4:	d8012815 	stw	zero,1184(sp)
   254d8:	003ff706 	br	254b8 <___vfprintf_internal_r+0x1a64>
   254dc:	00800244 	movi	r2,9
   254e0:	15fdaa36 	bltu	r2,r23,24b8c <___vfprintf_internal_r+0x1138>
   254e4:	dd010e04 	addi	r20,sp,1080
   254e8:	003dc606 	br	24c04 <___vfprintf_internal_r+0x11b0>
   254ec:	d9412917 	ldw	r5,1188(sp)
   254f0:	8809883a 	mov	r4,r17
   254f4:	d9811b04 	addi	r6,sp,1132
   254f8:	0023a200 	call	23a20 <__sprint_r>
   254fc:	103a9b1e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   25500:	dc812417 	ldw	r18,1168(sp)
   25504:	da400404 	addi	r9,sp,16
   25508:	003ecd06 	br	25040 <___vfprintf_internal_r+0x15ec>
   2550c:	d9412917 	ldw	r5,1188(sp)
   25510:	8809883a 	mov	r4,r17
   25514:	d9811b04 	addi	r6,sp,1132
   25518:	0023a200 	call	23a20 <__sprint_r>
   2551c:	103a931e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   25520:	dc812417 	ldw	r18,1168(sp)
   25524:	da011d17 	ldw	r8,1140(sp)
   25528:	d8c11c17 	ldw	r3,1136(sp)
   2552c:	da400404 	addi	r9,sp,16
   25530:	003eb706 	br	25010 <___vfprintf_internal_r+0x15bc>
   25534:	d9412917 	ldw	r5,1188(sp)
   25538:	8809883a 	mov	r4,r17
   2553c:	d9811b04 	addi	r6,sp,1132
   25540:	0023a200 	call	23a20 <__sprint_r>
   25544:	103a891e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   25548:	dc812417 	ldw	r18,1168(sp)
   2554c:	da011d17 	ldw	r8,1140(sp)
   25550:	da400404 	addi	r9,sp,16
   25554:	003dc206 	br	24c60 <___vfprintf_internal_r+0x120c>
   25558:	df012815 	stw	fp,1184(sp)
   2555c:	d8812583 	ldbu	r2,1174(sp)
   25560:	df012b15 	stw	fp,1196(sp)
   25564:	ddc12d15 	stw	r23,1204(sp)
   25568:	d8013115 	stw	zero,1220(sp)
   2556c:	003ac606 	br	24088 <___vfprintf_internal_r+0x634>
   25570:	d8812404 	addi	r2,sp,1168
   25574:	d8800115 	stw	r2,4(sp)
   25578:	d8812304 	addi	r2,sp,1164
   2557c:	d8800215 	stw	r2,8(sp)
   25580:	d8812204 	addi	r2,sp,1160
   25584:	df000015 	stw	fp,0(sp)
   25588:	d8800315 	stw	r2,12(sp)
   2558c:	8809883a 	mov	r4,r17
   25590:	b00b883a 	mov	r5,r22
   25594:	a00d883a 	mov	r6,r20
   25598:	01c000c4 	movi	r7,3
   2559c:	da413c15 	stw	r9,1264(sp)
   255a0:	0025d740 	call	25d74 <_dtoa_r>
   255a4:	da413c17 	ldw	r9,1264(sp)
   255a8:	1027883a 	mov	r19,r2
   255ac:	1707883a 	add	r3,r2,fp
   255b0:	e02f883a 	mov	r23,fp
   255b4:	99000007 	ldb	r4,0(r19)
   255b8:	00800c04 	movi	r2,48
   255bc:	20800326 	beq	r4,r2,255cc <___vfprintf_internal_r+0x1b78>
   255c0:	da812417 	ldw	r10,1168(sp)
   255c4:	1a87883a 	add	r3,r3,r10
   255c8:	003f1406 	br	2521c <___vfprintf_internal_r+0x17c8>
   255cc:	b009883a 	mov	r4,r22
   255d0:	a00b883a 	mov	r5,r20
   255d4:	000d883a 	mov	r6,zero
   255d8:	000f883a 	mov	r7,zero
   255dc:	d8c13b15 	stw	r3,1260(sp)
   255e0:	da413c15 	stw	r9,1264(sp)
   255e4:	002aa440 	call	2aa44 <__nedf2>
   255e8:	d8c13b17 	ldw	r3,1260(sp)
   255ec:	da413c17 	ldw	r9,1264(sp)
   255f0:	103ff326 	beq	r2,zero,255c0 <___vfprintf_internal_r+0x1b6c>
   255f4:	00800044 	movi	r2,1
   255f8:	15d5c83a 	sub	r10,r2,r23
   255fc:	da812415 	stw	r10,1168(sp)
   25600:	1a87883a 	add	r3,r3,r10
   25604:	003f0506 	br	2521c <___vfprintf_internal_r+0x17c8>
   25608:	d9412917 	ldw	r5,1188(sp)
   2560c:	8809883a 	mov	r4,r17
   25610:	d9811b04 	addi	r6,sp,1132
   25614:	0023a200 	call	23a20 <__sprint_r>
   25618:	103a541e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x518>
   2561c:	dc812417 	ldw	r18,1168(sp)
   25620:	da011d17 	ldw	r8,1140(sp)
   25624:	d8c11c17 	ldw	r3,1136(sp)
   25628:	da400404 	addi	r9,sp,16
   2562c:	003eb206 	br	250f8 <___vfprintf_internal_r+0x16a4>
   25630:	b82b883a 	mov	r21,r23
   25634:	0007883a 	mov	r3,zero
   25638:	00396306 	br	23bc8 <___vfprintf_internal_r+0x174>
   2563c:	04c000f4 	movhi	r19,3
   25640:	9cfa8404 	addi	r19,r19,-5616
   25644:	003f4e06 	br	25380 <___vfprintf_internal_r+0x192c>
   25648:	d8812583 	ldbu	r2,1174(sp)
   2564c:	dc012a17 	ldw	r16,1192(sp)
   25650:	d8013115 	stw	zero,1220(sp)
   25654:	003a8c06 	br	24088 <___vfprintf_internal_r+0x634>
   25658:	d8812417 	ldw	r2,1168(sp)
   2565c:	d8812b15 	stw	r2,1196(sp)
   25660:	1029883a 	mov	r20,r2
   25664:	00bfff44 	movi	r2,-3
   25668:	a0800116 	blt	r20,r2,25670 <___vfprintf_internal_r+0x1c1c>
   2566c:	e5001d0e 	bge	fp,r20,256e4 <___vfprintf_internal_r+0x1c90>
   25670:	94bfff84 	addi	r18,r18,-2
   25674:	a53fffc4 	addi	r20,r20,-1
   25678:	dd012415 	stw	r20,1168(sp)
   2567c:	dc811fc5 	stb	r18,1151(sp)
   25680:	a0007216 	blt	r20,zero,2584c <___vfprintf_internal_r+0x1df8>
   25684:	00800ac4 	movi	r2,43
   25688:	d8812005 	stb	r2,1152(sp)
   2568c:	00800244 	movi	r2,9
   25690:	15003516 	blt	r2,r20,25768 <___vfprintf_internal_r+0x1d14>
   25694:	00800c04 	movi	r2,48
   25698:	a5000c04 	addi	r20,r20,48
   2569c:	d8812045 	stb	r2,1153(sp)
   256a0:	dd012085 	stb	r20,1154(sp)
   256a4:	d8c120c4 	addi	r3,sp,1155
   256a8:	d8811fc4 	addi	r2,sp,1151
   256ac:	1885c83a 	sub	r2,r3,r2
   256b0:	d8c13217 	ldw	r3,1224(sp)
   256b4:	d8813515 	stw	r2,1236(sp)
   256b8:	1885883a 	add	r2,r3,r2
   256bc:	d8812b15 	stw	r2,1196(sp)
   256c0:	00800044 	movi	r2,1
   256c4:	10c0580e 	bge	r2,r3,25828 <___vfprintf_internal_r+0x1dd4>
   256c8:	d8812b17 	ldw	r2,1196(sp)
   256cc:	10800044 	addi	r2,r2,1
   256d0:	d8812b15 	stw	r2,1196(sp)
   256d4:	d8812815 	stw	r2,1184(sp)
   256d8:	103ef50e 	bge	r2,zero,252b0 <___vfprintf_internal_r+0x185c>
   256dc:	d8012815 	stw	zero,1184(sp)
   256e0:	003ef306 	br	252b0 <___vfprintf_internal_r+0x185c>
   256e4:	d8812b17 	ldw	r2,1196(sp)
   256e8:	d8c13217 	ldw	r3,1224(sp)
   256ec:	10c01416 	blt	r2,r3,25740 <___vfprintf_internal_r+0x1cec>
   256f0:	8400004c 	andi	r16,r16,1
   256f4:	80000326 	beq	r16,zero,25704 <___vfprintf_internal_r+0x1cb0>
   256f8:	d8812b17 	ldw	r2,1196(sp)
   256fc:	10800044 	addi	r2,r2,1
   25700:	d8812b15 	stw	r2,1196(sp)
   25704:	d8812815 	stw	r2,1184(sp)
   25708:	10001416 	blt	r2,zero,2575c <___vfprintf_internal_r+0x1d08>
   2570c:	048019c4 	movi	r18,103
   25710:	003ee706 	br	252b0 <___vfprintf_internal_r+0x185c>
   25714:	d8012815 	stw	zero,1184(sp)
   25718:	003b1a06 	br	24384 <___vfprintf_internal_r+0x930>
   2571c:	e03e9c1e 	bne	fp,zero,25190 <___vfprintf_internal_r+0x173c>
   25720:	07000044 	movi	fp,1
   25724:	003e9a06 	br	25190 <___vfprintf_internal_r+0x173c>
   25728:	07000184 	movi	fp,6
   2572c:	003e9806 	br	25190 <___vfprintf_internal_r+0x173c>
   25730:	00c00b44 	movi	r3,45
   25734:	a520003c 	xorhi	r20,r20,32768
   25738:	d8c12f05 	stb	r3,1212(sp)
   2573c:	003e9806 	br	251a0 <___vfprintf_internal_r+0x174c>
   25740:	05003f0e 	bge	zero,r20,25840 <___vfprintf_internal_r+0x1dec>
   25744:	05000044 	movi	r20,1
   25748:	d8c13217 	ldw	r3,1224(sp)
   2574c:	a0e9883a 	add	r20,r20,r3
   25750:	dd012b15 	stw	r20,1196(sp)
   25754:	dd012815 	stw	r20,1184(sp)
   25758:	a03fec0e 	bge	r20,zero,2570c <___vfprintf_internal_r+0x1cb8>
   2575c:	d8012815 	stw	zero,1184(sp)
   25760:	048019c4 	movi	r18,103
   25764:	003ed206 	br	252b0 <___vfprintf_internal_r+0x185c>
   25768:	d8c11f84 	addi	r3,sp,1150
   2576c:	102f883a 	mov	r23,r2
   25770:	4839883a 	mov	fp,r9
   25774:	a009883a 	mov	r4,r20
   25778:	01400284 	movi	r5,10
   2577c:	182d883a 	mov	r22,r3
   25780:	002af4c0 	call	2af4c <__modsi3>
   25784:	10800c04 	addi	r2,r2,48
   25788:	a009883a 	mov	r4,r20
   2578c:	b0800005 	stb	r2,0(r22)
   25790:	01400284 	movi	r5,10
   25794:	002aefc0 	call	2aefc <__divsi3>
   25798:	1029883a 	mov	r20,r2
   2579c:	b0ffffc4 	addi	r3,r22,-1
   257a0:	b8bff416 	blt	r23,r2,25774 <___vfprintf_internal_r+0x1d20>
   257a4:	11400c04 	addi	r5,r2,48
   257a8:	b17fffc5 	stb	r5,-1(r22)
   257ac:	d8811fc4 	addi	r2,sp,1151
   257b0:	e013883a 	mov	r9,fp
   257b4:	18803e2e 	bgeu	r3,r2,258b0 <___vfprintf_internal_r+0x1e5c>
   257b8:	b007883a 	mov	r3,r22
   257bc:	d9012044 	addi	r4,sp,1153
   257c0:	00000206 	br	257cc <___vfprintf_internal_r+0x1d78>
   257c4:	19400003 	ldbu	r5,0(r3)
   257c8:	18c00044 	addi	r3,r3,1
   257cc:	21400005 	stb	r5,0(r4)
   257d0:	21000044 	addi	r4,r4,1
   257d4:	10fffb1e 	bne	r2,r3,257c4 <___vfprintf_internal_r+0x1d70>
   257d8:	d8c12004 	addi	r3,sp,1152
   257dc:	1d87c83a 	sub	r3,r3,r22
   257e0:	d9012044 	addi	r4,sp,1153
   257e4:	20c7883a 	add	r3,r4,r3
   257e8:	003fb006 	br	256ac <___vfprintf_internal_r+0x1c58>
   257ec:	e5c00044 	addi	r23,fp,1
   257f0:	003e7406 	br	251c4 <___vfprintf_internal_r+0x1770>
   257f4:	d8c12217 	ldw	r3,1160(sp)
   257f8:	003e9906 	br	25260 <___vfprintf_internal_r+0x180c>
   257fc:	d9012d17 	ldw	r4,1204(sp)
   25800:	ac800043 	ldbu	r18,1(r21)
   25804:	b82b883a 	mov	r21,r23
   25808:	20c00017 	ldw	r3,0(r4)
   2580c:	20800104 	addi	r2,r4,4
   25810:	d8812d15 	stw	r2,1204(sp)
   25814:	18002116 	blt	r3,zero,2589c <___vfprintf_internal_r+0x1e48>
   25818:	94803fcc 	andi	r18,r18,255
   2581c:	9480201c 	xori	r18,r18,128
   25820:	94bfe004 	addi	r18,r18,-128
   25824:	0038e706 	br	23bc4 <___vfprintf_internal_r+0x170>
   25828:	80a0703a 	and	r16,r16,r2
   2582c:	803fa61e 	bne	r16,zero,256c8 <___vfprintf_internal_r+0x1c74>
   25830:	d8812b17 	ldw	r2,1196(sp)
   25834:	d8812815 	stw	r2,1184(sp)
   25838:	103e9d0e 	bge	r2,zero,252b0 <___vfprintf_internal_r+0x185c>
   2583c:	003fa706 	br	256dc <___vfprintf_internal_r+0x1c88>
   25840:	00800084 	movi	r2,2
   25844:	1529c83a 	sub	r20,r2,r20
   25848:	003fbf06 	br	25748 <___vfprintf_internal_r+0x1cf4>
   2584c:	00800b44 	movi	r2,45
   25850:	0529c83a 	sub	r20,zero,r20
   25854:	d8812005 	stb	r2,1152(sp)
   25858:	003f8c06 	br	2568c <___vfprintf_internal_r+0x1c38>
   2585c:	008011c4 	movi	r2,71
   25860:	90be6926 	beq	r18,r2,25208 <___vfprintf_internal_r+0x17b4>
   25864:	003e6a06 	br	25210 <___vfprintf_internal_r+0x17bc>
   25868:	00bfffc4 	movi	r2,-1
   2586c:	d8812c15 	stw	r2,1200(sp)
   25870:	0039ad06 	br	23f28 <___vfprintf_internal_r+0x4d4>
   25874:	1007883a 	mov	r3,r2
   25878:	003e7906 	br	25260 <___vfprintf_internal_r+0x180c>
   2587c:	e000021e 	bne	fp,zero,25888 <___vfprintf_internal_r+0x1e34>
   25880:	8400004c 	andi	r16,r16,1
   25884:	80000e26 	beq	r16,zero,258c0 <___vfprintf_internal_r+0x1e6c>
   25888:	e7000084 	addi	fp,fp,2
   2588c:	df012b15 	stw	fp,1196(sp)
   25890:	df012815 	stw	fp,1184(sp)
   25894:	e03e860e 	bge	fp,zero,252b0 <___vfprintf_internal_r+0x185c>
   25898:	003f9006 	br	256dc <___vfprintf_internal_r+0x1c88>
   2589c:	94803fcc 	andi	r18,r18,255
   258a0:	9480201c 	xori	r18,r18,128
   258a4:	00ffffc4 	movi	r3,-1
   258a8:	94bfe004 	addi	r18,r18,-128
   258ac:	0038c506 	br	23bc4 <___vfprintf_internal_r+0x170>
   258b0:	d8c12044 	addi	r3,sp,1153
   258b4:	003f7d06 	br	256ac <___vfprintf_internal_r+0x1c58>
   258b8:	dd012417 	ldw	r20,1168(sp)
   258bc:	003f6d06 	br	25674 <___vfprintf_internal_r+0x1c20>
   258c0:	00c00044 	movi	r3,1
   258c4:	d8c12815 	stw	r3,1184(sp)
   258c8:	d8c12b15 	stw	r3,1196(sp)
   258cc:	003e7806 	br	252b0 <___vfprintf_internal_r+0x185c>

000258d0 <__vfprintf_internal>:
   258d0:	008000f4 	movhi	r2,3
   258d4:	10be6f04 	addi	r2,r2,-1604
   258d8:	2007883a 	mov	r3,r4
   258dc:	11000017 	ldw	r4,0(r2)
   258e0:	2805883a 	mov	r2,r5
   258e4:	300f883a 	mov	r7,r6
   258e8:	180b883a 	mov	r5,r3
   258ec:	100d883a 	mov	r6,r2
   258f0:	0023a541 	jmpi	23a54 <___vfprintf_internal_r>

000258f4 <_write_r>:
   258f4:	defffd04 	addi	sp,sp,-12
   258f8:	dc400115 	stw	r17,4(sp)
   258fc:	dc000015 	stw	r16,0(sp)
   25900:	2023883a 	mov	r17,r4
   25904:	040000f4 	movhi	r16,3
   25908:	84013604 	addi	r16,r16,1240
   2590c:	2809883a 	mov	r4,r5
   25910:	300b883a 	mov	r5,r6
   25914:	380d883a 	mov	r6,r7
   25918:	dfc00215 	stw	ra,8(sp)
   2591c:	80000015 	stw	zero,0(r16)
   25920:	002c1740 	call	2c174 <write>
   25924:	00ffffc4 	movi	r3,-1
   25928:	10c00526 	beq	r2,r3,25940 <_write_r+0x4c>
   2592c:	dfc00217 	ldw	ra,8(sp)
   25930:	dc400117 	ldw	r17,4(sp)
   25934:	dc000017 	ldw	r16,0(sp)
   25938:	dec00304 	addi	sp,sp,12
   2593c:	f800283a 	ret
   25940:	80c00017 	ldw	r3,0(r16)
   25944:	183ff926 	beq	r3,zero,2592c <_write_r+0x38>
   25948:	88c00015 	stw	r3,0(r17)
   2594c:	dfc00217 	ldw	ra,8(sp)
   25950:	dc400117 	ldw	r17,4(sp)
   25954:	dc000017 	ldw	r16,0(sp)
   25958:	dec00304 	addi	sp,sp,12
   2595c:	f800283a 	ret

00025960 <__swsetup_r>:
   25960:	008000f4 	movhi	r2,3
   25964:	10be6f04 	addi	r2,r2,-1604
   25968:	10800017 	ldw	r2,0(r2)
   2596c:	defffd04 	addi	sp,sp,-12
   25970:	dc400115 	stw	r17,4(sp)
   25974:	dc000015 	stw	r16,0(sp)
   25978:	dfc00215 	stw	ra,8(sp)
   2597c:	2023883a 	mov	r17,r4
   25980:	2821883a 	mov	r16,r5
   25984:	10000226 	beq	r2,zero,25990 <__swsetup_r+0x30>
   25988:	10c00e17 	ldw	r3,56(r2)
   2598c:	18003d26 	beq	r3,zero,25a84 <__swsetup_r+0x124>
   25990:	8080030b 	ldhu	r2,12(r16)
   25994:	10c0020c 	andi	r3,r2,8
   25998:	18ffffcc 	andi	r3,r3,65535
   2599c:	18e0001c 	xori	r3,r3,32768
   259a0:	18e00004 	addi	r3,r3,-32768
   259a4:	18001226 	beq	r3,zero,259f0 <__swsetup_r+0x90>
   259a8:	80c00417 	ldw	r3,16(r16)
   259ac:	18001f26 	beq	r3,zero,25a2c <__swsetup_r+0xcc>
   259b0:	1100004c 	andi	r4,r2,1
   259b4:	2000261e 	bne	r4,zero,25a50 <__swsetup_r+0xf0>
   259b8:	1080008c 	andi	r2,r2,2
   259bc:	10bfffcc 	andi	r2,r2,65535
   259c0:	10a0001c 	xori	r2,r2,32768
   259c4:	10a00004 	addi	r2,r2,-32768
   259c8:	1000311e 	bne	r2,zero,25a90 <__swsetup_r+0x130>
   259cc:	80800517 	ldw	r2,20(r16)
   259d0:	80800215 	stw	r2,8(r16)
   259d4:	18002326 	beq	r3,zero,25a64 <__swsetup_r+0x104>
   259d8:	0005883a 	mov	r2,zero
   259dc:	dfc00217 	ldw	ra,8(sp)
   259e0:	dc400117 	ldw	r17,4(sp)
   259e4:	dc000017 	ldw	r16,0(sp)
   259e8:	dec00304 	addi	sp,sp,12
   259ec:	f800283a 	ret
   259f0:	10c0040c 	andi	r3,r2,16
   259f4:	18ffffcc 	andi	r3,r3,65535
   259f8:	18e0001c 	xori	r3,r3,32768
   259fc:	18e00004 	addi	r3,r3,-32768
   25a00:	18001e26 	beq	r3,zero,25a7c <__swsetup_r+0x11c>
   25a04:	10c0010c 	andi	r3,r2,4
   25a08:	18ffffcc 	andi	r3,r3,65535
   25a0c:	18e0001c 	xori	r3,r3,32768
   25a10:	18e00004 	addi	r3,r3,-32768
   25a14:	1800211e 	bne	r3,zero,25a9c <__swsetup_r+0x13c>
   25a18:	80c00417 	ldw	r3,16(r16)
   25a1c:	11400214 	ori	r5,r2,8
   25a20:	8140030d 	sth	r5,12(r16)
   25a24:	2805883a 	mov	r2,r5
   25a28:	183fe11e 	bne	r3,zero,259b0 <__swsetup_r+0x50>
   25a2c:	1140a00c 	andi	r5,r2,640
   25a30:	01008004 	movi	r4,512
   25a34:	293fde26 	beq	r5,r4,259b0 <__swsetup_r+0x50>
   25a38:	8809883a 	mov	r4,r17
   25a3c:	800b883a 	mov	r5,r16
   25a40:	00226080 	call	22608 <__smakebuf_r>
   25a44:	8080030b 	ldhu	r2,12(r16)
   25a48:	80c00417 	ldw	r3,16(r16)
   25a4c:	003fd806 	br	259b0 <__swsetup_r+0x50>
   25a50:	80800517 	ldw	r2,20(r16)
   25a54:	80000215 	stw	zero,8(r16)
   25a58:	0085c83a 	sub	r2,zero,r2
   25a5c:	80800615 	stw	r2,24(r16)
   25a60:	183fdd1e 	bne	r3,zero,259d8 <__swsetup_r+0x78>
   25a64:	8080030b 	ldhu	r2,12(r16)
   25a68:	1080200c 	andi	r2,r2,128
   25a6c:	10bfffcc 	andi	r2,r2,65535
   25a70:	10a0001c 	xori	r2,r2,32768
   25a74:	10a00004 	addi	r2,r2,-32768
   25a78:	103fd826 	beq	r2,zero,259dc <__swsetup_r+0x7c>
   25a7c:	00bfffc4 	movi	r2,-1
   25a80:	003fd606 	br	259dc <__swsetup_r+0x7c>
   25a84:	1009883a 	mov	r4,r2
   25a88:	00217bc0 	call	217bc <__sinit>
   25a8c:	003fc006 	br	25990 <__swsetup_r+0x30>
   25a90:	0005883a 	mov	r2,zero
   25a94:	80800215 	stw	r2,8(r16)
   25a98:	003fce06 	br	259d4 <__swsetup_r+0x74>
   25a9c:	81400c17 	ldw	r5,48(r16)
   25aa0:	28000626 	beq	r5,zero,25abc <__swsetup_r+0x15c>
   25aa4:	80c01004 	addi	r3,r16,64
   25aa8:	28c00326 	beq	r5,r3,25ab8 <__swsetup_r+0x158>
   25aac:	8809883a 	mov	r4,r17
   25ab0:	0021cd80 	call	21cd8 <_free_r>
   25ab4:	8080030b 	ldhu	r2,12(r16)
   25ab8:	80000c15 	stw	zero,48(r16)
   25abc:	80c00417 	ldw	r3,16(r16)
   25ac0:	013ff6c4 	movi	r4,-37
   25ac4:	2084703a 	and	r2,r4,r2
   25ac8:	80000115 	stw	zero,4(r16)
   25acc:	80c00015 	stw	r3,0(r16)
   25ad0:	003fd206 	br	25a1c <__swsetup_r+0xbc>

00025ad4 <_close_r>:
   25ad4:	defffd04 	addi	sp,sp,-12
   25ad8:	dc400115 	stw	r17,4(sp)
   25adc:	dc000015 	stw	r16,0(sp)
   25ae0:	2023883a 	mov	r17,r4
   25ae4:	040000f4 	movhi	r16,3
   25ae8:	84013604 	addi	r16,r16,1240
   25aec:	2809883a 	mov	r4,r5
   25af0:	dfc00215 	stw	ra,8(sp)
   25af4:	80000015 	stw	zero,0(r16)
   25af8:	002b6440 	call	2b644 <close>
   25afc:	00ffffc4 	movi	r3,-1
   25b00:	10c00526 	beq	r2,r3,25b18 <_close_r+0x44>
   25b04:	dfc00217 	ldw	ra,8(sp)
   25b08:	dc400117 	ldw	r17,4(sp)
   25b0c:	dc000017 	ldw	r16,0(sp)
   25b10:	dec00304 	addi	sp,sp,12
   25b14:	f800283a 	ret
   25b18:	80c00017 	ldw	r3,0(r16)
   25b1c:	183ff926 	beq	r3,zero,25b04 <_close_r+0x30>
   25b20:	88c00015 	stw	r3,0(r17)
   25b24:	dfc00217 	ldw	ra,8(sp)
   25b28:	dc400117 	ldw	r17,4(sp)
   25b2c:	dc000017 	ldw	r16,0(sp)
   25b30:	dec00304 	addi	sp,sp,12
   25b34:	f800283a 	ret

00025b38 <quorem>:
   25b38:	defff204 	addi	sp,sp,-56
   25b3c:	dd000815 	stw	r20,32(sp)
   25b40:	20800417 	ldw	r2,16(r4)
   25b44:	2d000417 	ldw	r20,16(r5)
   25b48:	dcc00715 	stw	r19,28(sp)
   25b4c:	dfc00d15 	stw	ra,52(sp)
   25b50:	df000c15 	stw	fp,48(sp)
   25b54:	ddc00b15 	stw	r23,44(sp)
   25b58:	dd800a15 	stw	r22,40(sp)
   25b5c:	dd400915 	stw	r21,36(sp)
   25b60:	dc800615 	stw	r18,24(sp)
   25b64:	dc400515 	stw	r17,20(sp)
   25b68:	dc000415 	stw	r16,16(sp)
   25b6c:	d9400015 	stw	r5,0(sp)
   25b70:	2027883a 	mov	r19,r4
   25b74:	15007d16 	blt	r2,r20,25d6c <quorem+0x234>
   25b78:	a0800104 	addi	r2,r20,4
   25b7c:	1085883a 	add	r2,r2,r2
   25b80:	1085883a 	add	r2,r2,r2
   25b84:	28ad883a 	add	r22,r5,r2
   25b88:	2085883a 	add	r2,r4,r2
   25b8c:	10800017 	ldw	r2,0(r2)
   25b90:	b1400017 	ldw	r5,0(r22)
   25b94:	a53fffc4 	addi	r20,r20,-1
   25b98:	1009883a 	mov	r4,r2
   25b9c:	29400044 	addi	r5,r5,1
   25ba0:	d8800115 	stw	r2,4(sp)
   25ba4:	002afa80 	call	2afa8 <__udivsi3>
   25ba8:	1025883a 	mov	r18,r2
   25bac:	d8800017 	ldw	r2,0(sp)
   25bb0:	9f000504 	addi	fp,r19,20
   25bb4:	14000504 	addi	r16,r2,20
   25bb8:	90003626 	beq	r18,zero,25c94 <quorem+0x15c>
   25bbc:	802b883a 	mov	r21,r16
   25bc0:	e023883a 	mov	r17,fp
   25bc4:	0007883a 	mov	r3,zero
   25bc8:	002f883a 	mov	r23,zero
   25bcc:	a9800017 	ldw	r6,0(r21)
   25bd0:	900b883a 	mov	r5,r18
   25bd4:	d8c00315 	stw	r3,12(sp)
   25bd8:	313fffcc 	andi	r4,r6,65535
   25bdc:	d9800215 	stw	r6,8(sp)
   25be0:	00212100 	call	21210 <__mulsi3>
   25be4:	d9800217 	ldw	r6,8(sp)
   25be8:	d8c00317 	ldw	r3,12(sp)
   25bec:	900b883a 	mov	r5,r18
   25bf0:	3008d43a 	srli	r4,r6,16
   25bf4:	1887883a 	add	r3,r3,r2
   25bf8:	d8c00315 	stw	r3,12(sp)
   25bfc:	00212100 	call	21210 <__mulsi3>
   25c00:	89400017 	ldw	r5,0(r17)
   25c04:	d8c00317 	ldw	r3,12(sp)
   25c08:	ad400104 	addi	r21,r21,4
   25c0c:	293fffcc 	andi	r4,r5,65535
   25c10:	1810d43a 	srli	r8,r3,16
   25c14:	25c9883a 	add	r4,r4,r23
   25c18:	18ffffcc 	andi	r3,r3,65535
   25c1c:	20c9c83a 	sub	r4,r4,r3
   25c20:	280cd43a 	srli	r6,r5,16
   25c24:	4085883a 	add	r2,r8,r2
   25c28:	2007d43a 	srai	r3,r4,16
   25c2c:	117fffcc 	andi	r5,r2,65535
   25c30:	314bc83a 	sub	r5,r6,r5
   25c34:	28cb883a 	add	r5,r5,r3
   25c38:	8940008d 	sth	r5,2(r17)
   25c3c:	8900000d 	sth	r4,0(r17)
   25c40:	1006d43a 	srli	r3,r2,16
   25c44:	282fd43a 	srai	r23,r5,16
   25c48:	8c400104 	addi	r17,r17,4
   25c4c:	b57fdf2e 	bgeu	r22,r21,25bcc <quorem+0x94>
   25c50:	d8c00117 	ldw	r3,4(sp)
   25c54:	18000f1e 	bne	r3,zero,25c94 <quorem+0x15c>
   25c58:	a0800144 	addi	r2,r20,5
   25c5c:	1085883a 	add	r2,r2,r2
   25c60:	1085883a 	add	r2,r2,r2
   25c64:	9887883a 	add	r3,r19,r2
   25c68:	18bfff04 	addi	r2,r3,-4
   25c6c:	e080082e 	bgeu	fp,r2,25c90 <quorem+0x158>
   25c70:	18ffff17 	ldw	r3,-4(r3)
   25c74:	18000326 	beq	r3,zero,25c84 <quorem+0x14c>
   25c78:	00000506 	br	25c90 <quorem+0x158>
   25c7c:	10c00017 	ldw	r3,0(r2)
   25c80:	1800031e 	bne	r3,zero,25c90 <quorem+0x158>
   25c84:	10bfff04 	addi	r2,r2,-4
   25c88:	a53fffc4 	addi	r20,r20,-1
   25c8c:	e0bffb36 	bltu	fp,r2,25c7c <quorem+0x144>
   25c90:	9d000415 	stw	r20,16(r19)
   25c94:	d9400017 	ldw	r5,0(sp)
   25c98:	9809883a 	mov	r4,r19
   25c9c:	00285900 	call	28590 <__mcmp>
   25ca0:	10002516 	blt	r2,zero,25d38 <quorem+0x200>
   25ca4:	94800044 	addi	r18,r18,1
   25ca8:	e007883a 	mov	r3,fp
   25cac:	000d883a 	mov	r6,zero
   25cb0:	18800017 	ldw	r2,0(r3)
   25cb4:	82000017 	ldw	r8,0(r16)
   25cb8:	84000104 	addi	r16,r16,4
   25cbc:	11ffffcc 	andi	r7,r2,65535
   25cc0:	413fffcc 	andi	r4,r8,65535
   25cc4:	398d883a 	add	r6,r7,r6
   25cc8:	310fc83a 	sub	r7,r6,r4
   25ccc:	4010d43a 	srli	r8,r8,16
   25cd0:	100cd43a 	srli	r6,r2,16
   25cd4:	3809d43a 	srai	r4,r7,16
   25cd8:	19c0000d 	sth	r7,0(r3)
   25cdc:	320dc83a 	sub	r6,r6,r8
   25ce0:	310d883a 	add	r6,r6,r4
   25ce4:	1980008d 	sth	r6,2(r3)
   25ce8:	300dd43a 	srai	r6,r6,16
   25cec:	18c00104 	addi	r3,r3,4
   25cf0:	b43fef2e 	bgeu	r22,r16,25cb0 <quorem+0x178>
   25cf4:	a0800144 	addi	r2,r20,5
   25cf8:	1085883a 	add	r2,r2,r2
   25cfc:	1085883a 	add	r2,r2,r2
   25d00:	9885883a 	add	r2,r19,r2
   25d04:	10c00017 	ldw	r3,0(r2)
   25d08:	18000b1e 	bne	r3,zero,25d38 <quorem+0x200>
   25d0c:	10ffff04 	addi	r3,r2,-4
   25d10:	e0c0082e 	bgeu	fp,r3,25d34 <quorem+0x1fc>
   25d14:	10bfff17 	ldw	r2,-4(r2)
   25d18:	10000326 	beq	r2,zero,25d28 <quorem+0x1f0>
   25d1c:	00000506 	br	25d34 <quorem+0x1fc>
   25d20:	18800017 	ldw	r2,0(r3)
   25d24:	1000031e 	bne	r2,zero,25d34 <quorem+0x1fc>
   25d28:	18ffff04 	addi	r3,r3,-4
   25d2c:	a53fffc4 	addi	r20,r20,-1
   25d30:	e0fffb36 	bltu	fp,r3,25d20 <quorem+0x1e8>
   25d34:	9d000415 	stw	r20,16(r19)
   25d38:	9005883a 	mov	r2,r18
   25d3c:	dfc00d17 	ldw	ra,52(sp)
   25d40:	df000c17 	ldw	fp,48(sp)
   25d44:	ddc00b17 	ldw	r23,44(sp)
   25d48:	dd800a17 	ldw	r22,40(sp)
   25d4c:	dd400917 	ldw	r21,36(sp)
   25d50:	dd000817 	ldw	r20,32(sp)
   25d54:	dcc00717 	ldw	r19,28(sp)
   25d58:	dc800617 	ldw	r18,24(sp)
   25d5c:	dc400517 	ldw	r17,20(sp)
   25d60:	dc000417 	ldw	r16,16(sp)
   25d64:	dec00e04 	addi	sp,sp,56
   25d68:	f800283a 	ret
   25d6c:	0005883a 	mov	r2,zero
   25d70:	003ff206 	br	25d3c <quorem+0x204>

00025d74 <_dtoa_r>:
   25d74:	20801017 	ldw	r2,64(r4)
   25d78:	deffdf04 	addi	sp,sp,-132
   25d7c:	dcc01a15 	stw	r19,104(sp)
   25d80:	dc801915 	stw	r18,100(sp)
   25d84:	dc401815 	stw	r17,96(sp)
   25d88:	dc001715 	stw	r16,92(sp)
   25d8c:	dfc02015 	stw	ra,128(sp)
   25d90:	df001f15 	stw	fp,124(sp)
   25d94:	ddc01e15 	stw	r23,120(sp)
   25d98:	dd801d15 	stw	r22,116(sp)
   25d9c:	dd401c15 	stw	r21,112(sp)
   25da0:	dd001b15 	stw	r20,108(sp)
   25da4:	d9400315 	stw	r5,12(sp)
   25da8:	d9c00415 	stw	r7,16(sp)
   25dac:	2021883a 	mov	r16,r4
   25db0:	3025883a 	mov	r18,r6
   25db4:	dcc02317 	ldw	r19,140(sp)
   25db8:	3023883a 	mov	r17,r6
   25dbc:	10000826 	beq	r2,zero,25de0 <_dtoa_r+0x6c>
   25dc0:	20c01117 	ldw	r3,68(r4)
   25dc4:	01800044 	movi	r6,1
   25dc8:	100b883a 	mov	r5,r2
   25dcc:	30cc983a 	sll	r6,r6,r3
   25dd0:	10c00115 	stw	r3,4(r2)
   25dd4:	11800215 	stw	r6,8(r2)
   25dd8:	0027cec0 	call	27cec <_Bfree>
   25ddc:	80001015 	stw	zero,64(r16)
   25de0:	90002f16 	blt	r18,zero,25ea0 <_dtoa_r+0x12c>
   25de4:	98000015 	stw	zero,0(r19)
   25de8:	90dffc2c 	andhi	r3,r18,32752
   25dec:	009ffc34 	movhi	r2,32752
   25df0:	18801c26 	beq	r3,r2,25e64 <_dtoa_r+0xf0>
   25df4:	d9000317 	ldw	r4,12(sp)
   25df8:	880b883a 	mov	r5,r17
   25dfc:	000d883a 	mov	r6,zero
   25e00:	000f883a 	mov	r7,zero
   25e04:	002a9e80 	call	2a9e8 <__eqdf2>
   25e08:	10002c1e 	bne	r2,zero,25ebc <_dtoa_r+0x148>
   25e0c:	d9002217 	ldw	r4,136(sp)
   25e10:	d9c02417 	ldw	r7,144(sp)
   25e14:	00800044 	movi	r2,1
   25e18:	20800015 	stw	r2,0(r4)
   25e1c:	38019426 	beq	r7,zero,26470 <_dtoa_r+0x6fc>
   25e20:	008000f4 	movhi	r2,3
   25e24:	10ba9144 	addi	r2,r2,-5563
   25e28:	38800015 	stw	r2,0(r7)
   25e2c:	15ffffc4 	addi	r23,r2,-1
   25e30:	b805883a 	mov	r2,r23
   25e34:	dfc02017 	ldw	ra,128(sp)
   25e38:	df001f17 	ldw	fp,124(sp)
   25e3c:	ddc01e17 	ldw	r23,120(sp)
   25e40:	dd801d17 	ldw	r22,116(sp)
   25e44:	dd401c17 	ldw	r21,112(sp)
   25e48:	dd001b17 	ldw	r20,108(sp)
   25e4c:	dcc01a17 	ldw	r19,104(sp)
   25e50:	dc801917 	ldw	r18,100(sp)
   25e54:	dc401817 	ldw	r17,96(sp)
   25e58:	dc001717 	ldw	r16,92(sp)
   25e5c:	dec02104 	addi	sp,sp,132
   25e60:	f800283a 	ret
   25e64:	d8c02217 	ldw	r3,136(sp)
   25e68:	d9000317 	ldw	r4,12(sp)
   25e6c:	0089c3c4 	movi	r2,9999
   25e70:	18800015 	stw	r2,0(r3)
   25e74:	20016c26 	beq	r4,zero,26428 <_dtoa_r+0x6b4>
   25e78:	05c000f4 	movhi	r23,3
   25e7c:	bdfb3d04 	addi	r23,r23,-4876
   25e80:	d9c02417 	ldw	r7,144(sp)
   25e84:	383fea26 	beq	r7,zero,25e30 <_dtoa_r+0xbc>
   25e88:	b88000c7 	ldb	r2,3(r23)
   25e8c:	10016d1e 	bne	r2,zero,26444 <_dtoa_r+0x6d0>
   25e90:	b88000c4 	addi	r2,r23,3
   25e94:	d8c02417 	ldw	r3,144(sp)
   25e98:	18800015 	stw	r2,0(r3)
   25e9c:	003fe406 	br	25e30 <_dtoa_r+0xbc>
   25ea0:	04600034 	movhi	r17,32768
   25ea4:	8c7fffc4 	addi	r17,r17,-1
   25ea8:	9462703a 	and	r17,r18,r17
   25eac:	00800044 	movi	r2,1
   25eb0:	98800015 	stw	r2,0(r19)
   25eb4:	8825883a 	mov	r18,r17
   25eb8:	003fcb06 	br	25de8 <_dtoa_r+0x74>
   25ebc:	d9400317 	ldw	r5,12(sp)
   25ec0:	9028d53a 	srli	r20,r18,20
   25ec4:	d8800204 	addi	r2,sp,8
   25ec8:	d8800015 	stw	r2,0(sp)
   25ecc:	8009883a 	mov	r4,r16
   25ed0:	880d883a 	mov	r6,r17
   25ed4:	d9c00104 	addi	r7,sp,4
   25ed8:	00289380 	call	28938 <__d2b>
   25edc:	a501ffcc 	andi	r20,r20,2047
   25ee0:	1039883a 	mov	fp,r2
   25ee4:	a001591e 	bne	r20,zero,2644c <_dtoa_r+0x6d8>
   25ee8:	dd400217 	ldw	r21,8(sp)
   25eec:	dd000117 	ldw	r20,4(sp)
   25ef0:	00befbc4 	movi	r2,-1041
   25ef4:	ad29883a 	add	r20,r21,r20
   25ef8:	a082d216 	blt	r20,r2,26a44 <_dtoa_r+0xcd0>
   25efc:	d8c00317 	ldw	r3,12(sp)
   25f00:	013f0384 	movi	r4,-1010
   25f04:	2509c83a 	sub	r4,r4,r20
   25f08:	a0810484 	addi	r2,r20,1042
   25f0c:	9124983a 	sll	r18,r18,r4
   25f10:	1884d83a 	srl	r2,r3,r2
   25f14:	9088b03a 	or	r4,r18,r2
   25f18:	002ad6c0 	call	2ad6c <__floatunsidf>
   25f1c:	1009883a 	mov	r4,r2
   25f20:	017f8434 	movhi	r5,65040
   25f24:	00800044 	movi	r2,1
   25f28:	194b883a 	add	r5,r3,r5
   25f2c:	a53fffc4 	addi	r20,r20,-1
   25f30:	d8800f15 	stw	r2,60(sp)
   25f34:	000d883a 	mov	r6,zero
   25f38:	01cffe34 	movhi	r7,16376
   25f3c:	002a4f00 	call	2a4f0 <__subdf3>
   25f40:	1009883a 	mov	r4,r2
   25f44:	180b883a 	mov	r5,r3
   25f48:	0198dbf4 	movhi	r6,25455
   25f4c:	3190d844 	addi	r6,r6,17249
   25f50:	01cff4f4 	movhi	r7,16339
   25f54:	39e1e9c4 	addi	r7,r7,-30809
   25f58:	002a5500 	call	2a550 <__muldf3>
   25f5c:	180b883a 	mov	r5,r3
   25f60:	01a2d874 	movhi	r6,35681
   25f64:	31b22cc4 	addi	r6,r6,-14157
   25f68:	01cff1f4 	movhi	r7,16327
   25f6c:	39e28a04 	addi	r7,r7,-30168
   25f70:	1009883a 	mov	r4,r2
   25f74:	002a49c0 	call	2a49c <__adddf3>
   25f78:	a009883a 	mov	r4,r20
   25f7c:	1027883a 	mov	r19,r2
   25f80:	1825883a 	mov	r18,r3
   25f84:	002abc40 	call	2abc4 <__floatsidf>
   25f88:	1009883a 	mov	r4,r2
   25f8c:	180b883a 	mov	r5,r3
   25f90:	019427f4 	movhi	r6,20639
   25f94:	319e7ec4 	addi	r6,r6,31227
   25f98:	01cff4f4 	movhi	r7,16339
   25f9c:	39d104c4 	addi	r7,r7,17427
   25fa0:	002a5500 	call	2a550 <__muldf3>
   25fa4:	9809883a 	mov	r4,r19
   25fa8:	900b883a 	mov	r5,r18
   25fac:	100d883a 	mov	r6,r2
   25fb0:	180f883a 	mov	r7,r3
   25fb4:	002a49c0 	call	2a49c <__adddf3>
   25fb8:	1009883a 	mov	r4,r2
   25fbc:	180b883a 	mov	r5,r3
   25fc0:	1027883a 	mov	r19,r2
   25fc4:	1825883a 	mov	r18,r3
   25fc8:	002ac980 	call	2ac98 <__fixdfsi>
   25fcc:	9809883a 	mov	r4,r19
   25fd0:	900b883a 	mov	r5,r18
   25fd4:	000d883a 	mov	r6,zero
   25fd8:	000f883a 	mov	r7,zero
   25fdc:	d8800615 	stw	r2,24(sp)
   25fe0:	002ab680 	call	2ab68 <__ltdf2>
   25fe4:	10027e16 	blt	r2,zero,269e0 <_dtoa_r+0xc6c>
   25fe8:	d8c00617 	ldw	r3,24(sp)
   25fec:	00800584 	movi	r2,22
   25ff0:	10c26c36 	bltu	r2,r3,269a4 <_dtoa_r+0xc30>
   25ff4:	180490fa 	slli	r2,r3,3
   25ff8:	00c000f4 	movhi	r3,3
   25ffc:	18fb6204 	addi	r3,r3,-4728
   26000:	d9800317 	ldw	r6,12(sp)
   26004:	1885883a 	add	r2,r3,r2
   26008:	11000017 	ldw	r4,0(r2)
   2600c:	11400117 	ldw	r5,4(r2)
   26010:	880f883a 	mov	r7,r17
   26014:	002aaa00 	call	2aaa0 <__gtdf2>
   26018:	00828f0e 	bge	zero,r2,26a58 <_dtoa_r+0xce4>
   2601c:	d8800617 	ldw	r2,24(sp)
   26020:	d8000d15 	stw	zero,52(sp)
   26024:	10bfffc4 	addi	r2,r2,-1
   26028:	d8800615 	stw	r2,24(sp)
   2602c:	ad29c83a 	sub	r20,r21,r20
   26030:	a53fffc4 	addi	r20,r20,-1
   26034:	a0026616 	blt	r20,zero,269d0 <_dtoa_r+0xc5c>
   26038:	dd000715 	stw	r20,28(sp)
   2603c:	d8000815 	stw	zero,32(sp)
   26040:	d8800617 	ldw	r2,24(sp)
   26044:	10025a16 	blt	r2,zero,269b0 <_dtoa_r+0xc3c>
   26048:	d8c00717 	ldw	r3,28(sp)
   2604c:	d8800b15 	stw	r2,44(sp)
   26050:	d8000a15 	stw	zero,40(sp)
   26054:	1887883a 	add	r3,r3,r2
   26058:	d8c00715 	stw	r3,28(sp)
   2605c:	d9c00417 	ldw	r7,16(sp)
   26060:	00800244 	movi	r2,9
   26064:	11c10536 	bltu	r2,r7,2647c <_dtoa_r+0x708>
   26068:	00800144 	movi	r2,5
   2606c:	11c4c60e 	bge	r2,r7,27388 <_dtoa_r+0x1614>
   26070:	39ffff04 	addi	r7,r7,-4
   26074:	d9c00415 	stw	r7,16(sp)
   26078:	0027883a 	mov	r19,zero
   2607c:	d9c00417 	ldw	r7,16(sp)
   26080:	008000c4 	movi	r2,3
   26084:	3883a226 	beq	r7,r2,26f10 <_dtoa_r+0x119c>
   26088:	11c2bc16 	blt	r2,r7,26b7c <_dtoa_r+0xe08>
   2608c:	00800084 	movi	r2,2
   26090:	3880fb1e 	bne	r7,r2,26480 <_dtoa_r+0x70c>
   26094:	d8000c15 	stw	zero,48(sp)
   26098:	d9002117 	ldw	r4,132(sp)
   2609c:	0103ae0e 	bge	zero,r4,26f58 <_dtoa_r+0x11e4>
   260a0:	2025883a 	mov	r18,r4
   260a4:	d9000e15 	stw	r4,56(sp)
   260a8:	d9000915 	stw	r4,36(sp)
   260ac:	80001115 	stw	zero,68(r16)
   260b0:	008005c4 	movi	r2,23
   260b4:	1484b22e 	bgeu	r2,r18,27380 <_dtoa_r+0x160c>
   260b8:	00c00044 	movi	r3,1
   260bc:	00800104 	movi	r2,4
   260c0:	1085883a 	add	r2,r2,r2
   260c4:	11000504 	addi	r4,r2,20
   260c8:	180b883a 	mov	r5,r3
   260cc:	18c00044 	addi	r3,r3,1
   260d0:	913ffb2e 	bgeu	r18,r4,260c0 <_dtoa_r+0x34c>
   260d4:	81401115 	stw	r5,68(r16)
   260d8:	8009883a 	mov	r4,r16
   260dc:	0027c440 	call	27c44 <_Balloc>
   260e0:	102f883a 	mov	r23,r2
   260e4:	80801015 	stw	r2,64(r16)
   260e8:	00800384 	movi	r2,14
   260ec:	1480f036 	bltu	r2,r18,264b0 <_dtoa_r+0x73c>
   260f0:	9800ef26 	beq	r19,zero,264b0 <_dtoa_r+0x73c>
   260f4:	d8800617 	ldw	r2,24(sp)
   260f8:	00839c0e 	bge	zero,r2,26f6c <_dtoa_r+0x11f8>
   260fc:	d8c00617 	ldw	r3,24(sp)
   26100:	108003cc 	andi	r2,r2,15
   26104:	100490fa 	slli	r2,r2,3
   26108:	182bd13a 	srai	r21,r3,4
   2610c:	00c000f4 	movhi	r3,3
   26110:	18fb6204 	addi	r3,r3,-4728
   26114:	1885883a 	add	r2,r3,r2
   26118:	a8c0040c 	andi	r3,r21,16
   2611c:	12800017 	ldw	r10,0(r2)
   26120:	15800117 	ldw	r22,4(r2)
   26124:	18038726 	beq	r3,zero,26f44 <_dtoa_r+0x11d0>
   26128:	008000f4 	movhi	r2,3
   2612c:	10bb5804 	addi	r2,r2,-4768
   26130:	11800817 	ldw	r6,32(r2)
   26134:	11c00917 	ldw	r7,36(r2)
   26138:	d9000317 	ldw	r4,12(sp)
   2613c:	880b883a 	mov	r5,r17
   26140:	da801515 	stw	r10,84(sp)
   26144:	002a8340 	call	2a834 <__divdf3>
   26148:	da801517 	ldw	r10,84(sp)
   2614c:	d8801015 	stw	r2,64(sp)
   26150:	1829883a 	mov	r20,r3
   26154:	ad4003cc 	andi	r21,r21,15
   26158:	048000c4 	movi	r18,3
   2615c:	a8001126 	beq	r21,zero,261a4 <_dtoa_r+0x430>
   26160:	04c000f4 	movhi	r19,3
   26164:	9cfb5804 	addi	r19,r19,-4768
   26168:	5005883a 	mov	r2,r10
   2616c:	b007883a 	mov	r3,r22
   26170:	a980004c 	andi	r6,r21,1
   26174:	1009883a 	mov	r4,r2
   26178:	a82bd07a 	srai	r21,r21,1
   2617c:	180b883a 	mov	r5,r3
   26180:	30000426 	beq	r6,zero,26194 <_dtoa_r+0x420>
   26184:	99800017 	ldw	r6,0(r19)
   26188:	99c00117 	ldw	r7,4(r19)
   2618c:	94800044 	addi	r18,r18,1
   26190:	002a5500 	call	2a550 <__muldf3>
   26194:	9cc00204 	addi	r19,r19,8
   26198:	a83ff51e 	bne	r21,zero,26170 <_dtoa_r+0x3fc>
   2619c:	1015883a 	mov	r10,r2
   261a0:	182d883a 	mov	r22,r3
   261a4:	d9001017 	ldw	r4,64(sp)
   261a8:	a00b883a 	mov	r5,r20
   261ac:	500d883a 	mov	r6,r10
   261b0:	b00f883a 	mov	r7,r22
   261b4:	002a8340 	call	2a834 <__divdf3>
   261b8:	1027883a 	mov	r19,r2
   261bc:	1829883a 	mov	r20,r3
   261c0:	d8c00d17 	ldw	r3,52(sp)
   261c4:	18000626 	beq	r3,zero,261e0 <_dtoa_r+0x46c>
   261c8:	9809883a 	mov	r4,r19
   261cc:	a00b883a 	mov	r5,r20
   261d0:	000d883a 	mov	r6,zero
   261d4:	01cffc34 	movhi	r7,16368
   261d8:	002ab680 	call	2ab68 <__ltdf2>
   261dc:	10040e16 	blt	r2,zero,27218 <_dtoa_r+0x14a4>
   261e0:	9009883a 	mov	r4,r18
   261e4:	002abc40 	call	2abc4 <__floatsidf>
   261e8:	1009883a 	mov	r4,r2
   261ec:	180b883a 	mov	r5,r3
   261f0:	980d883a 	mov	r6,r19
   261f4:	a00f883a 	mov	r7,r20
   261f8:	002a5500 	call	2a550 <__muldf3>
   261fc:	1009883a 	mov	r4,r2
   26200:	180b883a 	mov	r5,r3
   26204:	000d883a 	mov	r6,zero
   26208:	01d00734 	movhi	r7,16412
   2620c:	002a49c0 	call	2a49c <__adddf3>
   26210:	057f3034 	movhi	r21,64704
   26214:	1d6b883a 	add	r21,r3,r21
   26218:	d8c00917 	ldw	r3,36(sp)
   2621c:	1025883a 	mov	r18,r2
   26220:	18031f26 	beq	r3,zero,26ea0 <_dtoa_r+0x112c>
   26224:	d8800617 	ldw	r2,24(sp)
   26228:	dac00917 	ldw	r11,36(sp)
   2622c:	d8801315 	stw	r2,76(sp)
   26230:	d8c00c17 	ldw	r3,48(sp)
   26234:	18039026 	beq	r3,zero,27078 <_dtoa_r+0x1304>
   26238:	58bfffc4 	addi	r2,r11,-1
   2623c:	100490fa 	slli	r2,r2,3
   26240:	00c000f4 	movhi	r3,3
   26244:	18fb6204 	addi	r3,r3,-4728
   26248:	0009883a 	mov	r4,zero
   2624c:	1885883a 	add	r2,r3,r2
   26250:	11800017 	ldw	r6,0(r2)
   26254:	11c00117 	ldw	r7,4(r2)
   26258:	014ff834 	movhi	r5,16352
   2625c:	dac01615 	stw	r11,88(sp)
   26260:	002a8340 	call	2a834 <__divdf3>
   26264:	900d883a 	mov	r6,r18
   26268:	a80f883a 	mov	r7,r21
   2626c:	1009883a 	mov	r4,r2
   26270:	180b883a 	mov	r5,r3
   26274:	002a4f00 	call	2a4f0 <__subdf3>
   26278:	a00b883a 	mov	r5,r20
   2627c:	9809883a 	mov	r4,r19
   26280:	182b883a 	mov	r21,r3
   26284:	d8801015 	stw	r2,64(sp)
   26288:	002ac980 	call	2ac98 <__fixdfsi>
   2628c:	1009883a 	mov	r4,r2
   26290:	d8801515 	stw	r2,84(sp)
   26294:	002abc40 	call	2abc4 <__floatsidf>
   26298:	9809883a 	mov	r4,r19
   2629c:	a00b883a 	mov	r5,r20
   262a0:	100d883a 	mov	r6,r2
   262a4:	180f883a 	mov	r7,r3
   262a8:	002a4f00 	call	2a4f0 <__subdf3>
   262ac:	da401517 	ldw	r9,84(sp)
   262b0:	d9001017 	ldw	r4,64(sp)
   262b4:	a80b883a 	mov	r5,r21
   262b8:	4d000c04 	addi	r20,r9,48
   262bc:	bd000005 	stb	r20,0(r23)
   262c0:	100d883a 	mov	r6,r2
   262c4:	180f883a 	mov	r7,r3
   262c8:	bd800044 	addi	r22,r23,1
   262cc:	1025883a 	mov	r18,r2
   262d0:	1827883a 	mov	r19,r3
   262d4:	002aaa00 	call	2aaa0 <__gtdf2>
   262d8:	00842216 	blt	zero,r2,27364 <_dtoa_r+0x15f0>
   262dc:	0009883a 	mov	r4,zero
   262e0:	014ffc34 	movhi	r5,16368
   262e4:	900d883a 	mov	r6,r18
   262e8:	980f883a 	mov	r7,r19
   262ec:	002a4f00 	call	2a4f0 <__subdf3>
   262f0:	d9001017 	ldw	r4,64(sp)
   262f4:	a80b883a 	mov	r5,r21
   262f8:	100d883a 	mov	r6,r2
   262fc:	180f883a 	mov	r7,r3
   26300:	002aaa00 	call	2aaa0 <__gtdf2>
   26304:	dac01617 	ldw	r11,88(sp)
   26308:	00841316 	blt	zero,r2,27358 <_dtoa_r+0x15e4>
   2630c:	00800044 	movi	r2,1
   26310:	12c0670e 	bge	r2,r11,264b0 <_dtoa_r+0x73c>
   26314:	bad7883a 	add	r11,r23,r11
   26318:	df001115 	stw	fp,68(sp)
   2631c:	dc401215 	stw	r17,72(sp)
   26320:	5839883a 	mov	fp,r11
   26324:	dc401017 	ldw	r17,64(sp)
   26328:	00000806 	br	2634c <_dtoa_r+0x5d8>
   2632c:	002a4f00 	call	2a4f0 <__subdf3>
   26330:	1009883a 	mov	r4,r2
   26334:	180b883a 	mov	r5,r3
   26338:	880d883a 	mov	r6,r17
   2633c:	a80f883a 	mov	r7,r21
   26340:	002ab680 	call	2ab68 <__ltdf2>
   26344:	1003ee16 	blt	r2,zero,27300 <_dtoa_r+0x158c>
   26348:	b703f126 	beq	r22,fp,27310 <_dtoa_r+0x159c>
   2634c:	8809883a 	mov	r4,r17
   26350:	a80b883a 	mov	r5,r21
   26354:	000d883a 	mov	r6,zero
   26358:	01d00934 	movhi	r7,16420
   2635c:	002a5500 	call	2a550 <__muldf3>
   26360:	000d883a 	mov	r6,zero
   26364:	01d00934 	movhi	r7,16420
   26368:	9009883a 	mov	r4,r18
   2636c:	980b883a 	mov	r5,r19
   26370:	1023883a 	mov	r17,r2
   26374:	182b883a 	mov	r21,r3
   26378:	002a5500 	call	2a550 <__muldf3>
   2637c:	180b883a 	mov	r5,r3
   26380:	1009883a 	mov	r4,r2
   26384:	1825883a 	mov	r18,r3
   26388:	1027883a 	mov	r19,r2
   2638c:	002ac980 	call	2ac98 <__fixdfsi>
   26390:	1009883a 	mov	r4,r2
   26394:	1029883a 	mov	r20,r2
   26398:	002abc40 	call	2abc4 <__floatsidf>
   2639c:	9809883a 	mov	r4,r19
   263a0:	900b883a 	mov	r5,r18
   263a4:	100d883a 	mov	r6,r2
   263a8:	180f883a 	mov	r7,r3
   263ac:	002a4f00 	call	2a4f0 <__subdf3>
   263b0:	a5000c04 	addi	r20,r20,48
   263b4:	b5000005 	stb	r20,0(r22)
   263b8:	1009883a 	mov	r4,r2
   263bc:	180b883a 	mov	r5,r3
   263c0:	880d883a 	mov	r6,r17
   263c4:	a80f883a 	mov	r7,r21
   263c8:	1025883a 	mov	r18,r2
   263cc:	1827883a 	mov	r19,r3
   263d0:	002ab680 	call	2ab68 <__ltdf2>
   263d4:	b5800044 	addi	r22,r22,1
   263d8:	0009883a 	mov	r4,zero
   263dc:	014ffc34 	movhi	r5,16368
   263e0:	900d883a 	mov	r6,r18
   263e4:	980f883a 	mov	r7,r19
   263e8:	103fd00e 	bge	r2,zero,2632c <_dtoa_r+0x5b8>
   263ec:	d9001317 	ldw	r4,76(sp)
   263f0:	df001117 	ldw	fp,68(sp)
   263f4:	d9000615 	stw	r4,24(sp)
   263f8:	8009883a 	mov	r4,r16
   263fc:	e00b883a 	mov	r5,fp
   26400:	0027cec0 	call	27cec <_Bfree>
   26404:	d9c00617 	ldw	r7,24(sp)
   26408:	d8c02217 	ldw	r3,136(sp)
   2640c:	d9002417 	ldw	r4,144(sp)
   26410:	b0000005 	stb	zero,0(r22)
   26414:	38800044 	addi	r2,r7,1
   26418:	18800015 	stw	r2,0(r3)
   2641c:	203e8426 	beq	r4,zero,25e30 <_dtoa_r+0xbc>
   26420:	25800015 	stw	r22,0(r4)
   26424:	003e8206 	br	25e30 <_dtoa_r+0xbc>
   26428:	00800434 	movhi	r2,16
   2642c:	10bfffc4 	addi	r2,r2,-1
   26430:	90a4703a 	and	r18,r18,r2
   26434:	903e901e 	bne	r18,zero,25e78 <_dtoa_r+0x104>
   26438:	05c000f4 	movhi	r23,3
   2643c:	bdfb3a04 	addi	r23,r23,-4888
   26440:	003e8f06 	br	25e80 <_dtoa_r+0x10c>
   26444:	b8800204 	addi	r2,r23,8
   26448:	003e9206 	br	25e94 <_dtoa_r+0x120>
   2644c:	01400434 	movhi	r5,16
   26450:	297fffc4 	addi	r5,r5,-1
   26454:	894a703a 	and	r5,r17,r5
   26458:	d9000317 	ldw	r4,12(sp)
   2645c:	294ffc34 	orhi	r5,r5,16368
   26460:	a53f0044 	addi	r20,r20,-1023
   26464:	dd400217 	ldw	r21,8(sp)
   26468:	d8000f15 	stw	zero,60(sp)
   2646c:	003eb106 	br	25f34 <_dtoa_r+0x1c0>
   26470:	05c000f4 	movhi	r23,3
   26474:	bdfa9104 	addi	r23,r23,-5564
   26478:	003e6d06 	br	25e30 <_dtoa_r+0xbc>
   2647c:	d8000415 	stw	zero,16(sp)
   26480:	80001115 	stw	zero,68(r16)
   26484:	8009883a 	mov	r4,r16
   26488:	000b883a 	mov	r5,zero
   2648c:	0027c440 	call	27c44 <_Balloc>
   26490:	01ffffc4 	movi	r7,-1
   26494:	102f883a 	mov	r23,r2
   26498:	80801015 	stw	r2,64(r16)
   2649c:	00800044 	movi	r2,1
   264a0:	d9c00915 	stw	r7,36(sp)
   264a4:	d8002115 	stw	zero,132(sp)
   264a8:	d9c00e15 	stw	r7,56(sp)
   264ac:	d8800c15 	stw	r2,48(sp)
   264b0:	d8800117 	ldw	r2,4(sp)
   264b4:	10008b16 	blt	r2,zero,266e4 <_dtoa_r+0x970>
   264b8:	d9000617 	ldw	r4,24(sp)
   264bc:	00c00384 	movi	r3,14
   264c0:	19008816 	blt	r3,r4,266e4 <_dtoa_r+0x970>
   264c4:	200490fa 	slli	r2,r4,3
   264c8:	d9c02117 	ldw	r7,132(sp)
   264cc:	00c000f4 	movhi	r3,3
   264d0:	18fb6204 	addi	r3,r3,-4728
   264d4:	1885883a 	add	r2,r3,r2
   264d8:	14800017 	ldw	r18,0(r2)
   264dc:	14c00117 	ldw	r19,4(r2)
   264e0:	3801c916 	blt	r7,zero,26c08 <_dtoa_r+0xe94>
   264e4:	d9000317 	ldw	r4,12(sp)
   264e8:	900d883a 	mov	r6,r18
   264ec:	980f883a 	mov	r7,r19
   264f0:	880b883a 	mov	r5,r17
   264f4:	002a8340 	call	2a834 <__divdf3>
   264f8:	180b883a 	mov	r5,r3
   264fc:	1009883a 	mov	r4,r2
   26500:	002ac980 	call	2ac98 <__fixdfsi>
   26504:	1009883a 	mov	r4,r2
   26508:	102b883a 	mov	r21,r2
   2650c:	002abc40 	call	2abc4 <__floatsidf>
   26510:	1009883a 	mov	r4,r2
   26514:	180b883a 	mov	r5,r3
   26518:	900d883a 	mov	r6,r18
   2651c:	980f883a 	mov	r7,r19
   26520:	002a5500 	call	2a550 <__muldf3>
   26524:	d9000317 	ldw	r4,12(sp)
   26528:	880b883a 	mov	r5,r17
   2652c:	100d883a 	mov	r6,r2
   26530:	180f883a 	mov	r7,r3
   26534:	002a4f00 	call	2a4f0 <__subdf3>
   26538:	d9c00917 	ldw	r7,36(sp)
   2653c:	1009883a 	mov	r4,r2
   26540:	a8800c04 	addi	r2,r21,48
   26544:	b8800005 	stb	r2,0(r23)
   26548:	01800044 	movi	r6,1
   2654c:	180b883a 	mov	r5,r3
   26550:	2005883a 	mov	r2,r4
   26554:	bd800044 	addi	r22,r23,1
   26558:	39803726 	beq	r7,r6,26638 <_dtoa_r+0x8c4>
   2655c:	000d883a 	mov	r6,zero
   26560:	01d00934 	movhi	r7,16420
   26564:	002a5500 	call	2a550 <__muldf3>
   26568:	1009883a 	mov	r4,r2
   2656c:	180b883a 	mov	r5,r3
   26570:	000d883a 	mov	r6,zero
   26574:	000f883a 	mov	r7,zero
   26578:	1029883a 	mov	r20,r2
   2657c:	1823883a 	mov	r17,r3
   26580:	002a9e80 	call	2a9e8 <__eqdf2>
   26584:	103f9c26 	beq	r2,zero,263f8 <_dtoa_r+0x684>
   26588:	dd400917 	ldw	r21,36(sp)
   2658c:	dc000415 	stw	r16,16(sp)
   26590:	00000906 	br	265b8 <_dtoa_r+0x844>
   26594:	002a5500 	call	2a550 <__muldf3>
   26598:	1009883a 	mov	r4,r2
   2659c:	180b883a 	mov	r5,r3
   265a0:	000d883a 	mov	r6,zero
   265a4:	000f883a 	mov	r7,zero
   265a8:	1029883a 	mov	r20,r2
   265ac:	1823883a 	mov	r17,r3
   265b0:	002a9e80 	call	2a9e8 <__eqdf2>
   265b4:	10022926 	beq	r2,zero,26e5c <_dtoa_r+0x10e8>
   265b8:	900d883a 	mov	r6,r18
   265bc:	980f883a 	mov	r7,r19
   265c0:	a009883a 	mov	r4,r20
   265c4:	880b883a 	mov	r5,r17
   265c8:	002a8340 	call	2a834 <__divdf3>
   265cc:	180b883a 	mov	r5,r3
   265d0:	1009883a 	mov	r4,r2
   265d4:	002ac980 	call	2ac98 <__fixdfsi>
   265d8:	1009883a 	mov	r4,r2
   265dc:	1021883a 	mov	r16,r2
   265e0:	002abc40 	call	2abc4 <__floatsidf>
   265e4:	1009883a 	mov	r4,r2
   265e8:	180b883a 	mov	r5,r3
   265ec:	900d883a 	mov	r6,r18
   265f0:	980f883a 	mov	r7,r19
   265f4:	002a5500 	call	2a550 <__muldf3>
   265f8:	a009883a 	mov	r4,r20
   265fc:	880b883a 	mov	r5,r17
   26600:	100d883a 	mov	r6,r2
   26604:	180f883a 	mov	r7,r3
   26608:	002a4f00 	call	2a4f0 <__subdf3>
   2660c:	82400c04 	addi	r9,r16,48
   26610:	b2400005 	stb	r9,0(r22)
   26614:	b5800044 	addi	r22,r22,1
   26618:	b5d3c83a 	sub	r9,r22,r23
   2661c:	000d883a 	mov	r6,zero
   26620:	01d00934 	movhi	r7,16420
   26624:	1009883a 	mov	r4,r2
   26628:	180b883a 	mov	r5,r3
   2662c:	aa7fd91e 	bne	r21,r9,26594 <_dtoa_r+0x820>
   26630:	802b883a 	mov	r21,r16
   26634:	dc000417 	ldw	r16,16(sp)
   26638:	1009883a 	mov	r4,r2
   2663c:	180b883a 	mov	r5,r3
   26640:	100d883a 	mov	r6,r2
   26644:	180f883a 	mov	r7,r3
   26648:	002a49c0 	call	2a49c <__adddf3>
   2664c:	9009883a 	mov	r4,r18
   26650:	980b883a 	mov	r5,r19
   26654:	100d883a 	mov	r6,r2
   26658:	180f883a 	mov	r7,r3
   2665c:	1023883a 	mov	r17,r2
   26660:	1829883a 	mov	r20,r3
   26664:	002ab680 	call	2ab68 <__ltdf2>
   26668:	10000816 	blt	r2,zero,2668c <_dtoa_r+0x918>
   2666c:	9009883a 	mov	r4,r18
   26670:	980b883a 	mov	r5,r19
   26674:	880d883a 	mov	r6,r17
   26678:	a00f883a 	mov	r7,r20
   2667c:	002a9e80 	call	2a9e8 <__eqdf2>
   26680:	103f5d1e 	bne	r2,zero,263f8 <_dtoa_r+0x684>
   26684:	ad40004c 	andi	r21,r21,1
   26688:	a83f5b26 	beq	r21,zero,263f8 <_dtoa_r+0x684>
   2668c:	b53fffc3 	ldbu	r20,-1(r22)
   26690:	b0ffff84 	addi	r3,r22,-2
   26694:	01400e44 	movi	r5,57
   26698:	00000306 	br	266a8 <_dtoa_r+0x934>
   2669c:	1d000003 	ldbu	r20,0(r3)
   266a0:	102d883a 	mov	r22,r2
   266a4:	18ffffc4 	addi	r3,r3,-1
   266a8:	a1003fcc 	andi	r4,r20,255
   266ac:	2100201c 	xori	r4,r4,128
   266b0:	213fe004 	addi	r4,r4,-128
   266b4:	b0bfffc4 	addi	r2,r22,-1
   266b8:	2142ca1e 	bne	r4,r5,271e4 <_dtoa_r+0x1470>
   266bc:	b8bff71e 	bne	r23,r2,2669c <_dtoa_r+0x928>
   266c0:	d8800617 	ldw	r2,24(sp)
   266c4:	05000c44 	movi	r20,49
   266c8:	10800044 	addi	r2,r2,1
   266cc:	d8800615 	stw	r2,24(sp)
   266d0:	00800c04 	movi	r2,48
   266d4:	b8800005 	stb	r2,0(r23)
   266d8:	b805883a 	mov	r2,r23
   266dc:	15000005 	stb	r20,0(r2)
   266e0:	003f4506 	br	263f8 <_dtoa_r+0x684>
   266e4:	d9c00c17 	ldw	r7,48(sp)
   266e8:	3800c926 	beq	r7,zero,26a10 <_dtoa_r+0xc9c>
   266ec:	d9c00417 	ldw	r7,16(sp)
   266f0:	00c00044 	movi	r3,1
   266f4:	19c16c0e 	bge	r3,r7,26ca8 <_dtoa_r+0xf34>
   266f8:	d9000917 	ldw	r4,36(sp)
   266fc:	d9c00a17 	ldw	r7,40(sp)
   26700:	24ffffc4 	addi	r19,r4,-1
   26704:	3cc20716 	blt	r7,r19,26f24 <_dtoa_r+0x11b0>
   26708:	3ce7c83a 	sub	r19,r7,r19
   2670c:	d9c00917 	ldw	r7,36(sp)
   26710:	3802ae16 	blt	r7,zero,271cc <_dtoa_r+0x1458>
   26714:	dc800817 	ldw	r18,32(sp)
   26718:	d8800917 	ldw	r2,36(sp)
   2671c:	d8c00817 	ldw	r3,32(sp)
   26720:	d9c00717 	ldw	r7,28(sp)
   26724:	8009883a 	mov	r4,r16
   26728:	1887883a 	add	r3,r3,r2
   2672c:	388f883a 	add	r7,r7,r2
   26730:	01400044 	movi	r5,1
   26734:	d8c00815 	stw	r3,32(sp)
   26738:	d9c00715 	stw	r7,28(sp)
   2673c:	00280740 	call	28074 <__i2b>
   26740:	102b883a 	mov	r21,r2
   26744:	90000a26 	beq	r18,zero,26770 <_dtoa_r+0x9fc>
   26748:	d8800717 	ldw	r2,28(sp)
   2674c:	0080080e 	bge	zero,r2,26770 <_dtoa_r+0x9fc>
   26750:	90812b16 	blt	r18,r2,26c00 <_dtoa_r+0xe8c>
   26754:	d8c00817 	ldw	r3,32(sp)
   26758:	d9000717 	ldw	r4,28(sp)
   2675c:	90a5c83a 	sub	r18,r18,r2
   26760:	1887c83a 	sub	r3,r3,r2
   26764:	2089c83a 	sub	r4,r4,r2
   26768:	d8c00815 	stw	r3,32(sp)
   2676c:	d9000715 	stw	r4,28(sp)
   26770:	d9c00a17 	ldw	r7,40(sp)
   26774:	01c0140e 	bge	zero,r7,267c8 <_dtoa_r+0xa54>
   26778:	d8800c17 	ldw	r2,48(sp)
   2677c:	1001de26 	beq	r2,zero,26ef8 <_dtoa_r+0x1184>
   26780:	04c00e0e 	bge	zero,r19,267bc <_dtoa_r+0xa48>
   26784:	a80b883a 	mov	r5,r21
   26788:	8009883a 	mov	r4,r16
   2678c:	980d883a 	mov	r6,r19
   26790:	00283080 	call	28308 <__pow5mult>
   26794:	e00d883a 	mov	r6,fp
   26798:	8009883a 	mov	r4,r16
   2679c:	100b883a 	mov	r5,r2
   267a0:	102b883a 	mov	r21,r2
   267a4:	00280b00 	call	280b0 <__multiply>
   267a8:	1029883a 	mov	r20,r2
   267ac:	e00b883a 	mov	r5,fp
   267b0:	8009883a 	mov	r4,r16
   267b4:	0027cec0 	call	27cec <_Bfree>
   267b8:	a039883a 	mov	fp,r20
   267bc:	d8c00a17 	ldw	r3,40(sp)
   267c0:	1ccdc83a 	sub	r6,r3,r19
   267c4:	3001291e 	bne	r6,zero,26c6c <_dtoa_r+0xef8>
   267c8:	8009883a 	mov	r4,r16
   267cc:	01400044 	movi	r5,1
   267d0:	00280740 	call	28074 <__i2b>
   267d4:	d9000b17 	ldw	r4,44(sp)
   267d8:	1029883a 	mov	r20,r2
   267dc:	0100050e 	bge	zero,r4,267f4 <_dtoa_r+0xa80>
   267e0:	d9800b17 	ldw	r6,44(sp)
   267e4:	8009883a 	mov	r4,r16
   267e8:	100b883a 	mov	r5,r2
   267ec:	00283080 	call	28308 <__pow5mult>
   267f0:	1029883a 	mov	r20,r2
   267f4:	d9c00417 	ldw	r7,16(sp)
   267f8:	00800044 	movi	r2,1
   267fc:	11c0f00e 	bge	r2,r7,26bc0 <_dtoa_r+0xe4c>
   26800:	0023883a 	mov	r17,zero
   26804:	d8800b17 	ldw	r2,44(sp)
   26808:	1001741e 	bne	r2,zero,26ddc <_dtoa_r+0x1068>
   2680c:	00800044 	movi	r2,1
   26810:	d8c00717 	ldw	r3,28(sp)
   26814:	10c5883a 	add	r2,r2,r3
   26818:	108007cc 	andi	r2,r2,31
   2681c:	10008026 	beq	r2,zero,26a20 <_dtoa_r+0xcac>
   26820:	01000804 	movi	r4,32
   26824:	2089c83a 	sub	r4,r4,r2
   26828:	00c00104 	movi	r3,4
   2682c:	1902d00e 	bge	r3,r4,27370 <_dtoa_r+0x15fc>
   26830:	d9000817 	ldw	r4,32(sp)
   26834:	d9c00717 	ldw	r7,28(sp)
   26838:	00c00704 	movi	r3,28
   2683c:	1885c83a 	sub	r2,r3,r2
   26840:	2089883a 	add	r4,r4,r2
   26844:	388f883a 	add	r7,r7,r2
   26848:	d9000815 	stw	r4,32(sp)
   2684c:	90a5883a 	add	r18,r18,r2
   26850:	d9c00715 	stw	r7,28(sp)
   26854:	d9c00817 	ldw	r7,32(sp)
   26858:	01c0050e 	bge	zero,r7,26870 <_dtoa_r+0xafc>
   2685c:	e00b883a 	mov	r5,fp
   26860:	8009883a 	mov	r4,r16
   26864:	380d883a 	mov	r6,r7
   26868:	00284340 	call	28434 <__lshift>
   2686c:	1039883a 	mov	fp,r2
   26870:	d8800717 	ldw	r2,28(sp)
   26874:	0080050e 	bge	zero,r2,2688c <_dtoa_r+0xb18>
   26878:	a00b883a 	mov	r5,r20
   2687c:	8009883a 	mov	r4,r16
   26880:	100d883a 	mov	r6,r2
   26884:	00284340 	call	28434 <__lshift>
   26888:	1029883a 	mov	r20,r2
   2688c:	d8c00d17 	ldw	r3,52(sp)
   26890:	1801401e 	bne	r3,zero,26d94 <_dtoa_r+0x1020>
   26894:	d8800917 	ldw	r2,36(sp)
   26898:	00815a0e 	bge	zero,r2,26e04 <_dtoa_r+0x1090>
   2689c:	d8c00c17 	ldw	r3,48(sp)
   268a0:	18006f1e 	bne	r3,zero,26a60 <_dtoa_r+0xcec>
   268a4:	b823883a 	mov	r17,r23
   268a8:	dc800917 	ldw	r18,36(sp)
   268ac:	00000206 	br	268b8 <_dtoa_r+0xb44>
   268b0:	0027d140 	call	27d14 <__multadd>
   268b4:	1039883a 	mov	fp,r2
   268b8:	e009883a 	mov	r4,fp
   268bc:	a00b883a 	mov	r5,r20
   268c0:	0025b380 	call	25b38 <quorem>
   268c4:	10800c04 	addi	r2,r2,48
   268c8:	88800005 	stb	r2,0(r17)
   268cc:	8c400044 	addi	r17,r17,1
   268d0:	8dc7c83a 	sub	r3,r17,r23
   268d4:	8009883a 	mov	r4,r16
   268d8:	e00b883a 	mov	r5,fp
   268dc:	01800284 	movi	r6,10
   268e0:	000f883a 	mov	r7,zero
   268e4:	1cbff216 	blt	r3,r18,268b0 <_dtoa_r+0xb3c>
   268e8:	dd800917 	ldw	r22,36(sp)
   268ec:	1007883a 	mov	r3,r2
   268f0:	05823a0e 	bge	zero,r22,271dc <_dtoa_r+0x1468>
   268f4:	bdad883a 	add	r22,r23,r22
   268f8:	0023883a 	mov	r17,zero
   268fc:	e00b883a 	mov	r5,fp
   26900:	01800044 	movi	r6,1
   26904:	8009883a 	mov	r4,r16
   26908:	d8c01515 	stw	r3,84(sp)
   2690c:	00284340 	call	28434 <__lshift>
   26910:	1009883a 	mov	r4,r2
   26914:	a00b883a 	mov	r5,r20
   26918:	1039883a 	mov	fp,r2
   2691c:	00285900 	call	28590 <__mcmp>
   26920:	d8c01517 	ldw	r3,84(sp)
   26924:	0080d60e 	bge	zero,r2,26c80 <_dtoa_r+0xf0c>
   26928:	b13fffc3 	ldbu	r4,-1(r22)
   2692c:	b0ffff84 	addi	r3,r22,-2
   26930:	01800e44 	movi	r6,57
   26934:	00000306 	br	26944 <_dtoa_r+0xbd0>
   26938:	19000003 	ldbu	r4,0(r3)
   2693c:	102d883a 	mov	r22,r2
   26940:	18ffffc4 	addi	r3,r3,-1
   26944:	21403fcc 	andi	r5,r4,255
   26948:	2940201c 	xori	r5,r5,128
   2694c:	297fe004 	addi	r5,r5,-128
   26950:	b0bfffc4 	addi	r2,r22,-1
   26954:	2981a71e 	bne	r5,r6,26ff4 <_dtoa_r+0x1280>
   26958:	b8bff71e 	bne	r23,r2,26938 <_dtoa_r+0xbc4>
   2695c:	d8800617 	ldw	r2,24(sp)
   26960:	10800044 	addi	r2,r2,1
   26964:	d8800615 	stw	r2,24(sp)
   26968:	00800c44 	movi	r2,49
   2696c:	b8800005 	stb	r2,0(r23)
   26970:	8009883a 	mov	r4,r16
   26974:	a00b883a 	mov	r5,r20
   26978:	0027cec0 	call	27cec <_Bfree>
   2697c:	a83e9e26 	beq	r21,zero,263f8 <_dtoa_r+0x684>
   26980:	88000426 	beq	r17,zero,26994 <_dtoa_r+0xc20>
   26984:	8d400326 	beq	r17,r21,26994 <_dtoa_r+0xc20>
   26988:	8009883a 	mov	r4,r16
   2698c:	880b883a 	mov	r5,r17
   26990:	0027cec0 	call	27cec <_Bfree>
   26994:	8009883a 	mov	r4,r16
   26998:	a80b883a 	mov	r5,r21
   2699c:	0027cec0 	call	27cec <_Bfree>
   269a0:	003e9506 	br	263f8 <_dtoa_r+0x684>
   269a4:	00c00044 	movi	r3,1
   269a8:	d8c00d15 	stw	r3,52(sp)
   269ac:	003d9f06 	br	2602c <_dtoa_r+0x2b8>
   269b0:	d9000817 	ldw	r4,32(sp)
   269b4:	d8800617 	ldw	r2,24(sp)
   269b8:	d8000b15 	stw	zero,44(sp)
   269bc:	2089c83a 	sub	r4,r4,r2
   269c0:	0087c83a 	sub	r3,zero,r2
   269c4:	d9000815 	stw	r4,32(sp)
   269c8:	d8c00a15 	stw	r3,40(sp)
   269cc:	003da306 	br	2605c <_dtoa_r+0x2e8>
   269d0:	0529c83a 	sub	r20,zero,r20
   269d4:	dd000815 	stw	r20,32(sp)
   269d8:	d8000715 	stw	zero,28(sp)
   269dc:	003d9806 	br	26040 <_dtoa_r+0x2cc>
   269e0:	d9000617 	ldw	r4,24(sp)
   269e4:	002abc40 	call	2abc4 <__floatsidf>
   269e8:	1009883a 	mov	r4,r2
   269ec:	180b883a 	mov	r5,r3
   269f0:	980d883a 	mov	r6,r19
   269f4:	900f883a 	mov	r7,r18
   269f8:	002aa440 	call	2aa44 <__nedf2>
   269fc:	103d7a26 	beq	r2,zero,25fe8 <_dtoa_r+0x274>
   26a00:	d8800617 	ldw	r2,24(sp)
   26a04:	10bfffc4 	addi	r2,r2,-1
   26a08:	d8800615 	stw	r2,24(sp)
   26a0c:	003d7606 	br	25fe8 <_dtoa_r+0x274>
   26a10:	dcc00a17 	ldw	r19,40(sp)
   26a14:	dc800817 	ldw	r18,32(sp)
   26a18:	002b883a 	mov	r21,zero
   26a1c:	003f4906 	br	26744 <_dtoa_r+0x9d0>
   26a20:	00800704 	movi	r2,28
   26a24:	d8c00817 	ldw	r3,32(sp)
   26a28:	d9000717 	ldw	r4,28(sp)
   26a2c:	90a5883a 	add	r18,r18,r2
   26a30:	1887883a 	add	r3,r3,r2
   26a34:	2089883a 	add	r4,r4,r2
   26a38:	d8c00815 	stw	r3,32(sp)
   26a3c:	d9000715 	stw	r4,28(sp)
   26a40:	003f8406 	br	26854 <_dtoa_r+0xae0>
   26a44:	d9c00317 	ldw	r7,12(sp)
   26a48:	013efb84 	movi	r4,-1042
   26a4c:	2509c83a 	sub	r4,r4,r20
   26a50:	3908983a 	sll	r4,r7,r4
   26a54:	003d3006 	br	25f18 <_dtoa_r+0x1a4>
   26a58:	d8000d15 	stw	zero,52(sp)
   26a5c:	003d7306 	br	2602c <_dtoa_r+0x2b8>
   26a60:	0480050e 	bge	zero,r18,26a78 <_dtoa_r+0xd04>
   26a64:	a80b883a 	mov	r5,r21
   26a68:	8009883a 	mov	r4,r16
   26a6c:	900d883a 	mov	r6,r18
   26a70:	00284340 	call	28434 <__lshift>
   26a74:	102b883a 	mov	r21,r2
   26a78:	8801611e 	bne	r17,zero,27000 <_dtoa_r+0x128c>
   26a7c:	a827883a 	mov	r19,r21
   26a80:	d8c00317 	ldw	r3,12(sp)
   26a84:	d9000917 	ldw	r4,36(sp)
   26a88:	b8bfffc4 	addi	r2,r23,-1
   26a8c:	18c0004c 	andi	r3,r3,1
   26a90:	1105883a 	add	r2,r2,r4
   26a94:	b825883a 	mov	r18,r23
   26a98:	d8800515 	stw	r2,20(sp)
   26a9c:	a823883a 	mov	r17,r21
   26aa0:	d8c00315 	stw	r3,12(sp)
   26aa4:	ddc00715 	stw	r23,28(sp)
   26aa8:	e009883a 	mov	r4,fp
   26aac:	a00b883a 	mov	r5,r20
   26ab0:	0025b380 	call	25b38 <quorem>
   26ab4:	e009883a 	mov	r4,fp
   26ab8:	880b883a 	mov	r5,r17
   26abc:	102d883a 	mov	r22,r2
   26ac0:	00285900 	call	28590 <__mcmp>
   26ac4:	980d883a 	mov	r6,r19
   26ac8:	8009883a 	mov	r4,r16
   26acc:	a00b883a 	mov	r5,r20
   26ad0:	102b883a 	mov	r21,r2
   26ad4:	00285e80 	call	285e8 <__mdiff>
   26ad8:	100d883a 	mov	r6,r2
   26adc:	10800317 	ldw	r2,12(r2)
   26ae0:	b5c00c04 	addi	r23,r22,48
   26ae4:	10008c26 	beq	r2,zero,26d18 <_dtoa_r+0xfa4>
   26ae8:	8009883a 	mov	r4,r16
   26aec:	300b883a 	mov	r5,r6
   26af0:	0027cec0 	call	27cec <_Bfree>
   26af4:	00800044 	movi	r2,1
   26af8:	a8007116 	blt	r21,zero,26cc0 <_dtoa_r+0xf4c>
   26afc:	a800041e 	bne	r21,zero,26b10 <_dtoa_r+0xd9c>
   26b00:	d9c00417 	ldw	r7,16(sp)
   26b04:	3800021e 	bne	r7,zero,26b10 <_dtoa_r+0xd9c>
   26b08:	d8c00317 	ldw	r3,12(sp)
   26b0c:	18006c26 	beq	r3,zero,26cc0 <_dtoa_r+0xf4c>
   26b10:	00814c16 	blt	zero,r2,27044 <_dtoa_r+0x12d0>
   26b14:	d8c00517 	ldw	r3,20(sp)
   26b18:	95400044 	addi	r21,r18,1
   26b1c:	95c00005 	stb	r23,0(r18)
   26b20:	a82d883a 	mov	r22,r21
   26b24:	90c14d26 	beq	r18,r3,2705c <_dtoa_r+0x12e8>
   26b28:	e00b883a 	mov	r5,fp
   26b2c:	8009883a 	mov	r4,r16
   26b30:	01800284 	movi	r6,10
   26b34:	000f883a 	mov	r7,zero
   26b38:	0027d140 	call	27d14 <__multadd>
   26b3c:	1039883a 	mov	fp,r2
   26b40:	8cc08b26 	beq	r17,r19,26d70 <_dtoa_r+0xffc>
   26b44:	880b883a 	mov	r5,r17
   26b48:	01800284 	movi	r6,10
   26b4c:	000f883a 	mov	r7,zero
   26b50:	8009883a 	mov	r4,r16
   26b54:	0027d140 	call	27d14 <__multadd>
   26b58:	980b883a 	mov	r5,r19
   26b5c:	8009883a 	mov	r4,r16
   26b60:	01800284 	movi	r6,10
   26b64:	000f883a 	mov	r7,zero
   26b68:	1023883a 	mov	r17,r2
   26b6c:	0027d140 	call	27d14 <__multadd>
   26b70:	1027883a 	mov	r19,r2
   26b74:	a825883a 	mov	r18,r21
   26b78:	003fcb06 	br	26aa8 <_dtoa_r+0xd34>
   26b7c:	d9c00417 	ldw	r7,16(sp)
   26b80:	00800104 	movi	r2,4
   26b84:	3880e426 	beq	r7,r2,26f18 <_dtoa_r+0x11a4>
   26b88:	00800144 	movi	r2,5
   26b8c:	38be3c1e 	bne	r7,r2,26480 <_dtoa_r+0x70c>
   26b90:	00c00044 	movi	r3,1
   26b94:	d8c00c15 	stw	r3,48(sp)
   26b98:	d9c02117 	ldw	r7,132(sp)
   26b9c:	d8800617 	ldw	r2,24(sp)
   26ba0:	388f883a 	add	r7,r7,r2
   26ba4:	3c800044 	addi	r18,r7,1
   26ba8:	d9c00e15 	stw	r7,56(sp)
   26bac:	dc800915 	stw	r18,36(sp)
   26bb0:	04bd3e16 	blt	zero,r18,260ac <_dtoa_r+0x338>
   26bb4:	80001115 	stw	zero,68(r16)
   26bb8:	000b883a 	mov	r5,zero
   26bbc:	003d4606 	br	260d8 <_dtoa_r+0x364>
   26bc0:	d8c00317 	ldw	r3,12(sp)
   26bc4:	183f0e1e 	bne	r3,zero,26800 <_dtoa_r+0xa8c>
   26bc8:	00c00434 	movhi	r3,16
   26bcc:	18ffffc4 	addi	r3,r3,-1
   26bd0:	88c6703a 	and	r3,r17,r3
   26bd4:	183f0a1e 	bne	r3,zero,26800 <_dtoa_r+0xa8c>
   26bd8:	8c5ffc2c 	andhi	r17,r17,32752
   26bdc:	883f0826 	beq	r17,zero,26800 <_dtoa_r+0xa8c>
   26be0:	d9000817 	ldw	r4,32(sp)
   26be4:	d9c00717 	ldw	r7,28(sp)
   26be8:	1023883a 	mov	r17,r2
   26bec:	2089883a 	add	r4,r4,r2
   26bf0:	388f883a 	add	r7,r7,r2
   26bf4:	d9000815 	stw	r4,32(sp)
   26bf8:	d9c00715 	stw	r7,28(sp)
   26bfc:	003f0106 	br	26804 <_dtoa_r+0xa90>
   26c00:	9005883a 	mov	r2,r18
   26c04:	003ed306 	br	26754 <_dtoa_r+0x9e0>
   26c08:	d8800917 	ldw	r2,36(sp)
   26c0c:	00be3516 	blt	zero,r2,264e4 <_dtoa_r+0x770>
   26c10:	1000b61e 	bne	r2,zero,26eec <_dtoa_r+0x1178>
   26c14:	9009883a 	mov	r4,r18
   26c18:	980b883a 	mov	r5,r19
   26c1c:	000d883a 	mov	r6,zero
   26c20:	01d00534 	movhi	r7,16404
   26c24:	002a5500 	call	2a550 <__muldf3>
   26c28:	d9800317 	ldw	r6,12(sp)
   26c2c:	1009883a 	mov	r4,r2
   26c30:	180b883a 	mov	r5,r3
   26c34:	880f883a 	mov	r7,r17
   26c38:	002ab040 	call	2ab04 <__gedf2>
   26c3c:	0029883a 	mov	r20,zero
   26c40:	002b883a 	mov	r21,zero
   26c44:	10007e16 	blt	r2,zero,26e40 <_dtoa_r+0x10cc>
   26c48:	d8802117 	ldw	r2,132(sp)
   26c4c:	b82d883a 	mov	r22,r23
   26c50:	0084303a 	nor	r2,zero,r2
   26c54:	d8800615 	stw	r2,24(sp)
   26c58:	8009883a 	mov	r4,r16
   26c5c:	a00b883a 	mov	r5,r20
   26c60:	0027cec0 	call	27cec <_Bfree>
   26c64:	a83f4b1e 	bne	r21,zero,26994 <_dtoa_r+0xc20>
   26c68:	003de306 	br	263f8 <_dtoa_r+0x684>
   26c6c:	e00b883a 	mov	r5,fp
   26c70:	8009883a 	mov	r4,r16
   26c74:	00283080 	call	28308 <__pow5mult>
   26c78:	1039883a 	mov	fp,r2
   26c7c:	003ed206 	br	267c8 <_dtoa_r+0xa54>
   26c80:	1000021e 	bne	r2,zero,26c8c <_dtoa_r+0xf18>
   26c84:	18c0004c 	andi	r3,r3,1
   26c88:	183f271e 	bne	r3,zero,26928 <_dtoa_r+0xbb4>
   26c8c:	01000c04 	movi	r4,48
   26c90:	00000106 	br	26c98 <_dtoa_r+0xf24>
   26c94:	102d883a 	mov	r22,r2
   26c98:	b0bfffc4 	addi	r2,r22,-1
   26c9c:	10c00007 	ldb	r3,0(r2)
   26ca0:	193ffc26 	beq	r3,r4,26c94 <_dtoa_r+0xf20>
   26ca4:	003f3206 	br	26970 <_dtoa_r+0xbfc>
   26ca8:	d8c00f17 	ldw	r3,60(sp)
   26cac:	18015026 	beq	r3,zero,271f0 <_dtoa_r+0x147c>
   26cb0:	10810cc4 	addi	r2,r2,1075
   26cb4:	dcc00a17 	ldw	r19,40(sp)
   26cb8:	dc800817 	ldw	r18,32(sp)
   26cbc:	003e9706 	br	2671c <_dtoa_r+0x9a8>
   26cc0:	b807883a 	mov	r3,r23
   26cc4:	182b883a 	mov	r21,r3
   26cc8:	ddc00717 	ldw	r23,28(sp)
   26ccc:	00800e0e 	bge	zero,r2,26d08 <_dtoa_r+0xf94>
   26cd0:	e00b883a 	mov	r5,fp
   26cd4:	01800044 	movi	r6,1
   26cd8:	8009883a 	mov	r4,r16
   26cdc:	d8c01515 	stw	r3,84(sp)
   26ce0:	00284340 	call	28434 <__lshift>
   26ce4:	1009883a 	mov	r4,r2
   26ce8:	a00b883a 	mov	r5,r20
   26cec:	1039883a 	mov	fp,r2
   26cf0:	00285900 	call	28590 <__mcmp>
   26cf4:	d8c01517 	ldw	r3,84(sp)
   26cf8:	0081880e 	bge	zero,r2,2731c <_dtoa_r+0x15a8>
   26cfc:	00800e44 	movi	r2,57
   26d00:	b0c00c44 	addi	r3,r22,49
   26d04:	a8816326 	beq	r21,r2,27294 <_dtoa_r+0x1520>
   26d08:	90c00005 	stb	r3,0(r18)
   26d0c:	95800044 	addi	r22,r18,1
   26d10:	982b883a 	mov	r21,r19
   26d14:	003f1606 	br	26970 <_dtoa_r+0xbfc>
   26d18:	300b883a 	mov	r5,r6
   26d1c:	e009883a 	mov	r4,fp
   26d20:	d9801515 	stw	r6,84(sp)
   26d24:	00285900 	call	28590 <__mcmp>
   26d28:	d9801517 	ldw	r6,84(sp)
   26d2c:	8009883a 	mov	r4,r16
   26d30:	d8801515 	stw	r2,84(sp)
   26d34:	300b883a 	mov	r5,r6
   26d38:	0027cec0 	call	27cec <_Bfree>
   26d3c:	d8801517 	ldw	r2,84(sp)
   26d40:	103f6d1e 	bne	r2,zero,26af8 <_dtoa_r+0xd84>
   26d44:	d9c00417 	ldw	r7,16(sp)
   26d48:	383f6b1e 	bne	r7,zero,26af8 <_dtoa_r+0xd84>
   26d4c:	d8c00317 	ldw	r3,12(sp)
   26d50:	183f691e 	bne	r3,zero,26af8 <_dtoa_r+0xd84>
   26d54:	b807883a 	mov	r3,r23
   26d58:	00800e44 	movi	r2,57
   26d5c:	ddc00717 	ldw	r23,28(sp)
   26d60:	18814c26 	beq	r3,r2,27294 <_dtoa_r+0x1520>
   26d64:	057fe80e 	bge	zero,r21,26d08 <_dtoa_r+0xf94>
   26d68:	b0c00c44 	addi	r3,r22,49
   26d6c:	003fe606 	br	26d08 <_dtoa_r+0xf94>
   26d70:	880b883a 	mov	r5,r17
   26d74:	8009883a 	mov	r4,r16
   26d78:	01800284 	movi	r6,10
   26d7c:	000f883a 	mov	r7,zero
   26d80:	0027d140 	call	27d14 <__multadd>
   26d84:	1023883a 	mov	r17,r2
   26d88:	1027883a 	mov	r19,r2
   26d8c:	a825883a 	mov	r18,r21
   26d90:	003f4506 	br	26aa8 <_dtoa_r+0xd34>
   26d94:	e009883a 	mov	r4,fp
   26d98:	a00b883a 	mov	r5,r20
   26d9c:	00285900 	call	28590 <__mcmp>
   26da0:	103ebc0e 	bge	r2,zero,26894 <_dtoa_r+0xb20>
   26da4:	e00b883a 	mov	r5,fp
   26da8:	8009883a 	mov	r4,r16
   26dac:	01800284 	movi	r6,10
   26db0:	000f883a 	mov	r7,zero
   26db4:	0027d140 	call	27d14 <__multadd>
   26db8:	1039883a 	mov	fp,r2
   26dbc:	d8800617 	ldw	r2,24(sp)
   26dc0:	d8c00c17 	ldw	r3,48(sp)
   26dc4:	10bfffc4 	addi	r2,r2,-1
   26dc8:	d8800615 	stw	r2,24(sp)
   26dcc:	1801571e 	bne	r3,zero,2732c <_dtoa_r+0x15b8>
   26dd0:	d9c00e17 	ldw	r7,56(sp)
   26dd4:	d9c00915 	stw	r7,36(sp)
   26dd8:	003eae06 	br	26894 <_dtoa_r+0xb20>
   26ddc:	a0800417 	ldw	r2,16(r20)
   26de0:	10800104 	addi	r2,r2,4
   26de4:	1085883a 	add	r2,r2,r2
   26de8:	1085883a 	add	r2,r2,r2
   26dec:	a085883a 	add	r2,r20,r2
   26df0:	11000017 	ldw	r4,0(r2)
   26df4:	0027f5c0 	call	27f5c <__hi0bits>
   26df8:	00c00804 	movi	r3,32
   26dfc:	1885c83a 	sub	r2,r3,r2
   26e00:	003e8306 	br	26810 <_dtoa_r+0xa9c>
   26e04:	d9c00417 	ldw	r7,16(sp)
   26e08:	00800084 	movi	r2,2
   26e0c:	11fea30e 	bge	r2,r7,2689c <_dtoa_r+0xb28>
   26e10:	d8800917 	ldw	r2,36(sp)
   26e14:	103f8c1e 	bne	r2,zero,26c48 <_dtoa_r+0xed4>
   26e18:	a00b883a 	mov	r5,r20
   26e1c:	8009883a 	mov	r4,r16
   26e20:	01800144 	movi	r6,5
   26e24:	000f883a 	mov	r7,zero
   26e28:	0027d140 	call	27d14 <__multadd>
   26e2c:	e009883a 	mov	r4,fp
   26e30:	100b883a 	mov	r5,r2
   26e34:	1029883a 	mov	r20,r2
   26e38:	00285900 	call	28590 <__mcmp>
   26e3c:	00bf820e 	bge	zero,r2,26c48 <_dtoa_r+0xed4>
   26e40:	00800c44 	movi	r2,49
   26e44:	b8800005 	stb	r2,0(r23)
   26e48:	d8800617 	ldw	r2,24(sp)
   26e4c:	bd800044 	addi	r22,r23,1
   26e50:	10800044 	addi	r2,r2,1
   26e54:	d8800615 	stw	r2,24(sp)
   26e58:	003f7f06 	br	26c58 <_dtoa_r+0xee4>
   26e5c:	dc000417 	ldw	r16,16(sp)
   26e60:	003d6506 	br	263f8 <_dtoa_r+0x684>
   26e64:	9009883a 	mov	r4,r18
   26e68:	002abc40 	call	2abc4 <__floatsidf>
   26e6c:	1009883a 	mov	r4,r2
   26e70:	180b883a 	mov	r5,r3
   26e74:	980d883a 	mov	r6,r19
   26e78:	a00f883a 	mov	r7,r20
   26e7c:	002a5500 	call	2a550 <__muldf3>
   26e80:	1009883a 	mov	r4,r2
   26e84:	180b883a 	mov	r5,r3
   26e88:	000d883a 	mov	r6,zero
   26e8c:	01d00734 	movhi	r7,16412
   26e90:	002a49c0 	call	2a49c <__adddf3>
   26e94:	057f3034 	movhi	r21,64704
   26e98:	1025883a 	mov	r18,r2
   26e9c:	1d6b883a 	add	r21,r3,r21
   26ea0:	9809883a 	mov	r4,r19
   26ea4:	a00b883a 	mov	r5,r20
   26ea8:	000d883a 	mov	r6,zero
   26eac:	01d00534 	movhi	r7,16404
   26eb0:	002a4f00 	call	2a4f0 <__subdf3>
   26eb4:	1009883a 	mov	r4,r2
   26eb8:	180b883a 	mov	r5,r3
   26ebc:	900d883a 	mov	r6,r18
   26ec0:	a80f883a 	mov	r7,r21
   26ec4:	1027883a 	mov	r19,r2
   26ec8:	1829883a 	mov	r20,r3
   26ecc:	002aaa00 	call	2aaa0 <__gtdf2>
   26ed0:	00806616 	blt	zero,r2,2706c <_dtoa_r+0x12f8>
   26ed4:	a9e0003c 	xorhi	r7,r21,32768
   26ed8:	9809883a 	mov	r4,r19
   26edc:	a00b883a 	mov	r5,r20
   26ee0:	900d883a 	mov	r6,r18
   26ee4:	002ab680 	call	2ab68 <__ltdf2>
   26ee8:	103d710e 	bge	r2,zero,264b0 <_dtoa_r+0x73c>
   26eec:	0029883a 	mov	r20,zero
   26ef0:	002b883a 	mov	r21,zero
   26ef4:	003f5406 	br	26c48 <_dtoa_r+0xed4>
   26ef8:	d9800a17 	ldw	r6,40(sp)
   26efc:	e00b883a 	mov	r5,fp
   26f00:	8009883a 	mov	r4,r16
   26f04:	00283080 	call	28308 <__pow5mult>
   26f08:	1039883a 	mov	fp,r2
   26f0c:	003e2e06 	br	267c8 <_dtoa_r+0xa54>
   26f10:	d8000c15 	stw	zero,48(sp)
   26f14:	003f2006 	br	26b98 <_dtoa_r+0xe24>
   26f18:	00800044 	movi	r2,1
   26f1c:	d8800c15 	stw	r2,48(sp)
   26f20:	003c5d06 	br	26098 <_dtoa_r+0x324>
   26f24:	d8c00a17 	ldw	r3,40(sp)
   26f28:	d9000b17 	ldw	r4,44(sp)
   26f2c:	dcc00a15 	stw	r19,40(sp)
   26f30:	98c5c83a 	sub	r2,r19,r3
   26f34:	2089883a 	add	r4,r4,r2
   26f38:	d9000b15 	stw	r4,44(sp)
   26f3c:	0027883a 	mov	r19,zero
   26f40:	003df206 	br	2670c <_dtoa_r+0x998>
   26f44:	d9000317 	ldw	r4,12(sp)
   26f48:	8829883a 	mov	r20,r17
   26f4c:	04800084 	movi	r18,2
   26f50:	d9001015 	stw	r4,64(sp)
   26f54:	003c8106 	br	2615c <_dtoa_r+0x3e8>
   26f58:	04800044 	movi	r18,1
   26f5c:	dc800e15 	stw	r18,56(sp)
   26f60:	dc800915 	stw	r18,36(sp)
   26f64:	dc802115 	stw	r18,132(sp)
   26f68:	003f1206 	br	26bb4 <_dtoa_r+0xe40>
   26f6c:	d8800617 	ldw	r2,24(sp)
   26f70:	00abc83a 	sub	r21,zero,r2
   26f74:	a800a426 	beq	r21,zero,27208 <_dtoa_r+0x1494>
   26f78:	a88003cc 	andi	r2,r21,15
   26f7c:	100490fa 	slli	r2,r2,3
   26f80:	00c000f4 	movhi	r3,3
   26f84:	18fb6204 	addi	r3,r3,-4728
   26f88:	d9000317 	ldw	r4,12(sp)
   26f8c:	1885883a 	add	r2,r3,r2
   26f90:	11800017 	ldw	r6,0(r2)
   26f94:	11c00117 	ldw	r7,4(r2)
   26f98:	a82bd13a 	srai	r21,r21,4
   26f9c:	880b883a 	mov	r5,r17
   26fa0:	002a5500 	call	2a550 <__muldf3>
   26fa4:	1027883a 	mov	r19,r2
   26fa8:	1829883a 	mov	r20,r3
   26fac:	a800e826 	beq	r21,zero,27350 <_dtoa_r+0x15dc>
   26fb0:	058000f4 	movhi	r22,3
   26fb4:	b5bb5804 	addi	r22,r22,-4768
   26fb8:	04800084 	movi	r18,2
   26fbc:	a980004c 	andi	r6,r21,1
   26fc0:	1009883a 	mov	r4,r2
   26fc4:	a82bd07a 	srai	r21,r21,1
   26fc8:	180b883a 	mov	r5,r3
   26fcc:	30000426 	beq	r6,zero,26fe0 <_dtoa_r+0x126c>
   26fd0:	b1800017 	ldw	r6,0(r22)
   26fd4:	b1c00117 	ldw	r7,4(r22)
   26fd8:	94800044 	addi	r18,r18,1
   26fdc:	002a5500 	call	2a550 <__muldf3>
   26fe0:	b5800204 	addi	r22,r22,8
   26fe4:	a83ff51e 	bne	r21,zero,26fbc <_dtoa_r+0x1248>
   26fe8:	1027883a 	mov	r19,r2
   26fec:	1829883a 	mov	r20,r3
   26ff0:	003c7306 	br	261c0 <_dtoa_r+0x44c>
   26ff4:	21000044 	addi	r4,r4,1
   26ff8:	11000005 	stb	r4,0(r2)
   26ffc:	003e5c06 	br	26970 <_dtoa_r+0xbfc>
   27000:	a9400117 	ldw	r5,4(r21)
   27004:	8009883a 	mov	r4,r16
   27008:	0027c440 	call	27c44 <_Balloc>
   2700c:	a9800417 	ldw	r6,16(r21)
   27010:	11000304 	addi	r4,r2,12
   27014:	a9400304 	addi	r5,r21,12
   27018:	31800084 	addi	r6,r6,2
   2701c:	318d883a 	add	r6,r6,r6
   27020:	318d883a 	add	r6,r6,r6
   27024:	1023883a 	mov	r17,r2
   27028:	002302c0 	call	2302c <memcpy>
   2702c:	8009883a 	mov	r4,r16
   27030:	880b883a 	mov	r5,r17
   27034:	01800044 	movi	r6,1
   27038:	00284340 	call	28434 <__lshift>
   2703c:	1027883a 	mov	r19,r2
   27040:	003e8f06 	br	26a80 <_dtoa_r+0xd0c>
   27044:	b807883a 	mov	r3,r23
   27048:	00800e44 	movi	r2,57
   2704c:	ddc00717 	ldw	r23,28(sp)
   27050:	18809026 	beq	r3,r2,27294 <_dtoa_r+0x1520>
   27054:	18c00044 	addi	r3,r3,1
   27058:	003f2b06 	br	26d08 <_dtoa_r+0xf94>
   2705c:	b807883a 	mov	r3,r23
   27060:	982b883a 	mov	r21,r19
   27064:	ddc00717 	ldw	r23,28(sp)
   27068:	003e2406 	br	268fc <_dtoa_r+0xb88>
   2706c:	0029883a 	mov	r20,zero
   27070:	002b883a 	mov	r21,zero
   27074:	003f7206 	br	26e40 <_dtoa_r+0x10cc>
   27078:	593fffc4 	addi	r4,r11,-1
   2707c:	200490fa 	slli	r2,r4,3
   27080:	00c000f4 	movhi	r3,3
   27084:	18fb6204 	addi	r3,r3,-4728
   27088:	d9001015 	stw	r4,64(sp)
   2708c:	1885883a 	add	r2,r3,r2
   27090:	11000017 	ldw	r4,0(r2)
   27094:	11400117 	ldw	r5,4(r2)
   27098:	900d883a 	mov	r6,r18
   2709c:	a80f883a 	mov	r7,r21
   270a0:	dac01615 	stw	r11,88(sp)
   270a4:	002a5500 	call	2a550 <__muldf3>
   270a8:	a00b883a 	mov	r5,r20
   270ac:	9809883a 	mov	r4,r19
   270b0:	d8c01215 	stw	r3,72(sp)
   270b4:	d8801115 	stw	r2,68(sp)
   270b8:	002ac980 	call	2ac98 <__fixdfsi>
   270bc:	1009883a 	mov	r4,r2
   270c0:	1025883a 	mov	r18,r2
   270c4:	002abc40 	call	2abc4 <__floatsidf>
   270c8:	9809883a 	mov	r4,r19
   270cc:	a00b883a 	mov	r5,r20
   270d0:	100d883a 	mov	r6,r2
   270d4:	180f883a 	mov	r7,r3
   270d8:	94800c04 	addi	r18,r18,48
   270dc:	002a4f00 	call	2a4f0 <__subdf3>
   270e0:	bc800005 	stb	r18,0(r23)
   270e4:	dac01617 	ldw	r11,88(sp)
   270e8:	102b883a 	mov	r21,r2
   270ec:	00800044 	movi	r2,1
   270f0:	bd800044 	addi	r22,r23,1
   270f4:	1815883a 	mov	r10,r3
   270f8:	58802226 	beq	r11,r2,27184 <_dtoa_r+0x1410>
   270fc:	bad7883a 	add	r11,r23,r11
   27100:	dc001415 	stw	r16,80(sp)
   27104:	a805883a 	mov	r2,r21
   27108:	b027883a 	mov	r19,r22
   2710c:	5821883a 	mov	r16,r11
   27110:	882b883a 	mov	r21,r17
   27114:	000d883a 	mov	r6,zero
   27118:	01d00934 	movhi	r7,16420
   2711c:	1009883a 	mov	r4,r2
   27120:	180b883a 	mov	r5,r3
   27124:	002a5500 	call	2a550 <__muldf3>
   27128:	180b883a 	mov	r5,r3
   2712c:	1009883a 	mov	r4,r2
   27130:	1829883a 	mov	r20,r3
   27134:	1023883a 	mov	r17,r2
   27138:	002ac980 	call	2ac98 <__fixdfsi>
   2713c:	1009883a 	mov	r4,r2
   27140:	1025883a 	mov	r18,r2
   27144:	002abc40 	call	2abc4 <__floatsidf>
   27148:	8809883a 	mov	r4,r17
   2714c:	a00b883a 	mov	r5,r20
   27150:	100d883a 	mov	r6,r2
   27154:	180f883a 	mov	r7,r3
   27158:	94800c04 	addi	r18,r18,48
   2715c:	002a4f00 	call	2a4f0 <__subdf3>
   27160:	9cc00044 	addi	r19,r19,1
   27164:	9cbfffc5 	stb	r18,-1(r19)
   27168:	9c3fea1e 	bne	r19,r16,27114 <_dtoa_r+0x13a0>
   2716c:	1815883a 	mov	r10,r3
   27170:	d8c01017 	ldw	r3,64(sp)
   27174:	dc001417 	ldw	r16,80(sp)
   27178:	a823883a 	mov	r17,r21
   2717c:	b0ed883a 	add	r22,r22,r3
   27180:	102b883a 	mov	r21,r2
   27184:	d9001117 	ldw	r4,68(sp)
   27188:	d9401217 	ldw	r5,72(sp)
   2718c:	000d883a 	mov	r6,zero
   27190:	01cff834 	movhi	r7,16352
   27194:	da801515 	stw	r10,84(sp)
   27198:	002a49c0 	call	2a49c <__adddf3>
   2719c:	da801517 	ldw	r10,84(sp)
   271a0:	1009883a 	mov	r4,r2
   271a4:	180b883a 	mov	r5,r3
   271a8:	500f883a 	mov	r7,r10
   271ac:	a80d883a 	mov	r6,r21
   271b0:	002ab680 	call	2ab68 <__ltdf2>
   271b4:	da801517 	ldw	r10,84(sp)
   271b8:	10003b0e 	bge	r2,zero,272a8 <_dtoa_r+0x1534>
   271bc:	d9c01317 	ldw	r7,76(sp)
   271c0:	b53fffc3 	ldbu	r20,-1(r22)
   271c4:	d9c00615 	stw	r7,24(sp)
   271c8:	003d3106 	br	26690 <_dtoa_r+0x91c>
   271cc:	d8800817 	ldw	r2,32(sp)
   271d0:	11e5c83a 	sub	r18,r2,r7
   271d4:	0005883a 	mov	r2,zero
   271d8:	003d5006 	br	2671c <_dtoa_r+0x9a8>
   271dc:	05800044 	movi	r22,1
   271e0:	003dc406 	br	268f4 <_dtoa_r+0xb80>
   271e4:	a5000044 	addi	r20,r20,1
   271e8:	15000005 	stb	r20,0(r2)
   271ec:	003c8206 	br	263f8 <_dtoa_r+0x684>
   271f0:	d8800217 	ldw	r2,8(sp)
   271f4:	00c00d84 	movi	r3,54
   271f8:	dcc00a17 	ldw	r19,40(sp)
   271fc:	1885c83a 	sub	r2,r3,r2
   27200:	dc800817 	ldw	r18,32(sp)
   27204:	003d4506 	br	2671c <_dtoa_r+0x9a8>
   27208:	dcc00317 	ldw	r19,12(sp)
   2720c:	8829883a 	mov	r20,r17
   27210:	04800084 	movi	r18,2
   27214:	003bea06 	br	261c0 <_dtoa_r+0x44c>
   27218:	d9000917 	ldw	r4,36(sp)
   2721c:	203f1126 	beq	r4,zero,26e64 <_dtoa_r+0x10f0>
   27220:	d9c00e17 	ldw	r7,56(sp)
   27224:	01fca20e 	bge	zero,r7,264b0 <_dtoa_r+0x73c>
   27228:	a00b883a 	mov	r5,r20
   2722c:	9809883a 	mov	r4,r19
   27230:	000d883a 	mov	r6,zero
   27234:	01d00934 	movhi	r7,16420
   27238:	002a5500 	call	2a550 <__muldf3>
   2723c:	91000044 	addi	r4,r18,1
   27240:	1027883a 	mov	r19,r2
   27244:	1829883a 	mov	r20,r3
   27248:	002abc40 	call	2abc4 <__floatsidf>
   2724c:	9809883a 	mov	r4,r19
   27250:	a00b883a 	mov	r5,r20
   27254:	100d883a 	mov	r6,r2
   27258:	180f883a 	mov	r7,r3
   2725c:	002a5500 	call	2a550 <__muldf3>
   27260:	1009883a 	mov	r4,r2
   27264:	180b883a 	mov	r5,r3
   27268:	000d883a 	mov	r6,zero
   2726c:	01d00734 	movhi	r7,16412
   27270:	002a49c0 	call	2a49c <__adddf3>
   27274:	1025883a 	mov	r18,r2
   27278:	d8800617 	ldw	r2,24(sp)
   2727c:	057f3034 	movhi	r21,64704
   27280:	1d6b883a 	add	r21,r3,r21
   27284:	10bfffc4 	addi	r2,r2,-1
   27288:	d8801315 	stw	r2,76(sp)
   2728c:	dac00e17 	ldw	r11,56(sp)
   27290:	003be706 	br	26230 <_dtoa_r+0x4bc>
   27294:	01000e44 	movi	r4,57
   27298:	91000005 	stb	r4,0(r18)
   2729c:	95800044 	addi	r22,r18,1
   272a0:	982b883a 	mov	r21,r19
   272a4:	003da106 	br	2692c <_dtoa_r+0xbb8>
   272a8:	d9801117 	ldw	r6,68(sp)
   272ac:	d9c01217 	ldw	r7,72(sp)
   272b0:	0009883a 	mov	r4,zero
   272b4:	014ff834 	movhi	r5,16352
   272b8:	da801515 	stw	r10,84(sp)
   272bc:	002a4f00 	call	2a4f0 <__subdf3>
   272c0:	da801517 	ldw	r10,84(sp)
   272c4:	1009883a 	mov	r4,r2
   272c8:	180b883a 	mov	r5,r3
   272cc:	a80d883a 	mov	r6,r21
   272d0:	500f883a 	mov	r7,r10
   272d4:	002aaa00 	call	2aaa0 <__gtdf2>
   272d8:	00bc750e 	bge	zero,r2,264b0 <_dtoa_r+0x73c>
   272dc:	01000c04 	movi	r4,48
   272e0:	00000106 	br	272e8 <_dtoa_r+0x1574>
   272e4:	102d883a 	mov	r22,r2
   272e8:	b0bfffc4 	addi	r2,r22,-1
   272ec:	10c00007 	ldb	r3,0(r2)
   272f0:	193ffc26 	beq	r3,r4,272e4 <_dtoa_r+0x1570>
   272f4:	d8801317 	ldw	r2,76(sp)
   272f8:	d8800615 	stw	r2,24(sp)
   272fc:	003c3e06 	br	263f8 <_dtoa_r+0x684>
   27300:	d9001317 	ldw	r4,76(sp)
   27304:	df001117 	ldw	fp,68(sp)
   27308:	d9000615 	stw	r4,24(sp)
   2730c:	003ce006 	br	26690 <_dtoa_r+0x91c>
   27310:	df001117 	ldw	fp,68(sp)
   27314:	dc401217 	ldw	r17,72(sp)
   27318:	003c6506 	br	264b0 <_dtoa_r+0x73c>
   2731c:	103e7a1e 	bne	r2,zero,26d08 <_dtoa_r+0xf94>
   27320:	1880004c 	andi	r2,r3,1
   27324:	103e7826 	beq	r2,zero,26d08 <_dtoa_r+0xf94>
   27328:	003e7406 	br	26cfc <_dtoa_r+0xf88>
   2732c:	8009883a 	mov	r4,r16
   27330:	a80b883a 	mov	r5,r21
   27334:	01800284 	movi	r6,10
   27338:	000f883a 	mov	r7,zero
   2733c:	0027d140 	call	27d14 <__multadd>
   27340:	d9000e17 	ldw	r4,56(sp)
   27344:	102b883a 	mov	r21,r2
   27348:	d9000915 	stw	r4,36(sp)
   2734c:	003d5106 	br	26894 <_dtoa_r+0xb20>
   27350:	04800084 	movi	r18,2
   27354:	003b9a06 	br	261c0 <_dtoa_r+0x44c>
   27358:	d8c01317 	ldw	r3,76(sp)
   2735c:	d8c00615 	stw	r3,24(sp)
   27360:	003ccb06 	br	26690 <_dtoa_r+0x91c>
   27364:	d8c01317 	ldw	r3,76(sp)
   27368:	d8c00615 	stw	r3,24(sp)
   2736c:	003c2206 	br	263f8 <_dtoa_r+0x684>
   27370:	20fd3826 	beq	r4,r3,26854 <_dtoa_r+0xae0>
   27374:	00c00f04 	movi	r3,60
   27378:	1885c83a 	sub	r2,r3,r2
   2737c:	003da906 	br	26a24 <_dtoa_r+0xcb0>
   27380:	000b883a 	mov	r5,zero
   27384:	003b5406 	br	260d8 <_dtoa_r+0x364>
   27388:	04c00044 	movi	r19,1
   2738c:	003b3b06 	br	2607c <_dtoa_r+0x308>

00027390 <__sflags>:
   27390:	28800007 	ldb	r2,0(r5)
   27394:	00c01c84 	movi	r3,114
   27398:	10c01826 	beq	r2,r3,273fc <__sflags+0x6c>
   2739c:	00c01dc4 	movi	r3,119
   273a0:	10c01226 	beq	r2,r3,273ec <__sflags+0x5c>
   273a4:	00c01844 	movi	r3,97
   273a8:	10c00426 	beq	r2,r3,273bc <__sflags+0x2c>
   273ac:	00800584 	movi	r2,22
   273b0:	20800015 	stw	r2,0(r4)
   273b4:	0005883a 	mov	r2,zero
   273b8:	f800283a 	ret
   273bc:	01c08204 	movi	r7,520
   273c0:	01000044 	movi	r4,1
   273c4:	00804204 	movi	r2,264
   273c8:	28c00047 	ldb	r3,1(r5)
   273cc:	18000426 	beq	r3,zero,273e0 <__sflags+0x50>
   273d0:	02000ac4 	movi	r8,43
   273d4:	1a000d26 	beq	r3,r8,2740c <__sflags+0x7c>
   273d8:	28c00087 	ldb	r3,2(r5)
   273dc:	1a000b26 	beq	r3,r8,2740c <__sflags+0x7c>
   273e0:	21c8b03a 	or	r4,r4,r7
   273e4:	31000015 	stw	r4,0(r6)
   273e8:	f800283a 	ret
   273ec:	01c18004 	movi	r7,1536
   273f0:	01000044 	movi	r4,1
   273f4:	00800204 	movi	r2,8
   273f8:	003ff306 	br	273c8 <__sflags+0x38>
   273fc:	000f883a 	mov	r7,zero
   27400:	0009883a 	mov	r4,zero
   27404:	00800104 	movi	r2,4
   27408:	003fef06 	br	273c8 <__sflags+0x38>
   2740c:	00fff8c4 	movi	r3,-29
   27410:	01000084 	movi	r4,2
   27414:	10c4703a 	and	r2,r2,r3
   27418:	21c8b03a 	or	r4,r4,r7
   2741c:	10800414 	ori	r2,r2,16
   27420:	31000015 	stw	r4,0(r6)
   27424:	f800283a 	ret

00027428 <__sfvwrite_r>:
   27428:	30800217 	ldw	r2,8(r6)
   2742c:	defff504 	addi	sp,sp,-44
   27430:	dd400615 	stw	r21,24(sp)
   27434:	dd000515 	stw	r20,20(sp)
   27438:	dc000115 	stw	r16,4(sp)
   2743c:	dfc00a15 	stw	ra,40(sp)
   27440:	df000915 	stw	fp,36(sp)
   27444:	ddc00815 	stw	r23,32(sp)
   27448:	dd800715 	stw	r22,28(sp)
   2744c:	dcc00415 	stw	r19,16(sp)
   27450:	dc800315 	stw	r18,12(sp)
   27454:	dc400215 	stw	r17,8(sp)
   27458:	3029883a 	mov	r20,r6
   2745c:	202b883a 	mov	r21,r4
   27460:	2821883a 	mov	r16,r5
   27464:	10002126 	beq	r2,zero,274ec <__sfvwrite_r+0xc4>
   27468:	2880030b 	ldhu	r2,12(r5)
   2746c:	10c0020c 	andi	r3,r2,8
   27470:	18ffffcc 	andi	r3,r3,65535
   27474:	18e0001c 	xori	r3,r3,32768
   27478:	18e00004 	addi	r3,r3,-32768
   2747c:	18002826 	beq	r3,zero,27520 <__sfvwrite_r+0xf8>
   27480:	28c00417 	ldw	r3,16(r5)
   27484:	18002626 	beq	r3,zero,27520 <__sfvwrite_r+0xf8>
   27488:	10c0008c 	andi	r3,r2,2
   2748c:	18ffffcc 	andi	r3,r3,65535
   27490:	18e0001c 	xori	r3,r3,32768
   27494:	18e00004 	addi	r3,r3,-32768
   27498:	a4400017 	ldw	r17,0(r20)
   2749c:	18002b26 	beq	r3,zero,2754c <__sfvwrite_r+0x124>
   274a0:	0027883a 	mov	r19,zero
   274a4:	0025883a 	mov	r18,zero
   274a8:	05810004 	movi	r22,1024
   274ac:	980d883a 	mov	r6,r19
   274b0:	a809883a 	mov	r4,r21
   274b4:	90004f26 	beq	r18,zero,275f4 <__sfvwrite_r+0x1cc>
   274b8:	900f883a 	mov	r7,r18
   274bc:	81400717 	ldw	r5,28(r16)
   274c0:	b480012e 	bgeu	r22,r18,274c8 <__sfvwrite_r+0xa0>
   274c4:	01c10004 	movi	r7,1024
   274c8:	80800917 	ldw	r2,36(r16)
   274cc:	103ee83a 	callr	r2
   274d0:	0080540e 	bge	zero,r2,27624 <__sfvwrite_r+0x1fc>
   274d4:	a0c00217 	ldw	r3,8(r20)
   274d8:	98a7883a 	add	r19,r19,r2
   274dc:	90a5c83a 	sub	r18,r18,r2
   274e0:	1885c83a 	sub	r2,r3,r2
   274e4:	a0800215 	stw	r2,8(r20)
   274e8:	103ff01e 	bne	r2,zero,274ac <__sfvwrite_r+0x84>
   274ec:	0005883a 	mov	r2,zero
   274f0:	dfc00a17 	ldw	ra,40(sp)
   274f4:	df000917 	ldw	fp,36(sp)
   274f8:	ddc00817 	ldw	r23,32(sp)
   274fc:	dd800717 	ldw	r22,28(sp)
   27500:	dd400617 	ldw	r21,24(sp)
   27504:	dd000517 	ldw	r20,20(sp)
   27508:	dcc00417 	ldw	r19,16(sp)
   2750c:	dc800317 	ldw	r18,12(sp)
   27510:	dc400217 	ldw	r17,8(sp)
   27514:	dc000117 	ldw	r16,4(sp)
   27518:	dec00b04 	addi	sp,sp,44
   2751c:	f800283a 	ret
   27520:	a809883a 	mov	r4,r21
   27524:	800b883a 	mov	r5,r16
   27528:	00259600 	call	25960 <__swsetup_r>
   2752c:	1000f01e 	bne	r2,zero,278f0 <__sfvwrite_r+0x4c8>
   27530:	8080030b 	ldhu	r2,12(r16)
   27534:	a4400017 	ldw	r17,0(r20)
   27538:	10c0008c 	andi	r3,r2,2
   2753c:	18ffffcc 	andi	r3,r3,65535
   27540:	18e0001c 	xori	r3,r3,32768
   27544:	18e00004 	addi	r3,r3,-32768
   27548:	183fd51e 	bne	r3,zero,274a0 <__sfvwrite_r+0x78>
   2754c:	10c0004c 	andi	r3,r2,1
   27550:	002d883a 	mov	r22,zero
   27554:	1800381e 	bne	r3,zero,27638 <__sfvwrite_r+0x210>
   27558:	0025883a 	mov	r18,zero
   2755c:	90002126 	beq	r18,zero,275e4 <__sfvwrite_r+0x1bc>
   27560:	10c0800c 	andi	r3,r2,512
   27564:	18ffffcc 	andi	r3,r3,65535
   27568:	18e0001c 	xori	r3,r3,32768
   2756c:	18e00004 	addi	r3,r3,-32768
   27570:	84c00217 	ldw	r19,8(r16)
   27574:	18006b26 	beq	r3,zero,27724 <__sfvwrite_r+0x2fc>
   27578:	980f883a 	mov	r7,r19
   2757c:	94c08636 	bltu	r18,r19,27798 <__sfvwrite_r+0x370>
   27580:	10c1200c 	andi	r3,r2,1152
   27584:	18009f1e 	bne	r3,zero,27804 <__sfvwrite_r+0x3dc>
   27588:	81000017 	ldw	r4,0(r16)
   2758c:	982f883a 	mov	r23,r19
   27590:	9039883a 	mov	fp,r18
   27594:	9027883a 	mov	r19,r18
   27598:	380d883a 	mov	r6,r7
   2759c:	b00b883a 	mov	r5,r22
   275a0:	d9c00015 	stw	r7,0(sp)
   275a4:	0027ab80 	call	27ab8 <memmove>
   275a8:	d9c00017 	ldw	r7,0(sp)
   275ac:	81000217 	ldw	r4,8(r16)
   275b0:	80800017 	ldw	r2,0(r16)
   275b4:	25efc83a 	sub	r23,r4,r23
   275b8:	11cf883a 	add	r7,r2,r7
   275bc:	85c00215 	stw	r23,8(r16)
   275c0:	81c00015 	stw	r7,0(r16)
   275c4:	a0800217 	ldw	r2,8(r20)
   275c8:	b72d883a 	add	r22,r22,fp
   275cc:	9725c83a 	sub	r18,r18,fp
   275d0:	14e7c83a 	sub	r19,r2,r19
   275d4:	a4c00215 	stw	r19,8(r20)
   275d8:	983fc426 	beq	r19,zero,274ec <__sfvwrite_r+0xc4>
   275dc:	8080030b 	ldhu	r2,12(r16)
   275e0:	903fdf1e 	bne	r18,zero,27560 <__sfvwrite_r+0x138>
   275e4:	8d800017 	ldw	r22,0(r17)
   275e8:	8c800117 	ldw	r18,4(r17)
   275ec:	8c400204 	addi	r17,r17,8
   275f0:	003fda06 	br	2755c <__sfvwrite_r+0x134>
   275f4:	8cc00017 	ldw	r19,0(r17)
   275f8:	8c800117 	ldw	r18,4(r17)
   275fc:	8c400204 	addi	r17,r17,8
   27600:	003faa06 	br	274ac <__sfvwrite_r+0x84>
   27604:	0028d000 	call	28d00 <_realloc_r>
   27608:	102f883a 	mov	r23,r2
   2760c:	10009f1e 	bne	r2,zero,2788c <__sfvwrite_r+0x464>
   27610:	81400417 	ldw	r5,16(r16)
   27614:	a809883a 	mov	r4,r21
   27618:	0021cd80 	call	21cd8 <_free_r>
   2761c:	00800304 	movi	r2,12
   27620:	a8800015 	stw	r2,0(r21)
   27624:	80c0030b 	ldhu	r3,12(r16)
   27628:	00bfffc4 	movi	r2,-1
   2762c:	18c01014 	ori	r3,r3,64
   27630:	80c0030d 	sth	r3,12(r16)
   27634:	003fae06 	br	274f0 <__sfvwrite_r+0xc8>
   27638:	0007883a 	mov	r3,zero
   2763c:	0039883a 	mov	fp,zero
   27640:	0025883a 	mov	r18,zero
   27644:	90001e26 	beq	r18,zero,276c0 <__sfvwrite_r+0x298>
   27648:	18006526 	beq	r3,zero,277e0 <__sfvwrite_r+0x3b8>
   2764c:	b02f883a 	mov	r23,r22
   27650:	9580012e 	bgeu	r18,r22,27658 <__sfvwrite_r+0x230>
   27654:	902f883a 	mov	r23,r18
   27658:	81000017 	ldw	r4,0(r16)
   2765c:	80800417 	ldw	r2,16(r16)
   27660:	84c00217 	ldw	r19,8(r16)
   27664:	81c00517 	ldw	r7,20(r16)
   27668:	1100022e 	bgeu	r2,r4,27674 <__sfvwrite_r+0x24c>
   2766c:	99e7883a 	add	r19,r19,r7
   27670:	9dc01816 	blt	r19,r23,276d4 <__sfvwrite_r+0x2ac>
   27674:	b9c03b16 	blt	r23,r7,27764 <__sfvwrite_r+0x33c>
   27678:	80800917 	ldw	r2,36(r16)
   2767c:	81400717 	ldw	r5,28(r16)
   27680:	a809883a 	mov	r4,r21
   27684:	d8c00015 	stw	r3,0(sp)
   27688:	e00d883a 	mov	r6,fp
   2768c:	103ee83a 	callr	r2
   27690:	1027883a 	mov	r19,r2
   27694:	d8c00017 	ldw	r3,0(sp)
   27698:	00bfe20e 	bge	zero,r2,27624 <__sfvwrite_r+0x1fc>
   2769c:	b4edc83a 	sub	r22,r22,r19
   276a0:	b0001a26 	beq	r22,zero,2770c <__sfvwrite_r+0x2e4>
   276a4:	a0800217 	ldw	r2,8(r20)
   276a8:	e4f9883a 	add	fp,fp,r19
   276ac:	94e5c83a 	sub	r18,r18,r19
   276b0:	14e7c83a 	sub	r19,r2,r19
   276b4:	a4c00215 	stw	r19,8(r20)
   276b8:	983f8c26 	beq	r19,zero,274ec <__sfvwrite_r+0xc4>
   276bc:	903fe21e 	bne	r18,zero,27648 <__sfvwrite_r+0x220>
   276c0:	8f000017 	ldw	fp,0(r17)
   276c4:	8c800117 	ldw	r18,4(r17)
   276c8:	0007883a 	mov	r3,zero
   276cc:	8c400204 	addi	r17,r17,8
   276d0:	003fdc06 	br	27644 <__sfvwrite_r+0x21c>
   276d4:	e00b883a 	mov	r5,fp
   276d8:	980d883a 	mov	r6,r19
   276dc:	d8c00015 	stw	r3,0(sp)
   276e0:	0027ab80 	call	27ab8 <memmove>
   276e4:	80800017 	ldw	r2,0(r16)
   276e8:	a809883a 	mov	r4,r21
   276ec:	800b883a 	mov	r5,r16
   276f0:	14c5883a 	add	r2,r2,r19
   276f4:	80800015 	stw	r2,0(r16)
   276f8:	00213a00 	call	213a0 <_fflush_r>
   276fc:	d8c00017 	ldw	r3,0(sp)
   27700:	103fc81e 	bne	r2,zero,27624 <__sfvwrite_r+0x1fc>
   27704:	b4edc83a 	sub	r22,r22,r19
   27708:	b03fe61e 	bne	r22,zero,276a4 <__sfvwrite_r+0x27c>
   2770c:	a809883a 	mov	r4,r21
   27710:	800b883a 	mov	r5,r16
   27714:	00213a00 	call	213a0 <_fflush_r>
   27718:	103fc21e 	bne	r2,zero,27624 <__sfvwrite_r+0x1fc>
   2771c:	0007883a 	mov	r3,zero
   27720:	003fe006 	br	276a4 <__sfvwrite_r+0x27c>
   27724:	81000017 	ldw	r4,0(r16)
   27728:	80800417 	ldw	r2,16(r16)
   2772c:	1100022e 	bgeu	r2,r4,27738 <__sfvwrite_r+0x310>
   27730:	9839883a 	mov	fp,r19
   27734:	9c806036 	bltu	r19,r18,278b8 <__sfvwrite_r+0x490>
   27738:	81c00517 	ldw	r7,20(r16)
   2773c:	91c01c36 	bltu	r18,r7,277b0 <__sfvwrite_r+0x388>
   27740:	80800917 	ldw	r2,36(r16)
   27744:	81400717 	ldw	r5,28(r16)
   27748:	a809883a 	mov	r4,r21
   2774c:	b00d883a 	mov	r6,r22
   27750:	103ee83a 	callr	r2
   27754:	1027883a 	mov	r19,r2
   27758:	00bfb20e 	bge	zero,r2,27624 <__sfvwrite_r+0x1fc>
   2775c:	1039883a 	mov	fp,r2
   27760:	003f9806 	br	275c4 <__sfvwrite_r+0x19c>
   27764:	b80d883a 	mov	r6,r23
   27768:	e00b883a 	mov	r5,fp
   2776c:	d8c00015 	stw	r3,0(sp)
   27770:	0027ab80 	call	27ab8 <memmove>
   27774:	80800217 	ldw	r2,8(r16)
   27778:	81000017 	ldw	r4,0(r16)
   2777c:	b827883a 	mov	r19,r23
   27780:	15c5c83a 	sub	r2,r2,r23
   27784:	25ef883a 	add	r23,r4,r23
   27788:	80800215 	stw	r2,8(r16)
   2778c:	85c00015 	stw	r23,0(r16)
   27790:	d8c00017 	ldw	r3,0(sp)
   27794:	003fc106 	br	2769c <__sfvwrite_r+0x274>
   27798:	81000017 	ldw	r4,0(r16)
   2779c:	902f883a 	mov	r23,r18
   277a0:	9039883a 	mov	fp,r18
   277a4:	9027883a 	mov	r19,r18
   277a8:	900f883a 	mov	r7,r18
   277ac:	003f7a06 	br	27598 <__sfvwrite_r+0x170>
   277b0:	b00b883a 	mov	r5,r22
   277b4:	900d883a 	mov	r6,r18
   277b8:	0027ab80 	call	27ab8 <memmove>
   277bc:	80c00217 	ldw	r3,8(r16)
   277c0:	80800017 	ldw	r2,0(r16)
   277c4:	9027883a 	mov	r19,r18
   277c8:	1c87c83a 	sub	r3,r3,r18
   277cc:	1485883a 	add	r2,r2,r18
   277d0:	80c00215 	stw	r3,8(r16)
   277d4:	80800015 	stw	r2,0(r16)
   277d8:	9039883a 	mov	fp,r18
   277dc:	003f7906 	br	275c4 <__sfvwrite_r+0x19c>
   277e0:	e009883a 	mov	r4,fp
   277e4:	01400284 	movi	r5,10
   277e8:	900d883a 	mov	r6,r18
   277ec:	0022f340 	call	22f34 <memchr>
   277f0:	10003c26 	beq	r2,zero,278e4 <__sfvwrite_r+0x4bc>
   277f4:	15800044 	addi	r22,r2,1
   277f8:	b72dc83a 	sub	r22,r22,fp
   277fc:	00c00044 	movi	r3,1
   27800:	003f9206 	br	2764c <__sfvwrite_r+0x224>
   27804:	81000517 	ldw	r4,20(r16)
   27808:	81400417 	ldw	r5,16(r16)
   2780c:	80c00017 	ldw	r3,0(r16)
   27810:	210d883a 	add	r6,r4,r4
   27814:	3109883a 	add	r4,r6,r4
   27818:	2026d7fa 	srli	r19,r4,31
   2781c:	1979c83a 	sub	fp,r3,r5
   27820:	e1800044 	addi	r6,fp,1
   27824:	9909883a 	add	r4,r19,r4
   27828:	2027d07a 	srai	r19,r4,1
   2782c:	3489883a 	add	r4,r6,r18
   27830:	980d883a 	mov	r6,r19
   27834:	9900022e 	bgeu	r19,r4,27840 <__sfvwrite_r+0x418>
   27838:	2027883a 	mov	r19,r4
   2783c:	200d883a 	mov	r6,r4
   27840:	1081000c 	andi	r2,r2,1024
   27844:	10bfffcc 	andi	r2,r2,65535
   27848:	10a0001c 	xori	r2,r2,32768
   2784c:	10a00004 	addi	r2,r2,-32768
   27850:	a809883a 	mov	r4,r21
   27854:	103f6b26 	beq	r2,zero,27604 <__sfvwrite_r+0x1dc>
   27858:	300b883a 	mov	r5,r6
   2785c:	00227b00 	call	227b0 <_malloc_r>
   27860:	102f883a 	mov	r23,r2
   27864:	103f6d26 	beq	r2,zero,2761c <__sfvwrite_r+0x1f4>
   27868:	81400417 	ldw	r5,16(r16)
   2786c:	1009883a 	mov	r4,r2
   27870:	e00d883a 	mov	r6,fp
   27874:	002302c0 	call	2302c <memcpy>
   27878:	8080030b 	ldhu	r2,12(r16)
   2787c:	00fedfc4 	movi	r3,-1153
   27880:	10c4703a 	and	r2,r2,r3
   27884:	10802014 	ori	r2,r2,128
   27888:	8080030d 	sth	r2,12(r16)
   2788c:	bf09883a 	add	r4,r23,fp
   27890:	9f07c83a 	sub	r3,r19,fp
   27894:	85c00415 	stw	r23,16(r16)
   27898:	84c00515 	stw	r19,20(r16)
   2789c:	81000015 	stw	r4,0(r16)
   278a0:	902f883a 	mov	r23,r18
   278a4:	80c00215 	stw	r3,8(r16)
   278a8:	9039883a 	mov	fp,r18
   278ac:	9027883a 	mov	r19,r18
   278b0:	900f883a 	mov	r7,r18
   278b4:	003f3806 	br	27598 <__sfvwrite_r+0x170>
   278b8:	b00b883a 	mov	r5,r22
   278bc:	980d883a 	mov	r6,r19
   278c0:	0027ab80 	call	27ab8 <memmove>
   278c4:	80800017 	ldw	r2,0(r16)
   278c8:	a809883a 	mov	r4,r21
   278cc:	800b883a 	mov	r5,r16
   278d0:	14c5883a 	add	r2,r2,r19
   278d4:	80800015 	stw	r2,0(r16)
   278d8:	00213a00 	call	213a0 <_fflush_r>
   278dc:	103f3926 	beq	r2,zero,275c4 <__sfvwrite_r+0x19c>
   278e0:	003f5006 	br	27624 <__sfvwrite_r+0x1fc>
   278e4:	95800044 	addi	r22,r18,1
   278e8:	00c00044 	movi	r3,1
   278ec:	003f5706 	br	2764c <__sfvwrite_r+0x224>
   278f0:	80c0030b 	ldhu	r3,12(r16)
   278f4:	00bfffc4 	movi	r2,-1
   278f8:	18c01014 	ori	r3,r3,64
   278fc:	80c0030d 	sth	r3,12(r16)
   27900:	00c00244 	movi	r3,9
   27904:	a8c00015 	stw	r3,0(r21)
   27908:	003ef906 	br	274f0 <__sfvwrite_r+0xc8>

0002790c <_isatty_r>:
   2790c:	defffd04 	addi	sp,sp,-12
   27910:	dc400115 	stw	r17,4(sp)
   27914:	dc000015 	stw	r16,0(sp)
   27918:	2023883a 	mov	r17,r4
   2791c:	040000f4 	movhi	r16,3
   27920:	84013604 	addi	r16,r16,1240
   27924:	2809883a 	mov	r4,r5
   27928:	dfc00215 	stw	ra,8(sp)
   2792c:	80000015 	stw	zero,0(r16)
   27930:	002b88c0 	call	2b88c <isatty>
   27934:	00ffffc4 	movi	r3,-1
   27938:	10c00526 	beq	r2,r3,27950 <_isatty_r+0x44>
   2793c:	dfc00217 	ldw	ra,8(sp)
   27940:	dc400117 	ldw	r17,4(sp)
   27944:	dc000017 	ldw	r16,0(sp)
   27948:	dec00304 	addi	sp,sp,12
   2794c:	f800283a 	ret
   27950:	80c00017 	ldw	r3,0(r16)
   27954:	183ff926 	beq	r3,zero,2793c <_isatty_r+0x30>
   27958:	88c00015 	stw	r3,0(r17)
   2795c:	dfc00217 	ldw	ra,8(sp)
   27960:	dc400117 	ldw	r17,4(sp)
   27964:	dc000017 	ldw	r16,0(sp)
   27968:	dec00304 	addi	sp,sp,12
   2796c:	f800283a 	ret

00027970 <_setlocale_r>:
   27970:	defffc04 	addi	sp,sp,-16
   27974:	dc800215 	stw	r18,8(sp)
   27978:	dc400115 	stw	r17,4(sp)
   2797c:	dc000015 	stw	r16,0(sp)
   27980:	dfc00315 	stw	ra,12(sp)
   27984:	3021883a 	mov	r16,r6
   27988:	2023883a 	mov	r17,r4
   2798c:	2825883a 	mov	r18,r5
   27990:	30001626 	beq	r6,zero,279ec <_setlocale_r+0x7c>
   27994:	3009883a 	mov	r4,r6
   27998:	014000f4 	movhi	r5,3
   2799c:	297a7f04 	addi	r5,r5,-5636
   279a0:	00293600 	call	29360 <strcmp>
   279a4:	10000a1e 	bne	r2,zero,279d0 <_setlocale_r+0x60>
   279a8:	8c800c15 	stw	r18,48(r17)
   279ac:	8c000d15 	stw	r16,52(r17)
   279b0:	008000f4 	movhi	r2,3
   279b4:	10ba7f04 	addi	r2,r2,-5636
   279b8:	dfc00317 	ldw	ra,12(sp)
   279bc:	dc800217 	ldw	r18,8(sp)
   279c0:	dc400117 	ldw	r17,4(sp)
   279c4:	dc000017 	ldw	r16,0(sp)
   279c8:	dec00404 	addi	sp,sp,16
   279cc:	f800283a 	ret
   279d0:	8009883a 	mov	r4,r16
   279d4:	014000f4 	movhi	r5,3
   279d8:	297a8904 	addi	r5,r5,-5596
   279dc:	00293600 	call	29360 <strcmp>
   279e0:	103ff126 	beq	r2,zero,279a8 <_setlocale_r+0x38>
   279e4:	0005883a 	mov	r2,zero
   279e8:	003ff306 	br	279b8 <_setlocale_r+0x48>
   279ec:	008000f4 	movhi	r2,3
   279f0:	10ba7f04 	addi	r2,r2,-5636
   279f4:	dfc00317 	ldw	ra,12(sp)
   279f8:	dc800217 	ldw	r18,8(sp)
   279fc:	dc400117 	ldw	r17,4(sp)
   27a00:	dc000017 	ldw	r16,0(sp)
   27a04:	dec00404 	addi	sp,sp,16
   27a08:	f800283a 	ret

00027a0c <__locale_charset>:
   27a0c:	008000f4 	movhi	r2,3
   27a10:	10bb3e04 	addi	r2,r2,-4872
   27a14:	f800283a 	ret

00027a18 <_localeconv_r>:
   27a18:	008000f4 	movhi	r2,3
   27a1c:	10bb4204 	addi	r2,r2,-4856
   27a20:	f800283a 	ret

00027a24 <setlocale>:
   27a24:	00c000f4 	movhi	r3,3
   27a28:	18fe6f04 	addi	r3,r3,-1604
   27a2c:	2005883a 	mov	r2,r4
   27a30:	19000017 	ldw	r4,0(r3)
   27a34:	280d883a 	mov	r6,r5
   27a38:	100b883a 	mov	r5,r2
   27a3c:	00279701 	jmpi	27970 <_setlocale_r>

00027a40 <localeconv>:
   27a40:	008000f4 	movhi	r2,3
   27a44:	10bb4204 	addi	r2,r2,-4856
   27a48:	f800283a 	ret

00027a4c <_lseek_r>:
   27a4c:	defffd04 	addi	sp,sp,-12
   27a50:	dc400115 	stw	r17,4(sp)
   27a54:	dc000015 	stw	r16,0(sp)
   27a58:	2023883a 	mov	r17,r4
   27a5c:	040000f4 	movhi	r16,3
   27a60:	84013604 	addi	r16,r16,1240
   27a64:	2809883a 	mov	r4,r5
   27a68:	300b883a 	mov	r5,r6
   27a6c:	380d883a 	mov	r6,r7
   27a70:	dfc00215 	stw	ra,8(sp)
   27a74:	80000015 	stw	zero,0(r16)
   27a78:	002ba6c0 	call	2ba6c <lseek>
   27a7c:	00ffffc4 	movi	r3,-1
   27a80:	10c00526 	beq	r2,r3,27a98 <_lseek_r+0x4c>
   27a84:	dfc00217 	ldw	ra,8(sp)
   27a88:	dc400117 	ldw	r17,4(sp)
   27a8c:	dc000017 	ldw	r16,0(sp)
   27a90:	dec00304 	addi	sp,sp,12
   27a94:	f800283a 	ret
   27a98:	80c00017 	ldw	r3,0(r16)
   27a9c:	183ff926 	beq	r3,zero,27a84 <_lseek_r+0x38>
   27aa0:	88c00015 	stw	r3,0(r17)
   27aa4:	dfc00217 	ldw	ra,8(sp)
   27aa8:	dc400117 	ldw	r17,4(sp)
   27aac:	dc000017 	ldw	r16,0(sp)
   27ab0:	dec00304 	addi	sp,sp,12
   27ab4:	f800283a 	ret

00027ab8 <memmove>:
   27ab8:	defffb04 	addi	sp,sp,-20
   27abc:	dc000015 	stw	r16,0(sp)
   27ac0:	dfc00415 	stw	ra,16(sp)
   27ac4:	dcc00315 	stw	r19,12(sp)
   27ac8:	dc800215 	stw	r18,8(sp)
   27acc:	dc400115 	stw	r17,4(sp)
   27ad0:	2021883a 	mov	r16,r4
   27ad4:	300f883a 	mov	r7,r6
   27ad8:	2900122e 	bgeu	r5,r4,27b24 <memmove+0x6c>
   27adc:	2987883a 	add	r3,r5,r6
   27ae0:	20c0102e 	bgeu	r4,r3,27b24 <memmove+0x6c>
   27ae4:	218b883a 	add	r5,r4,r6
   27ae8:	1989c83a 	sub	r4,r3,r6
   27aec:	30000526 	beq	r6,zero,27b04 <memmove+0x4c>
   27af0:	18ffffc4 	addi	r3,r3,-1
   27af4:	18800003 	ldbu	r2,0(r3)
   27af8:	297fffc4 	addi	r5,r5,-1
   27afc:	28800005 	stb	r2,0(r5)
   27b00:	193ffb1e 	bne	r3,r4,27af0 <memmove+0x38>
   27b04:	8005883a 	mov	r2,r16
   27b08:	dfc00417 	ldw	ra,16(sp)
   27b0c:	dcc00317 	ldw	r19,12(sp)
   27b10:	dc800217 	ldw	r18,8(sp)
   27b14:	dc400117 	ldw	r17,4(sp)
   27b18:	dc000017 	ldw	r16,0(sp)
   27b1c:	dec00504 	addi	sp,sp,20
   27b20:	f800283a 	ret
   27b24:	008003c4 	movi	r2,15
   27b28:	1180422e 	bgeu	r2,r6,27c34 <memmove+0x17c>
   27b2c:	2c04b03a 	or	r2,r5,r16
   27b30:	108000cc 	andi	r2,r2,3
   27b34:	10003f1e 	bne	r2,zero,27c34 <memmove+0x17c>
   27b38:	32bffc04 	addi	r10,r6,-16
   27b3c:	5014d13a 	srli	r10,r10,4
   27b40:	81000404 	addi	r4,r16,16
   27b44:	8007883a 	mov	r3,r16
   27b48:	5004913a 	slli	r2,r10,4
   27b4c:	280f883a 	mov	r7,r5
   27b50:	2089883a 	add	r4,r4,r2
   27b54:	38800017 	ldw	r2,0(r7)
   27b58:	18c00404 	addi	r3,r3,16
   27b5c:	39c00404 	addi	r7,r7,16
   27b60:	18bffc15 	stw	r2,-16(r3)
   27b64:	38bffd17 	ldw	r2,-12(r7)
   27b68:	18bffd15 	stw	r2,-12(r3)
   27b6c:	38bffe17 	ldw	r2,-8(r7)
   27b70:	18bffe15 	stw	r2,-8(r3)
   27b74:	38bfff17 	ldw	r2,-4(r7)
   27b78:	18bfff15 	stw	r2,-4(r3)
   27b7c:	193ff51e 	bne	r3,r4,27b54 <memmove+0x9c>
   27b80:	52800044 	addi	r10,r10,1
   27b84:	5014913a 	slli	r10,r10,4
   27b88:	31c003cc 	andi	r7,r6,15
   27b8c:	008000c4 	movi	r2,3
   27b90:	8287883a 	add	r3,r16,r10
   27b94:	2a95883a 	add	r10,r5,r10
   27b98:	11c0282e 	bgeu	r2,r7,27c3c <memmove+0x184>
   27b9c:	3c7fff04 	addi	r17,r7,-4
   27ba0:	8808d0ba 	srli	r4,r17,2
   27ba4:	1a400104 	addi	r9,r3,4
   27ba8:	180d883a 	mov	r6,r3
   27bac:	2105883a 	add	r2,r4,r4
   27bb0:	1085883a 	add	r2,r2,r2
   27bb4:	4893883a 	add	r9,r9,r2
   27bb8:	5005883a 	mov	r2,r10
   27bbc:	12000017 	ldw	r8,0(r2)
   27bc0:	31800104 	addi	r6,r6,4
   27bc4:	10800104 	addi	r2,r2,4
   27bc8:	323fff15 	stw	r8,-4(r6)
   27bcc:	327ffb1e 	bne	r6,r9,27bbc <memmove+0x104>
   27bd0:	20800044 	addi	r2,r4,1
   27bd4:	1085883a 	add	r2,r2,r2
   27bd8:	1085883a 	add	r2,r2,r2
   27bdc:	017fff04 	movi	r5,-4
   27be0:	18a5883a 	add	r18,r3,r2
   27be4:	50a7883a 	add	r19,r10,r2
   27be8:	00212100 	call	21210 <__mulsi3>
   27bec:	144f883a 	add	r7,r2,r17
   27bf0:	980b883a 	mov	r5,r19
   27bf4:	9007883a 	mov	r3,r18
   27bf8:	383fc226 	beq	r7,zero,27b04 <memmove+0x4c>
   27bfc:	19cf883a 	add	r7,r3,r7
   27c00:	29800003 	ldbu	r6,0(r5)
   27c04:	18c00044 	addi	r3,r3,1
   27c08:	29400044 	addi	r5,r5,1
   27c0c:	19bfffc5 	stb	r6,-1(r3)
   27c10:	19fffb1e 	bne	r3,r7,27c00 <memmove+0x148>
   27c14:	8005883a 	mov	r2,r16
   27c18:	dfc00417 	ldw	ra,16(sp)
   27c1c:	dcc00317 	ldw	r19,12(sp)
   27c20:	dc800217 	ldw	r18,8(sp)
   27c24:	dc400117 	ldw	r17,4(sp)
   27c28:	dc000017 	ldw	r16,0(sp)
   27c2c:	dec00504 	addi	sp,sp,20
   27c30:	f800283a 	ret
   27c34:	8007883a 	mov	r3,r16
   27c38:	003fef06 	br	27bf8 <memmove+0x140>
   27c3c:	500b883a 	mov	r5,r10
   27c40:	003fed06 	br	27bf8 <memmove+0x140>

00027c44 <_Balloc>:
   27c44:	20801317 	ldw	r2,76(r4)
   27c48:	defffc04 	addi	sp,sp,-16
   27c4c:	dc400115 	stw	r17,4(sp)
   27c50:	dc000015 	stw	r16,0(sp)
   27c54:	dfc00315 	stw	ra,12(sp)
   27c58:	dc800215 	stw	r18,8(sp)
   27c5c:	2023883a 	mov	r17,r4
   27c60:	2821883a 	mov	r16,r5
   27c64:	10000f26 	beq	r2,zero,27ca4 <_Balloc+0x60>
   27c68:	8407883a 	add	r3,r16,r16
   27c6c:	18c7883a 	add	r3,r3,r3
   27c70:	10c7883a 	add	r3,r2,r3
   27c74:	18800017 	ldw	r2,0(r3)
   27c78:	10001126 	beq	r2,zero,27cc0 <_Balloc+0x7c>
   27c7c:	11000017 	ldw	r4,0(r2)
   27c80:	19000015 	stw	r4,0(r3)
   27c84:	10000415 	stw	zero,16(r2)
   27c88:	10000315 	stw	zero,12(r2)
   27c8c:	dfc00317 	ldw	ra,12(sp)
   27c90:	dc800217 	ldw	r18,8(sp)
   27c94:	dc400117 	ldw	r17,4(sp)
   27c98:	dc000017 	ldw	r16,0(sp)
   27c9c:	dec00404 	addi	sp,sp,16
   27ca0:	f800283a 	ret
   27ca4:	01400104 	movi	r5,4
   27ca8:	01800404 	movi	r6,16
   27cac:	00294040 	call	29404 <_calloc_r>
   27cb0:	88801315 	stw	r2,76(r17)
   27cb4:	103fec1e 	bne	r2,zero,27c68 <_Balloc+0x24>
   27cb8:	0005883a 	mov	r2,zero
   27cbc:	003ff306 	br	27c8c <_Balloc+0x48>
   27cc0:	01400044 	movi	r5,1
   27cc4:	2c24983a 	sll	r18,r5,r16
   27cc8:	8809883a 	mov	r4,r17
   27ccc:	91800144 	addi	r6,r18,5
   27cd0:	318d883a 	add	r6,r6,r6
   27cd4:	318d883a 	add	r6,r6,r6
   27cd8:	00294040 	call	29404 <_calloc_r>
   27cdc:	103ff626 	beq	r2,zero,27cb8 <_Balloc+0x74>
   27ce0:	14000115 	stw	r16,4(r2)
   27ce4:	14800215 	stw	r18,8(r2)
   27ce8:	003fe606 	br	27c84 <_Balloc+0x40>

00027cec <_Bfree>:
   27cec:	28000826 	beq	r5,zero,27d10 <_Bfree+0x24>
   27cf0:	28c00117 	ldw	r3,4(r5)
   27cf4:	20801317 	ldw	r2,76(r4)
   27cf8:	18c7883a 	add	r3,r3,r3
   27cfc:	18c7883a 	add	r3,r3,r3
   27d00:	10c5883a 	add	r2,r2,r3
   27d04:	10c00017 	ldw	r3,0(r2)
   27d08:	28c00015 	stw	r3,0(r5)
   27d0c:	11400015 	stw	r5,0(r2)
   27d10:	f800283a 	ret

00027d14 <__multadd>:
   27d14:	defff604 	addi	sp,sp,-40
   27d18:	dd400515 	stw	r21,20(sp)
   27d1c:	2d400417 	ldw	r21,16(r5)
   27d20:	df000815 	stw	fp,32(sp)
   27d24:	ddc00715 	stw	r23,28(sp)
   27d28:	dd800615 	stw	r22,24(sp)
   27d2c:	dd000415 	stw	r20,16(sp)
   27d30:	dc400115 	stw	r17,4(sp)
   27d34:	dc000015 	stw	r16,0(sp)
   27d38:	dfc00915 	stw	ra,36(sp)
   27d3c:	dcc00315 	stw	r19,12(sp)
   27d40:	dc800215 	stw	r18,8(sp)
   27d44:	282d883a 	mov	r22,r5
   27d48:	202f883a 	mov	r23,r4
   27d4c:	3029883a 	mov	r20,r6
   27d50:	3839883a 	mov	fp,r7
   27d54:	2c000504 	addi	r16,r5,20
   27d58:	0023883a 	mov	r17,zero
   27d5c:	84c00017 	ldw	r19,0(r16)
   27d60:	a00b883a 	mov	r5,r20
   27d64:	8c400044 	addi	r17,r17,1
   27d68:	993fffcc 	andi	r4,r19,65535
   27d6c:	00212100 	call	21210 <__mulsi3>
   27d70:	1725883a 	add	r18,r2,fp
   27d74:	9808d43a 	srli	r4,r19,16
   27d78:	9026d43a 	srli	r19,r18,16
   27d7c:	a00b883a 	mov	r5,r20
   27d80:	00212100 	call	21210 <__mulsi3>
   27d84:	988f883a 	add	r7,r19,r2
   27d88:	3804943a 	slli	r2,r7,16
   27d8c:	94bfffcc 	andi	r18,r18,65535
   27d90:	3838d43a 	srli	fp,r7,16
   27d94:	14a5883a 	add	r18,r2,r18
   27d98:	84800015 	stw	r18,0(r16)
   27d9c:	84000104 	addi	r16,r16,4
   27da0:	8d7fee16 	blt	r17,r21,27d5c <__multadd+0x48>
   27da4:	e0000926 	beq	fp,zero,27dcc <__multadd+0xb8>
   27da8:	b0800217 	ldw	r2,8(r22)
   27dac:	a880140e 	bge	r21,r2,27e00 <__multadd+0xec>
   27db0:	a8800144 	addi	r2,r21,5
   27db4:	1085883a 	add	r2,r2,r2
   27db8:	1085883a 	add	r2,r2,r2
   27dbc:	b085883a 	add	r2,r22,r2
   27dc0:	ad400044 	addi	r21,r21,1
   27dc4:	17000015 	stw	fp,0(r2)
   27dc8:	b5400415 	stw	r21,16(r22)
   27dcc:	b005883a 	mov	r2,r22
   27dd0:	dfc00917 	ldw	ra,36(sp)
   27dd4:	df000817 	ldw	fp,32(sp)
   27dd8:	ddc00717 	ldw	r23,28(sp)
   27ddc:	dd800617 	ldw	r22,24(sp)
   27de0:	dd400517 	ldw	r21,20(sp)
   27de4:	dd000417 	ldw	r20,16(sp)
   27de8:	dcc00317 	ldw	r19,12(sp)
   27dec:	dc800217 	ldw	r18,8(sp)
   27df0:	dc400117 	ldw	r17,4(sp)
   27df4:	dc000017 	ldw	r16,0(sp)
   27df8:	dec00a04 	addi	sp,sp,40
   27dfc:	f800283a 	ret
   27e00:	b1400117 	ldw	r5,4(r22)
   27e04:	b809883a 	mov	r4,r23
   27e08:	29400044 	addi	r5,r5,1
   27e0c:	0027c440 	call	27c44 <_Balloc>
   27e10:	b1800417 	ldw	r6,16(r22)
   27e14:	b1400304 	addi	r5,r22,12
   27e18:	11000304 	addi	r4,r2,12
   27e1c:	31800084 	addi	r6,r6,2
   27e20:	318d883a 	add	r6,r6,r6
   27e24:	318d883a 	add	r6,r6,r6
   27e28:	1021883a 	mov	r16,r2
   27e2c:	002302c0 	call	2302c <memcpy>
   27e30:	b0c00117 	ldw	r3,4(r22)
   27e34:	b8801317 	ldw	r2,76(r23)
   27e38:	18c7883a 	add	r3,r3,r3
   27e3c:	18c7883a 	add	r3,r3,r3
   27e40:	10c5883a 	add	r2,r2,r3
   27e44:	10c00017 	ldw	r3,0(r2)
   27e48:	b0c00015 	stw	r3,0(r22)
   27e4c:	15800015 	stw	r22,0(r2)
   27e50:	802d883a 	mov	r22,r16
   27e54:	003fd606 	br	27db0 <__multadd+0x9c>

00027e58 <__s2b>:
   27e58:	defff904 	addi	sp,sp,-28
   27e5c:	dd000415 	stw	r20,16(sp)
   27e60:	dc400115 	stw	r17,4(sp)
   27e64:	2829883a 	mov	r20,r5
   27e68:	2023883a 	mov	r17,r4
   27e6c:	01400244 	movi	r5,9
   27e70:	39000204 	addi	r4,r7,8
   27e74:	dcc00315 	stw	r19,12(sp)
   27e78:	dc800215 	stw	r18,8(sp)
   27e7c:	dfc00615 	stw	ra,24(sp)
   27e80:	dd400515 	stw	r21,20(sp)
   27e84:	dc000015 	stw	r16,0(sp)
   27e88:	3825883a 	mov	r18,r7
   27e8c:	3027883a 	mov	r19,r6
   27e90:	002aefc0 	call	2aefc <__divsi3>
   27e94:	00c00044 	movi	r3,1
   27e98:	000b883a 	mov	r5,zero
   27e9c:	1880030e 	bge	r3,r2,27eac <__s2b+0x54>
   27ea0:	18c7883a 	add	r3,r3,r3
   27ea4:	29400044 	addi	r5,r5,1
   27ea8:	18bffd16 	blt	r3,r2,27ea0 <__s2b+0x48>
   27eac:	8809883a 	mov	r4,r17
   27eb0:	0027c440 	call	27c44 <_Balloc>
   27eb4:	d8c00717 	ldw	r3,28(sp)
   27eb8:	10c00515 	stw	r3,20(r2)
   27ebc:	00c00044 	movi	r3,1
   27ec0:	10c00415 	stw	r3,16(r2)
   27ec4:	00c00244 	movi	r3,9
   27ec8:	1cc0210e 	bge	r3,r19,27f50 <__s2b+0xf8>
   27ecc:	a0eb883a 	add	r21,r20,r3
   27ed0:	a821883a 	mov	r16,r21
   27ed4:	a4e9883a 	add	r20,r20,r19
   27ed8:	81c00007 	ldb	r7,0(r16)
   27edc:	8809883a 	mov	r4,r17
   27ee0:	84000044 	addi	r16,r16,1
   27ee4:	100b883a 	mov	r5,r2
   27ee8:	01800284 	movi	r6,10
   27eec:	39fff404 	addi	r7,r7,-48
   27ef0:	0027d140 	call	27d14 <__multadd>
   27ef4:	853ff81e 	bne	r16,r20,27ed8 <__s2b+0x80>
   27ef8:	ace1883a 	add	r16,r21,r19
   27efc:	843ffe04 	addi	r16,r16,-8
   27f00:	9c800a0e 	bge	r19,r18,27f2c <__s2b+0xd4>
   27f04:	94e5c83a 	sub	r18,r18,r19
   27f08:	84a5883a 	add	r18,r16,r18
   27f0c:	81c00007 	ldb	r7,0(r16)
   27f10:	8809883a 	mov	r4,r17
   27f14:	84000044 	addi	r16,r16,1
   27f18:	100b883a 	mov	r5,r2
   27f1c:	01800284 	movi	r6,10
   27f20:	39fff404 	addi	r7,r7,-48
   27f24:	0027d140 	call	27d14 <__multadd>
   27f28:	84bff81e 	bne	r16,r18,27f0c <__s2b+0xb4>
   27f2c:	dfc00617 	ldw	ra,24(sp)
   27f30:	dd400517 	ldw	r21,20(sp)
   27f34:	dd000417 	ldw	r20,16(sp)
   27f38:	dcc00317 	ldw	r19,12(sp)
   27f3c:	dc800217 	ldw	r18,8(sp)
   27f40:	dc400117 	ldw	r17,4(sp)
   27f44:	dc000017 	ldw	r16,0(sp)
   27f48:	dec00704 	addi	sp,sp,28
   27f4c:	f800283a 	ret
   27f50:	a4000284 	addi	r16,r20,10
   27f54:	1827883a 	mov	r19,r3
   27f58:	003fe906 	br	27f00 <__s2b+0xa8>

00027f5c <__hi0bits>:
   27f5c:	20bfffec 	andhi	r2,r4,65535
   27f60:	1000141e 	bne	r2,zero,27fb4 <__hi0bits+0x58>
   27f64:	2008943a 	slli	r4,r4,16
   27f68:	00800404 	movi	r2,16
   27f6c:	20ffc02c 	andhi	r3,r4,65280
   27f70:	1800021e 	bne	r3,zero,27f7c <__hi0bits+0x20>
   27f74:	2008923a 	slli	r4,r4,8
   27f78:	10800204 	addi	r2,r2,8
   27f7c:	20fc002c 	andhi	r3,r4,61440
   27f80:	1800021e 	bne	r3,zero,27f8c <__hi0bits+0x30>
   27f84:	2008913a 	slli	r4,r4,4
   27f88:	10800104 	addi	r2,r2,4
   27f8c:	20f0002c 	andhi	r3,r4,49152
   27f90:	1800031e 	bne	r3,zero,27fa0 <__hi0bits+0x44>
   27f94:	2109883a 	add	r4,r4,r4
   27f98:	10800084 	addi	r2,r2,2
   27f9c:	2109883a 	add	r4,r4,r4
   27fa0:	20000316 	blt	r4,zero,27fb0 <__hi0bits+0x54>
   27fa4:	2110002c 	andhi	r4,r4,16384
   27fa8:	2000041e 	bne	r4,zero,27fbc <__hi0bits+0x60>
   27fac:	00800804 	movi	r2,32
   27fb0:	f800283a 	ret
   27fb4:	0005883a 	mov	r2,zero
   27fb8:	003fec06 	br	27f6c <__hi0bits+0x10>
   27fbc:	10800044 	addi	r2,r2,1
   27fc0:	f800283a 	ret

00027fc4 <__lo0bits>:
   27fc4:	20c00017 	ldw	r3,0(r4)
   27fc8:	188001cc 	andi	r2,r3,7
   27fcc:	10000826 	beq	r2,zero,27ff0 <__lo0bits+0x2c>
   27fd0:	1880004c 	andi	r2,r3,1
   27fd4:	1000211e 	bne	r2,zero,2805c <__lo0bits+0x98>
   27fd8:	1880008c 	andi	r2,r3,2
   27fdc:	1000211e 	bne	r2,zero,28064 <__lo0bits+0xa0>
   27fe0:	1806d0ba 	srli	r3,r3,2
   27fe4:	00800084 	movi	r2,2
   27fe8:	20c00015 	stw	r3,0(r4)
   27fec:	f800283a 	ret
   27ff0:	18bfffcc 	andi	r2,r3,65535
   27ff4:	10001326 	beq	r2,zero,28044 <__lo0bits+0x80>
   27ff8:	0005883a 	mov	r2,zero
   27ffc:	19403fcc 	andi	r5,r3,255
   28000:	2800021e 	bne	r5,zero,2800c <__lo0bits+0x48>
   28004:	1806d23a 	srli	r3,r3,8
   28008:	10800204 	addi	r2,r2,8
   2800c:	194003cc 	andi	r5,r3,15
   28010:	2800021e 	bne	r5,zero,2801c <__lo0bits+0x58>
   28014:	1806d13a 	srli	r3,r3,4
   28018:	10800104 	addi	r2,r2,4
   2801c:	194000cc 	andi	r5,r3,3
   28020:	2800021e 	bne	r5,zero,2802c <__lo0bits+0x68>
   28024:	1806d0ba 	srli	r3,r3,2
   28028:	10800084 	addi	r2,r2,2
   2802c:	1940004c 	andi	r5,r3,1
   28030:	2800081e 	bne	r5,zero,28054 <__lo0bits+0x90>
   28034:	1806d07a 	srli	r3,r3,1
   28038:	1800051e 	bne	r3,zero,28050 <__lo0bits+0x8c>
   2803c:	00800804 	movi	r2,32
   28040:	f800283a 	ret
   28044:	1806d43a 	srli	r3,r3,16
   28048:	00800404 	movi	r2,16
   2804c:	003feb06 	br	27ffc <__lo0bits+0x38>
   28050:	10800044 	addi	r2,r2,1
   28054:	20c00015 	stw	r3,0(r4)
   28058:	f800283a 	ret
   2805c:	0005883a 	mov	r2,zero
   28060:	f800283a 	ret
   28064:	1806d07a 	srli	r3,r3,1
   28068:	00800044 	movi	r2,1
   2806c:	20c00015 	stw	r3,0(r4)
   28070:	f800283a 	ret

00028074 <__i2b>:
   28074:	defffd04 	addi	sp,sp,-12
   28078:	dc000015 	stw	r16,0(sp)
   2807c:	04000044 	movi	r16,1
   28080:	dc400115 	stw	r17,4(sp)
   28084:	2823883a 	mov	r17,r5
   28088:	800b883a 	mov	r5,r16
   2808c:	dfc00215 	stw	ra,8(sp)
   28090:	0027c440 	call	27c44 <_Balloc>
   28094:	14400515 	stw	r17,20(r2)
   28098:	14000415 	stw	r16,16(r2)
   2809c:	dfc00217 	ldw	ra,8(sp)
   280a0:	dc400117 	ldw	r17,4(sp)
   280a4:	dc000017 	ldw	r16,0(sp)
   280a8:	dec00304 	addi	sp,sp,12
   280ac:	f800283a 	ret

000280b0 <__multiply>:
   280b0:	defff004 	addi	sp,sp,-64
   280b4:	dc800815 	stw	r18,32(sp)
   280b8:	dc400715 	stw	r17,28(sp)
   280bc:	34800417 	ldw	r18,16(r6)
   280c0:	2c400417 	ldw	r17,16(r5)
   280c4:	ddc00d15 	stw	r23,52(sp)
   280c8:	dc000615 	stw	r16,24(sp)
   280cc:	dfc00f15 	stw	ra,60(sp)
   280d0:	df000e15 	stw	fp,56(sp)
   280d4:	dd800c15 	stw	r22,48(sp)
   280d8:	dd400b15 	stw	r21,44(sp)
   280dc:	dd000a15 	stw	r20,40(sp)
   280e0:	dcc00915 	stw	r19,36(sp)
   280e4:	2821883a 	mov	r16,r5
   280e8:	302f883a 	mov	r23,r6
   280ec:	8c80050e 	bge	r17,r18,28104 <__multiply+0x54>
   280f0:	8807883a 	mov	r3,r17
   280f4:	3021883a 	mov	r16,r6
   280f8:	9023883a 	mov	r17,r18
   280fc:	282f883a 	mov	r23,r5
   28100:	1825883a 	mov	r18,r3
   28104:	80800217 	ldw	r2,8(r16)
   28108:	8c87883a 	add	r3,r17,r18
   2810c:	d8c00115 	stw	r3,4(sp)
   28110:	81400117 	ldw	r5,4(r16)
   28114:	10c0010e 	bge	r2,r3,2811c <__multiply+0x6c>
   28118:	29400044 	addi	r5,r5,1
   2811c:	0027c440 	call	27c44 <_Balloc>
   28120:	d8c00117 	ldw	r3,4(sp)
   28124:	d8800515 	stw	r2,20(sp)
   28128:	14c00504 	addi	r19,r2,20
   2812c:	1d400144 	addi	r21,r3,5
   28130:	ad6b883a 	add	r21,r21,r21
   28134:	ad6b883a 	add	r21,r21,r21
   28138:	156b883a 	add	r21,r2,r21
   2813c:	dd400215 	stw	r21,8(sp)
   28140:	9805883a 	mov	r2,r19
   28144:	9d40042e 	bgeu	r19,r21,28158 <__multiply+0xa8>
   28148:	d8c00217 	ldw	r3,8(sp)
   2814c:	10000015 	stw	zero,0(r2)
   28150:	10800104 	addi	r2,r2,4
   28154:	10fffc36 	bltu	r2,r3,28148 <__multiply+0x98>
   28158:	94800144 	addi	r18,r18,5
   2815c:	94a5883a 	add	r18,r18,r18
   28160:	94ad883a 	add	r22,r18,r18
   28164:	8c400144 	addi	r17,r17,5
   28168:	8c63883a 	add	r17,r17,r17
   2816c:	bdad883a 	add	r22,r23,r22
   28170:	80c00504 	addi	r3,r16,20
   28174:	8c63883a 	add	r17,r17,r17
   28178:	bc800504 	addi	r18,r23,20
   2817c:	dd800315 	stw	r22,12(sp)
   28180:	d8c00415 	stw	r3,16(sp)
   28184:	dcc00015 	stw	r19,0(sp)
   28188:	8463883a 	add	r17,r16,r17
   2818c:	9580412e 	bgeu	r18,r22,28294 <__multiply+0x1e4>
   28190:	90800017 	ldw	r2,0(r18)
   28194:	173fffcc 	andi	fp,r2,65535
   28198:	e0001a26 	beq	fp,zero,28204 <__multiply+0x154>
   2819c:	dd000017 	ldw	r20,0(sp)
   281a0:	dd800417 	ldw	r22,16(sp)
   281a4:	002b883a 	mov	r21,zero
   281a8:	b4c00017 	ldw	r19,0(r22)
   281ac:	a4000017 	ldw	r16,0(r20)
   281b0:	e00b883a 	mov	r5,fp
   281b4:	993fffcc 	andi	r4,r19,65535
   281b8:	00212100 	call	21210 <__mulsi3>
   281bc:	9808d43a 	srli	r4,r19,16
   281c0:	817fffcc 	andi	r5,r16,65535
   281c4:	1145883a 	add	r2,r2,r5
   281c8:	e00b883a 	mov	r5,fp
   281cc:	1567883a 	add	r19,r2,r21
   281d0:	8020d43a 	srli	r16,r16,16
   281d4:	00212100 	call	21210 <__mulsi3>
   281d8:	9808d43a 	srli	r4,r19,16
   281dc:	1405883a 	add	r2,r2,r16
   281e0:	a4c0000d 	sth	r19,0(r20)
   281e4:	110f883a 	add	r7,r2,r4
   281e8:	a1c0008d 	sth	r7,2(r20)
   281ec:	b5800104 	addi	r22,r22,4
   281f0:	382ad43a 	srli	r21,r7,16
   281f4:	a5000104 	addi	r20,r20,4
   281f8:	b47feb36 	bltu	r22,r17,281a8 <__multiply+0xf8>
   281fc:	a5400015 	stw	r21,0(r20)
   28200:	90800017 	ldw	r2,0(r18)
   28204:	1038d43a 	srli	fp,r2,16
   28208:	e0001c26 	beq	fp,zero,2827c <__multiply+0x1cc>
   2820c:	d8c00017 	ldw	r3,0(sp)
   28210:	dd000417 	ldw	r20,16(sp)
   28214:	002b883a 	mov	r21,zero
   28218:	1d800017 	ldw	r22,0(r3)
   2821c:	182f883a 	mov	r23,r3
   28220:	b021883a 	mov	r16,r22
   28224:	a4c00017 	ldw	r19,0(r20)
   28228:	8020d43a 	srli	r16,r16,16
   2822c:	e00b883a 	mov	r5,fp
   28230:	993fffcc 	andi	r4,r19,65535
   28234:	00212100 	call	21210 <__mulsi3>
   28238:	1405883a 	add	r2,r2,r16
   2823c:	9808d43a 	srli	r4,r19,16
   28240:	156b883a 	add	r21,r2,r21
   28244:	bdc00104 	addi	r23,r23,4
   28248:	bdbfff0d 	sth	r22,-4(r23)
   2824c:	bd7fff8d 	sth	r21,-2(r23)
   28250:	bc000017 	ldw	r16,0(r23)
   28254:	e00b883a 	mov	r5,fp
   28258:	00212100 	call	21210 <__mulsi3>
   2825c:	a80ed43a 	srli	r7,r21,16
   28260:	813fffcc 	andi	r4,r16,65535
   28264:	2085883a 	add	r2,r4,r2
   28268:	11ed883a 	add	r22,r2,r7
   2826c:	a5000104 	addi	r20,r20,4
   28270:	b02ad43a 	srli	r21,r22,16
   28274:	a47feb36 	bltu	r20,r17,28224 <__multiply+0x174>
   28278:	bd800015 	stw	r22,0(r23)
   2827c:	d8c00017 	ldw	r3,0(sp)
   28280:	94800104 	addi	r18,r18,4
   28284:	18c00104 	addi	r3,r3,4
   28288:	d8c00015 	stw	r3,0(sp)
   2828c:	d8c00317 	ldw	r3,12(sp)
   28290:	90ffbf36 	bltu	r18,r3,28190 <__multiply+0xe0>
   28294:	d8c00117 	ldw	r3,4(sp)
   28298:	00c00c0e 	bge	zero,r3,282cc <__multiply+0x21c>
   2829c:	d8c00217 	ldw	r3,8(sp)
   282a0:	18bfff17 	ldw	r2,-4(r3)
   282a4:	1d7fff04 	addi	r21,r3,-4
   282a8:	10000326 	beq	r2,zero,282b8 <__multiply+0x208>
   282ac:	00000706 	br	282cc <__multiply+0x21c>
   282b0:	a8800017 	ldw	r2,0(r21)
   282b4:	1000051e 	bne	r2,zero,282cc <__multiply+0x21c>
   282b8:	d8c00117 	ldw	r3,4(sp)
   282bc:	ad7fff04 	addi	r21,r21,-4
   282c0:	18ffffc4 	addi	r3,r3,-1
   282c4:	d8c00115 	stw	r3,4(sp)
   282c8:	183ff91e 	bne	r3,zero,282b0 <__multiply+0x200>
   282cc:	d8800517 	ldw	r2,20(sp)
   282d0:	d8c00117 	ldw	r3,4(sp)
   282d4:	10c00415 	stw	r3,16(r2)
   282d8:	dfc00f17 	ldw	ra,60(sp)
   282dc:	df000e17 	ldw	fp,56(sp)
   282e0:	ddc00d17 	ldw	r23,52(sp)
   282e4:	dd800c17 	ldw	r22,48(sp)
   282e8:	dd400b17 	ldw	r21,44(sp)
   282ec:	dd000a17 	ldw	r20,40(sp)
   282f0:	dcc00917 	ldw	r19,36(sp)
   282f4:	dc800817 	ldw	r18,32(sp)
   282f8:	dc400717 	ldw	r17,28(sp)
   282fc:	dc000617 	ldw	r16,24(sp)
   28300:	dec01004 	addi	sp,sp,64
   28304:	f800283a 	ret

00028308 <__pow5mult>:
   28308:	defffb04 	addi	sp,sp,-20
   2830c:	dcc00315 	stw	r19,12(sp)
   28310:	dc800215 	stw	r18,8(sp)
   28314:	dc000015 	stw	r16,0(sp)
   28318:	dfc00415 	stw	ra,16(sp)
   2831c:	dc400115 	stw	r17,4(sp)
   28320:	308000cc 	andi	r2,r6,3
   28324:	3021883a 	mov	r16,r6
   28328:	2027883a 	mov	r19,r4
   2832c:	2825883a 	mov	r18,r5
   28330:	10002e1e 	bne	r2,zero,283ec <__pow5mult+0xe4>
   28334:	8021d0ba 	srai	r16,r16,2
   28338:	80001a26 	beq	r16,zero,283a4 <__pow5mult+0x9c>
   2833c:	9c401217 	ldw	r17,72(r19)
   28340:	8800061e 	bne	r17,zero,2835c <__pow5mult+0x54>
   28344:	00003406 	br	28418 <__pow5mult+0x110>
   28348:	8021d07a 	srai	r16,r16,1
   2834c:	80001526 	beq	r16,zero,283a4 <__pow5mult+0x9c>
   28350:	88c00017 	ldw	r3,0(r17)
   28354:	18001b26 	beq	r3,zero,283c4 <__pow5mult+0xbc>
   28358:	1823883a 	mov	r17,r3
   2835c:	80c0004c 	andi	r3,r16,1
   28360:	183ff926 	beq	r3,zero,28348 <__pow5mult+0x40>
   28364:	900b883a 	mov	r5,r18
   28368:	880d883a 	mov	r6,r17
   2836c:	9809883a 	mov	r4,r19
   28370:	00280b00 	call	280b0 <__multiply>
   28374:	90001b26 	beq	r18,zero,283e4 <__pow5mult+0xdc>
   28378:	91000117 	ldw	r4,4(r18)
   2837c:	98c01317 	ldw	r3,76(r19)
   28380:	8021d07a 	srai	r16,r16,1
   28384:	2109883a 	add	r4,r4,r4
   28388:	2109883a 	add	r4,r4,r4
   2838c:	1907883a 	add	r3,r3,r4
   28390:	19000017 	ldw	r4,0(r3)
   28394:	91000015 	stw	r4,0(r18)
   28398:	1c800015 	stw	r18,0(r3)
   2839c:	1025883a 	mov	r18,r2
   283a0:	803feb1e 	bne	r16,zero,28350 <__pow5mult+0x48>
   283a4:	9005883a 	mov	r2,r18
   283a8:	dfc00417 	ldw	ra,16(sp)
   283ac:	dcc00317 	ldw	r19,12(sp)
   283b0:	dc800217 	ldw	r18,8(sp)
   283b4:	dc400117 	ldw	r17,4(sp)
   283b8:	dc000017 	ldw	r16,0(sp)
   283bc:	dec00504 	addi	sp,sp,20
   283c0:	f800283a 	ret
   283c4:	880b883a 	mov	r5,r17
   283c8:	880d883a 	mov	r6,r17
   283cc:	9809883a 	mov	r4,r19
   283d0:	00280b00 	call	280b0 <__multiply>
   283d4:	88800015 	stw	r2,0(r17)
   283d8:	10000015 	stw	zero,0(r2)
   283dc:	1023883a 	mov	r17,r2
   283e0:	003fde06 	br	2835c <__pow5mult+0x54>
   283e4:	1025883a 	mov	r18,r2
   283e8:	003fd706 	br	28348 <__pow5mult+0x40>
   283ec:	10bfffc4 	addi	r2,r2,-1
   283f0:	1085883a 	add	r2,r2,r2
   283f4:	00c000f4 	movhi	r3,3
   283f8:	18fb9404 	addi	r3,r3,-4528
   283fc:	1085883a 	add	r2,r2,r2
   28400:	1885883a 	add	r2,r3,r2
   28404:	11800017 	ldw	r6,0(r2)
   28408:	000f883a 	mov	r7,zero
   2840c:	0027d140 	call	27d14 <__multadd>
   28410:	1025883a 	mov	r18,r2
   28414:	003fc706 	br	28334 <__pow5mult+0x2c>
   28418:	9809883a 	mov	r4,r19
   2841c:	01409c44 	movi	r5,625
   28420:	00280740 	call	28074 <__i2b>
   28424:	98801215 	stw	r2,72(r19)
   28428:	1023883a 	mov	r17,r2
   2842c:	10000015 	stw	zero,0(r2)
   28430:	003fca06 	br	2835c <__pow5mult+0x54>

00028434 <__lshift>:
   28434:	defff904 	addi	sp,sp,-28
   28438:	dd400515 	stw	r21,20(sp)
   2843c:	dc400115 	stw	r17,4(sp)
   28440:	2d400417 	ldw	r21,16(r5)
   28444:	3023d17a 	srai	r17,r6,5
   28448:	28800217 	ldw	r2,8(r5)
   2844c:	dd000415 	stw	r20,16(sp)
   28450:	8d6b883a 	add	r21,r17,r21
   28454:	dcc00315 	stw	r19,12(sp)
   28458:	dc800215 	stw	r18,8(sp)
   2845c:	dc000015 	stw	r16,0(sp)
   28460:	dfc00615 	stw	ra,24(sp)
   28464:	ac000044 	addi	r16,r21,1
   28468:	2825883a 	mov	r18,r5
   2846c:	3029883a 	mov	r20,r6
   28470:	2027883a 	mov	r19,r4
   28474:	29400117 	ldw	r5,4(r5)
   28478:	1400030e 	bge	r2,r16,28488 <__lshift+0x54>
   2847c:	1085883a 	add	r2,r2,r2
   28480:	29400044 	addi	r5,r5,1
   28484:	143ffd16 	blt	r2,r16,2847c <__lshift+0x48>
   28488:	9809883a 	mov	r4,r19
   2848c:	0027c440 	call	27c44 <_Balloc>
   28490:	10c00504 	addi	r3,r2,20
   28494:	0440090e 	bge	zero,r17,284bc <__lshift+0x88>
   28498:	000f883a 	mov	r7,zero
   2849c:	18000015 	stw	zero,0(r3)
   284a0:	39c00044 	addi	r7,r7,1
   284a4:	18c00104 	addi	r3,r3,4
   284a8:	3c7ffc1e 	bne	r7,r17,2849c <__lshift+0x68>
   284ac:	38c00144 	addi	r3,r7,5
   284b0:	18c7883a 	add	r3,r3,r3
   284b4:	18c7883a 	add	r3,r3,r3
   284b8:	10c7883a 	add	r3,r2,r3
   284bc:	92000417 	ldw	r8,16(r18)
   284c0:	a18007cc 	andi	r6,r20,31
   284c4:	91c00504 	addi	r7,r18,20
   284c8:	42000144 	addi	r8,r8,5
   284cc:	4211883a 	add	r8,r8,r8
   284d0:	4211883a 	add	r8,r8,r8
   284d4:	9211883a 	add	r8,r18,r8
   284d8:	30002226 	beq	r6,zero,28564 <__lshift+0x130>
   284dc:	02800804 	movi	r10,32
   284e0:	5195c83a 	sub	r10,r10,r6
   284e4:	000b883a 	mov	r5,zero
   284e8:	3a400017 	ldw	r9,0(r7)
   284ec:	18c00104 	addi	r3,r3,4
   284f0:	39c00104 	addi	r7,r7,4
   284f4:	4992983a 	sll	r9,r9,r6
   284f8:	2a4ab03a 	or	r5,r5,r9
   284fc:	197fff15 	stw	r5,-4(r3)
   28500:	397fff17 	ldw	r5,-4(r7)
   28504:	2a8ad83a 	srl	r5,r5,r10
   28508:	3a3ff736 	bltu	r7,r8,284e8 <__lshift+0xb4>
   2850c:	19400015 	stw	r5,0(r3)
   28510:	28000126 	beq	r5,zero,28518 <__lshift+0xe4>
   28514:	ac000084 	addi	r16,r21,2
   28518:	91000117 	ldw	r4,4(r18)
   2851c:	98c01317 	ldw	r3,76(r19)
   28520:	843fffc4 	addi	r16,r16,-1
   28524:	2109883a 	add	r4,r4,r4
   28528:	2109883a 	add	r4,r4,r4
   2852c:	1907883a 	add	r3,r3,r4
   28530:	19000017 	ldw	r4,0(r3)
   28534:	14000415 	stw	r16,16(r2)
   28538:	91000015 	stw	r4,0(r18)
   2853c:	1c800015 	stw	r18,0(r3)
   28540:	dfc00617 	ldw	ra,24(sp)
   28544:	dd400517 	ldw	r21,20(sp)
   28548:	dd000417 	ldw	r20,16(sp)
   2854c:	dcc00317 	ldw	r19,12(sp)
   28550:	dc800217 	ldw	r18,8(sp)
   28554:	dc400117 	ldw	r17,4(sp)
   28558:	dc000017 	ldw	r16,0(sp)
   2855c:	dec00704 	addi	sp,sp,28
   28560:	f800283a 	ret
   28564:	39400017 	ldw	r5,0(r7)
   28568:	18c00104 	addi	r3,r3,4
   2856c:	39c00104 	addi	r7,r7,4
   28570:	197fff15 	stw	r5,-4(r3)
   28574:	3a3fe82e 	bgeu	r7,r8,28518 <__lshift+0xe4>
   28578:	39400017 	ldw	r5,0(r7)
   2857c:	18c00104 	addi	r3,r3,4
   28580:	39c00104 	addi	r7,r7,4
   28584:	197fff15 	stw	r5,-4(r3)
   28588:	3a3ff636 	bltu	r7,r8,28564 <__lshift+0x130>
   2858c:	003fe206 	br	28518 <__lshift+0xe4>

00028590 <__mcmp>:
   28590:	20800417 	ldw	r2,16(r4)
   28594:	28c00417 	ldw	r3,16(r5)
   28598:	10c5c83a 	sub	r2,r2,r3
   2859c:	10000f1e 	bne	r2,zero,285dc <__mcmp+0x4c>
   285a0:	18c00144 	addi	r3,r3,5
   285a4:	18c7883a 	add	r3,r3,r3
   285a8:	18c7883a 	add	r3,r3,r3
   285ac:	21c00504 	addi	r7,r4,20
   285b0:	28cb883a 	add	r5,r5,r3
   285b4:	20c9883a 	add	r4,r4,r3
   285b8:	213fff04 	addi	r4,r4,-4
   285bc:	297fff04 	addi	r5,r5,-4
   285c0:	21800017 	ldw	r6,0(r4)
   285c4:	28c00017 	ldw	r3,0(r5)
   285c8:	30c0021e 	bne	r6,r3,285d4 <__mcmp+0x44>
   285cc:	393ffa36 	bltu	r7,r4,285b8 <__mcmp+0x28>
   285d0:	f800283a 	ret
   285d4:	30c00236 	bltu	r6,r3,285e0 <__mcmp+0x50>
   285d8:	00800044 	movi	r2,1
   285dc:	f800283a 	ret
   285e0:	00bfffc4 	movi	r2,-1
   285e4:	f800283a 	ret

000285e8 <__mdiff>:
   285e8:	defffb04 	addi	sp,sp,-20
   285ec:	dc000015 	stw	r16,0(sp)
   285f0:	2821883a 	mov	r16,r5
   285f4:	dc800215 	stw	r18,8(sp)
   285f8:	300b883a 	mov	r5,r6
   285fc:	2025883a 	mov	r18,r4
   28600:	8009883a 	mov	r4,r16
   28604:	dc400115 	stw	r17,4(sp)
   28608:	dfc00415 	stw	ra,16(sp)
   2860c:	dcc00315 	stw	r19,12(sp)
   28610:	3023883a 	mov	r17,r6
   28614:	00285900 	call	28590 <__mcmp>
   28618:	10005026 	beq	r2,zero,2875c <__mdiff+0x174>
   2861c:	10004a16 	blt	r2,zero,28748 <__mdiff+0x160>
   28620:	0027883a 	mov	r19,zero
   28624:	81400117 	ldw	r5,4(r16)
   28628:	9009883a 	mov	r4,r18
   2862c:	0027c440 	call	27c44 <_Balloc>
   28630:	82400417 	ldw	r9,16(r16)
   28634:	89800417 	ldw	r6,16(r17)
   28638:	14c00315 	stw	r19,12(r2)
   2863c:	4b800144 	addi	r14,r9,5
   28640:	31800144 	addi	r6,r6,5
   28644:	739d883a 	add	r14,r14,r14
   28648:	318d883a 	add	r6,r6,r6
   2864c:	739d883a 	add	r14,r14,r14
   28650:	318d883a 	add	r6,r6,r6
   28654:	81c00504 	addi	r7,r16,20
   28658:	839d883a 	add	r14,r16,r14
   2865c:	8a000504 	addi	r8,r17,20
   28660:	898d883a 	add	r6,r17,r6
   28664:	10c00504 	addi	r3,r2,20
   28668:	0009883a 	mov	r4,zero
   2866c:	3b000017 	ldw	r12,0(r7)
   28670:	42c00017 	ldw	r11,0(r8)
   28674:	42000104 	addi	r8,r8,4
   28678:	62bfffcc 	andi	r10,r12,65535
   2867c:	5b7fffcc 	andi	r13,r11,65535
   28680:	5109883a 	add	r4,r10,r4
   28684:	2355c83a 	sub	r10,r4,r13
   28688:	5816d43a 	srli	r11,r11,16
   2868c:	6008d43a 	srli	r4,r12,16
   28690:	501bd43a 	srai	r13,r10,16
   28694:	1a80000d 	sth	r10,0(r3)
   28698:	22c9c83a 	sub	r4,r4,r11
   2869c:	2349883a 	add	r4,r4,r13
   286a0:	1900008d 	sth	r4,2(r3)
   286a4:	39c00104 	addi	r7,r7,4
   286a8:	2009d43a 	srai	r4,r4,16
   286ac:	18c00104 	addi	r3,r3,4
   286b0:	41bfee36 	bltu	r8,r6,2866c <__mdiff+0x84>
   286b4:	180b883a 	mov	r5,r3
   286b8:	3815883a 	mov	r10,r7
   286bc:	3b80132e 	bgeu	r7,r14,2870c <__mdiff+0x124>
   286c0:	3a000017 	ldw	r8,0(r7)
   286c4:	18c00104 	addi	r3,r3,4
   286c8:	39c00104 	addi	r7,r7,4
   286cc:	41bfffcc 	andi	r6,r8,65535
   286d0:	310d883a 	add	r6,r6,r4
   286d4:	3009d43a 	srai	r4,r6,16
   286d8:	4010d43a 	srli	r8,r8,16
   286dc:	19bfff0d 	sth	r6,-4(r3)
   286e0:	2209883a 	add	r4,r4,r8
   286e4:	193fff8d 	sth	r4,-2(r3)
   286e8:	2009d43a 	srai	r4,r4,16
   286ec:	3bbff436 	bltu	r7,r14,286c0 <__mdiff+0xd8>
   286f0:	0286303a 	nor	r3,zero,r10
   286f4:	1b87883a 	add	r3,r3,r14
   286f8:	1806d0ba 	srli	r3,r3,2
   286fc:	18c00044 	addi	r3,r3,1
   28700:	18c7883a 	add	r3,r3,r3
   28704:	18c7883a 	add	r3,r3,r3
   28708:	28c7883a 	add	r3,r5,r3
   2870c:	193fff17 	ldw	r4,-4(r3)
   28710:	18ffff04 	addi	r3,r3,-4
   28714:	2000041e 	bne	r4,zero,28728 <__mdiff+0x140>
   28718:	18ffff04 	addi	r3,r3,-4
   2871c:	19000017 	ldw	r4,0(r3)
   28720:	4a7fffc4 	addi	r9,r9,-1
   28724:	203ffc26 	beq	r4,zero,28718 <__mdiff+0x130>
   28728:	12400415 	stw	r9,16(r2)
   2872c:	dfc00417 	ldw	ra,16(sp)
   28730:	dcc00317 	ldw	r19,12(sp)
   28734:	dc800217 	ldw	r18,8(sp)
   28738:	dc400117 	ldw	r17,4(sp)
   2873c:	dc000017 	ldw	r16,0(sp)
   28740:	dec00504 	addi	sp,sp,20
   28744:	f800283a 	ret
   28748:	8005883a 	mov	r2,r16
   2874c:	04c00044 	movi	r19,1
   28750:	8821883a 	mov	r16,r17
   28754:	1023883a 	mov	r17,r2
   28758:	003fb206 	br	28624 <__mdiff+0x3c>
   2875c:	9009883a 	mov	r4,r18
   28760:	000b883a 	mov	r5,zero
   28764:	0027c440 	call	27c44 <_Balloc>
   28768:	00c00044 	movi	r3,1
   2876c:	10c00415 	stw	r3,16(r2)
   28770:	10000515 	stw	zero,20(r2)
   28774:	dfc00417 	ldw	ra,16(sp)
   28778:	dcc00317 	ldw	r19,12(sp)
   2877c:	dc800217 	ldw	r18,8(sp)
   28780:	dc400117 	ldw	r17,4(sp)
   28784:	dc000017 	ldw	r16,0(sp)
   28788:	dec00504 	addi	sp,sp,20
   2878c:	f800283a 	ret

00028790 <__ulp>:
   28790:	295ffc2c 	andhi	r5,r5,32752
   28794:	00bf3034 	movhi	r2,64704
   28798:	2887883a 	add	r3,r5,r2
   2879c:	00c0020e 	bge	zero,r3,287a8 <__ulp+0x18>
   287a0:	0005883a 	mov	r2,zero
   287a4:	f800283a 	ret
   287a8:	00c7c83a 	sub	r3,zero,r3
   287ac:	1805d53a 	srai	r2,r3,20
   287b0:	00c004c4 	movi	r3,19
   287b4:	18800a0e 	bge	r3,r2,287e0 <__ulp+0x50>
   287b8:	01000c84 	movi	r4,50
   287bc:	0007883a 	mov	r3,zero
   287c0:	20800516 	blt	r4,r2,287d8 <__ulp+0x48>
   287c4:	01000cc4 	movi	r4,51
   287c8:	2085c83a 	sub	r2,r4,r2
   287cc:	01000044 	movi	r4,1
   287d0:	2084983a 	sll	r2,r4,r2
   287d4:	f800283a 	ret
   287d8:	00800044 	movi	r2,1
   287dc:	f800283a 	ret
   287e0:	00c00234 	movhi	r3,8
   287e4:	1887d83a 	sra	r3,r3,r2
   287e8:	0005883a 	mov	r2,zero
   287ec:	f800283a 	ret

000287f0 <__b2d>:
   287f0:	defffa04 	addi	sp,sp,-24
   287f4:	dc000015 	stw	r16,0(sp)
   287f8:	24000417 	ldw	r16,16(r4)
   287fc:	dc400115 	stw	r17,4(sp)
   28800:	dcc00315 	stw	r19,12(sp)
   28804:	84000144 	addi	r16,r16,5
   28808:	8421883a 	add	r16,r16,r16
   2880c:	8421883a 	add	r16,r16,r16
   28810:	2421883a 	add	r16,r4,r16
   28814:	847fff17 	ldw	r17,-4(r16)
   28818:	24c00504 	addi	r19,r4,20
   2881c:	dd000415 	stw	r20,16(sp)
   28820:	8809883a 	mov	r4,r17
   28824:	dc800215 	stw	r18,8(sp)
   28828:	2829883a 	mov	r20,r5
   2882c:	dfc00515 	stw	ra,20(sp)
   28830:	0027f5c0 	call	27f5c <__hi0bits>
   28834:	00c00804 	movi	r3,32
   28838:	1887c83a 	sub	r3,r3,r2
   2883c:	a0c00015 	stw	r3,0(r20)
   28840:	00c00284 	movi	r3,10
   28844:	84bfff04 	addi	r18,r16,-4
   28848:	18801216 	blt	r3,r2,28894 <__b2d+0xa4>
   2884c:	010002c4 	movi	r4,11
   28850:	2089c83a 	sub	r4,r4,r2
   28854:	8906d83a 	srl	r3,r17,r4
   28858:	18cffc34 	orhi	r3,r3,16368
   2885c:	9c80322e 	bgeu	r19,r18,28928 <__b2d+0x138>
   28860:	817ffe17 	ldw	r5,-8(r16)
   28864:	2908d83a 	srl	r4,r5,r4
   28868:	10800544 	addi	r2,r2,21
   2886c:	88a2983a 	sll	r17,r17,r2
   28870:	2444b03a 	or	r2,r4,r17
   28874:	dfc00517 	ldw	ra,20(sp)
   28878:	dd000417 	ldw	r20,16(sp)
   2887c:	dcc00317 	ldw	r19,12(sp)
   28880:	dc800217 	ldw	r18,8(sp)
   28884:	dc400117 	ldw	r17,4(sp)
   28888:	dc000017 	ldw	r16,0(sp)
   2888c:	dec00604 	addi	sp,sp,24
   28890:	f800283a 	ret
   28894:	9c801636 	bltu	r19,r18,288f0 <__b2d+0x100>
   28898:	113ffd44 	addi	r4,r2,-11
   2889c:	000b883a 	mov	r5,zero
   288a0:	20001726 	beq	r4,zero,28900 <__b2d+0x110>
   288a4:	00c00ac4 	movi	r3,43
   288a8:	1885c83a 	sub	r2,r3,r2
   288ac:	8906983a 	sll	r3,r17,r4
   288b0:	288cd83a 	srl	r6,r5,r2
   288b4:	18cffc34 	orhi	r3,r3,16368
   288b8:	1986b03a 	or	r3,r3,r6
   288bc:	9c801c2e 	bgeu	r19,r18,28930 <__b2d+0x140>
   288c0:	91bfff17 	ldw	r6,-4(r18)
   288c4:	3084d83a 	srl	r2,r6,r2
   288c8:	2908983a 	sll	r4,r5,r4
   288cc:	1104b03a 	or	r2,r2,r4
   288d0:	dfc00517 	ldw	ra,20(sp)
   288d4:	dd000417 	ldw	r20,16(sp)
   288d8:	dcc00317 	ldw	r19,12(sp)
   288dc:	dc800217 	ldw	r18,8(sp)
   288e0:	dc400117 	ldw	r17,4(sp)
   288e4:	dc000017 	ldw	r16,0(sp)
   288e8:	dec00604 	addi	sp,sp,24
   288ec:	f800283a 	ret
   288f0:	113ffd44 	addi	r4,r2,-11
   288f4:	84bffe04 	addi	r18,r16,-8
   288f8:	817ffe17 	ldw	r5,-8(r16)
   288fc:	203fe91e 	bne	r4,zero,288a4 <__b2d+0xb4>
   28900:	88cffc34 	orhi	r3,r17,16368
   28904:	2805883a 	mov	r2,r5
   28908:	dfc00517 	ldw	ra,20(sp)
   2890c:	dd000417 	ldw	r20,16(sp)
   28910:	dcc00317 	ldw	r19,12(sp)
   28914:	dc800217 	ldw	r18,8(sp)
   28918:	dc400117 	ldw	r17,4(sp)
   2891c:	dc000017 	ldw	r16,0(sp)
   28920:	dec00604 	addi	sp,sp,24
   28924:	f800283a 	ret
   28928:	0009883a 	mov	r4,zero
   2892c:	003fce06 	br	28868 <__b2d+0x78>
   28930:	0005883a 	mov	r2,zero
   28934:	003fe406 	br	288c8 <__b2d+0xd8>

00028938 <__d2b>:
   28938:	defff804 	addi	sp,sp,-32
   2893c:	dc400315 	stw	r17,12(sp)
   28940:	3023883a 	mov	r17,r6
   28944:	dc800415 	stw	r18,16(sp)
   28948:	8824907a 	slli	r18,r17,1
   2894c:	dcc00515 	stw	r19,20(sp)
   28950:	2827883a 	mov	r19,r5
   28954:	9024d57a 	srli	r18,r18,21
   28958:	01400044 	movi	r5,1
   2895c:	dd000615 	stw	r20,24(sp)
   28960:	dc000215 	stw	r16,8(sp)
   28964:	dfc00715 	stw	ra,28(sp)
   28968:	3829883a 	mov	r20,r7
   2896c:	0027c440 	call	27c44 <_Balloc>
   28970:	1021883a 	mov	r16,r2
   28974:	00800434 	movhi	r2,16
   28978:	10bfffc4 	addi	r2,r2,-1
   2897c:	88a2703a 	and	r17,r17,r2
   28980:	90000126 	beq	r18,zero,28988 <__d2b+0x50>
   28984:	8c400434 	orhi	r17,r17,16
   28988:	dc400015 	stw	r17,0(sp)
   2898c:	98002226 	beq	r19,zero,28a18 <__d2b+0xe0>
   28990:	d9000104 	addi	r4,sp,4
   28994:	dcc00115 	stw	r19,4(sp)
   28998:	0027fc40 	call	27fc4 <__lo0bits>
   2899c:	d8c00017 	ldw	r3,0(sp)
   289a0:	10002d1e 	bne	r2,zero,28a58 <__d2b+0x120>
   289a4:	d9000117 	ldw	r4,4(sp)
   289a8:	81000515 	stw	r4,20(r16)
   289ac:	1823003a 	cmpeq	r17,r3,zero
   289b0:	01000084 	movi	r4,2
   289b4:	2463c83a 	sub	r17,r4,r17
   289b8:	80c00615 	stw	r3,24(r16)
   289bc:	84400415 	stw	r17,16(r16)
   289c0:	90001d1e 	bne	r18,zero,28a38 <__d2b+0x100>
   289c4:	88c00104 	addi	r3,r17,4
   289c8:	18c7883a 	add	r3,r3,r3
   289cc:	18c7883a 	add	r3,r3,r3
   289d0:	80c7883a 	add	r3,r16,r3
   289d4:	19000017 	ldw	r4,0(r3)
   289d8:	10bef384 	addi	r2,r2,-1074
   289dc:	a0800015 	stw	r2,0(r20)
   289e0:	0027f5c0 	call	27f5c <__hi0bits>
   289e4:	8822917a 	slli	r17,r17,5
   289e8:	d8c00817 	ldw	r3,32(sp)
   289ec:	8885c83a 	sub	r2,r17,r2
   289f0:	18800015 	stw	r2,0(r3)
   289f4:	8005883a 	mov	r2,r16
   289f8:	dfc00717 	ldw	ra,28(sp)
   289fc:	dd000617 	ldw	r20,24(sp)
   28a00:	dcc00517 	ldw	r19,20(sp)
   28a04:	dc800417 	ldw	r18,16(sp)
   28a08:	dc400317 	ldw	r17,12(sp)
   28a0c:	dc000217 	ldw	r16,8(sp)
   28a10:	dec00804 	addi	sp,sp,32
   28a14:	f800283a 	ret
   28a18:	d809883a 	mov	r4,sp
   28a1c:	0027fc40 	call	27fc4 <__lo0bits>
   28a20:	d8c00017 	ldw	r3,0(sp)
   28a24:	04400044 	movi	r17,1
   28a28:	84400415 	stw	r17,16(r16)
   28a2c:	80c00515 	stw	r3,20(r16)
   28a30:	10800804 	addi	r2,r2,32
   28a34:	903fe326 	beq	r18,zero,289c4 <__d2b+0x8c>
   28a38:	00c00d44 	movi	r3,53
   28a3c:	94bef344 	addi	r18,r18,-1075
   28a40:	90a5883a 	add	r18,r18,r2
   28a44:	1885c83a 	sub	r2,r3,r2
   28a48:	d8c00817 	ldw	r3,32(sp)
   28a4c:	a4800015 	stw	r18,0(r20)
   28a50:	18800015 	stw	r2,0(r3)
   28a54:	003fe706 	br	289f4 <__d2b+0xbc>
   28a58:	01000804 	movi	r4,32
   28a5c:	2089c83a 	sub	r4,r4,r2
   28a60:	1908983a 	sll	r4,r3,r4
   28a64:	d9400117 	ldw	r5,4(sp)
   28a68:	1886d83a 	srl	r3,r3,r2
   28a6c:	2148b03a 	or	r4,r4,r5
   28a70:	81000515 	stw	r4,20(r16)
   28a74:	d8c00015 	stw	r3,0(sp)
   28a78:	003fcc06 	br	289ac <__d2b+0x74>

00028a7c <__ratio>:
   28a7c:	defff904 	addi	sp,sp,-28
   28a80:	dc400315 	stw	r17,12(sp)
   28a84:	2823883a 	mov	r17,r5
   28a88:	d9400104 	addi	r5,sp,4
   28a8c:	dfc00615 	stw	ra,24(sp)
   28a90:	dcc00515 	stw	r19,20(sp)
   28a94:	dc800415 	stw	r18,16(sp)
   28a98:	2027883a 	mov	r19,r4
   28a9c:	dc000215 	stw	r16,8(sp)
   28aa0:	00287f00 	call	287f0 <__b2d>
   28aa4:	8809883a 	mov	r4,r17
   28aa8:	d80b883a 	mov	r5,sp
   28aac:	1025883a 	mov	r18,r2
   28ab0:	1821883a 	mov	r16,r3
   28ab4:	00287f00 	call	287f0 <__b2d>
   28ab8:	99400417 	ldw	r5,16(r19)
   28abc:	89000417 	ldw	r4,16(r17)
   28ac0:	d9800117 	ldw	r6,4(sp)
   28ac4:	2909c83a 	sub	r4,r5,r4
   28ac8:	d9400017 	ldw	r5,0(sp)
   28acc:	2008917a 	slli	r4,r4,5
   28ad0:	314bc83a 	sub	r5,r6,r5
   28ad4:	290b883a 	add	r5,r5,r4
   28ad8:	01400e0e 	bge	zero,r5,28b14 <__ratio+0x98>
   28adc:	280a953a 	slli	r5,r5,20
   28ae0:	2c21883a 	add	r16,r5,r16
   28ae4:	9009883a 	mov	r4,r18
   28ae8:	800b883a 	mov	r5,r16
   28aec:	100d883a 	mov	r6,r2
   28af0:	180f883a 	mov	r7,r3
   28af4:	002a8340 	call	2a834 <__divdf3>
   28af8:	dfc00617 	ldw	ra,24(sp)
   28afc:	dcc00517 	ldw	r19,20(sp)
   28b00:	dc800417 	ldw	r18,16(sp)
   28b04:	dc400317 	ldw	r17,12(sp)
   28b08:	dc000217 	ldw	r16,8(sp)
   28b0c:	dec00704 	addi	sp,sp,28
   28b10:	f800283a 	ret
   28b14:	280a953a 	slli	r5,r5,20
   28b18:	1947c83a 	sub	r3,r3,r5
   28b1c:	003ff106 	br	28ae4 <__ratio+0x68>

00028b20 <_mprec_log10>:
   28b20:	defffe04 	addi	sp,sp,-8
   28b24:	dc000015 	stw	r16,0(sp)
   28b28:	dfc00115 	stw	ra,4(sp)
   28b2c:	008005c4 	movi	r2,23
   28b30:	2021883a 	mov	r16,r4
   28b34:	11000d0e 	bge	r2,r4,28b6c <_mprec_log10+0x4c>
   28b38:	0005883a 	mov	r2,zero
   28b3c:	00cffc34 	movhi	r3,16368
   28b40:	843fffc4 	addi	r16,r16,-1
   28b44:	1009883a 	mov	r4,r2
   28b48:	180b883a 	mov	r5,r3
   28b4c:	000d883a 	mov	r6,zero
   28b50:	01d00934 	movhi	r7,16420
   28b54:	002a5500 	call	2a550 <__muldf3>
   28b58:	803ff91e 	bne	r16,zero,28b40 <_mprec_log10+0x20>
   28b5c:	dfc00117 	ldw	ra,4(sp)
   28b60:	dc000017 	ldw	r16,0(sp)
   28b64:	dec00204 	addi	sp,sp,8
   28b68:	f800283a 	ret
   28b6c:	202090fa 	slli	r16,r4,3
   28b70:	008000f4 	movhi	r2,3
   28b74:	10bb6204 	addi	r2,r2,-4728
   28b78:	1421883a 	add	r16,r2,r16
   28b7c:	80800017 	ldw	r2,0(r16)
   28b80:	80c00117 	ldw	r3,4(r16)
   28b84:	dfc00117 	ldw	ra,4(sp)
   28b88:	dc000017 	ldw	r16,0(sp)
   28b8c:	dec00204 	addi	sp,sp,8
   28b90:	f800283a 	ret

00028b94 <__copybits>:
   28b94:	297fffc4 	addi	r5,r5,-1
   28b98:	31c00417 	ldw	r7,16(r6)
   28b9c:	2811d17a 	srai	r8,r5,5
   28ba0:	30800504 	addi	r2,r6,20
   28ba4:	39c00144 	addi	r7,r7,5
   28ba8:	42000044 	addi	r8,r8,1
   28bac:	39cf883a 	add	r7,r7,r7
   28bb0:	4211883a 	add	r8,r8,r8
   28bb4:	39cf883a 	add	r7,r7,r7
   28bb8:	4211883a 	add	r8,r8,r8
   28bbc:	31cf883a 	add	r7,r6,r7
   28bc0:	2211883a 	add	r8,r4,r8
   28bc4:	11c00d2e 	bgeu	r2,r7,28bfc <__copybits+0x68>
   28bc8:	2007883a 	mov	r3,r4
   28bcc:	11400017 	ldw	r5,0(r2)
   28bd0:	18c00104 	addi	r3,r3,4
   28bd4:	10800104 	addi	r2,r2,4
   28bd8:	197fff15 	stw	r5,-4(r3)
   28bdc:	11fffb36 	bltu	r2,r7,28bcc <__copybits+0x38>
   28be0:	3985c83a 	sub	r2,r7,r6
   28be4:	10bffac4 	addi	r2,r2,-21
   28be8:	1004d0ba 	srli	r2,r2,2
   28bec:	10800044 	addi	r2,r2,1
   28bf0:	1085883a 	add	r2,r2,r2
   28bf4:	1085883a 	add	r2,r2,r2
   28bf8:	2089883a 	add	r4,r4,r2
   28bfc:	2200032e 	bgeu	r4,r8,28c0c <__copybits+0x78>
   28c00:	20000015 	stw	zero,0(r4)
   28c04:	21000104 	addi	r4,r4,4
   28c08:	223ffd36 	bltu	r4,r8,28c00 <__copybits+0x6c>
   28c0c:	f800283a 	ret

00028c10 <__any_on>:
   28c10:	21800417 	ldw	r6,16(r4)
   28c14:	2805d17a 	srai	r2,r5,5
   28c18:	20c00504 	addi	r3,r4,20
   28c1c:	30800f0e 	bge	r6,r2,28c5c <__any_on+0x4c>
   28c20:	3005883a 	mov	r2,r6
   28c24:	10800144 	addi	r2,r2,5
   28c28:	1085883a 	add	r2,r2,r2
   28c2c:	1085883a 	add	r2,r2,r2
   28c30:	2089883a 	add	r4,r4,r2
   28c34:	1900152e 	bgeu	r3,r4,28c8c <__any_on+0x7c>
   28c38:	20bfff17 	ldw	r2,-4(r4)
   28c3c:	213fff04 	addi	r4,r4,-4
   28c40:	1000041e 	bne	r2,zero,28c54 <__any_on+0x44>
   28c44:	1900112e 	bgeu	r3,r4,28c8c <__any_on+0x7c>
   28c48:	213fff04 	addi	r4,r4,-4
   28c4c:	20800017 	ldw	r2,0(r4)
   28c50:	103ffc26 	beq	r2,zero,28c44 <__any_on+0x34>
   28c54:	00800044 	movi	r2,1
   28c58:	f800283a 	ret
   28c5c:	11bff10e 	bge	r2,r6,28c24 <__any_on+0x14>
   28c60:	294007cc 	andi	r5,r5,31
   28c64:	283fef26 	beq	r5,zero,28c24 <__any_on+0x14>
   28c68:	11800144 	addi	r6,r2,5
   28c6c:	318d883a 	add	r6,r6,r6
   28c70:	318d883a 	add	r6,r6,r6
   28c74:	218d883a 	add	r6,r4,r6
   28c78:	31800017 	ldw	r6,0(r6)
   28c7c:	314ed83a 	srl	r7,r6,r5
   28c80:	394a983a 	sll	r5,r7,r5
   28c84:	29bff31e 	bne	r5,r6,28c54 <__any_on+0x44>
   28c88:	003fe606 	br	28c24 <__any_on+0x14>
   28c8c:	0005883a 	mov	r2,zero
   28c90:	f800283a 	ret

00028c94 <_read_r>:
   28c94:	defffd04 	addi	sp,sp,-12
   28c98:	dc400115 	stw	r17,4(sp)
   28c9c:	dc000015 	stw	r16,0(sp)
   28ca0:	2023883a 	mov	r17,r4
   28ca4:	040000f4 	movhi	r16,3
   28ca8:	84013604 	addi	r16,r16,1240
   28cac:	2809883a 	mov	r4,r5
   28cb0:	300b883a 	mov	r5,r6
   28cb4:	380d883a 	mov	r6,r7
   28cb8:	dfc00215 	stw	ra,8(sp)
   28cbc:	80000015 	stw	zero,0(r16)
   28cc0:	002bed00 	call	2bed0 <read>
   28cc4:	00ffffc4 	movi	r3,-1
   28cc8:	10c00526 	beq	r2,r3,28ce0 <_read_r+0x4c>
   28ccc:	dfc00217 	ldw	ra,8(sp)
   28cd0:	dc400117 	ldw	r17,4(sp)
   28cd4:	dc000017 	ldw	r16,0(sp)
   28cd8:	dec00304 	addi	sp,sp,12
   28cdc:	f800283a 	ret
   28ce0:	80c00017 	ldw	r3,0(r16)
   28ce4:	183ff926 	beq	r3,zero,28ccc <_read_r+0x38>
   28ce8:	88c00015 	stw	r3,0(r17)
   28cec:	dfc00217 	ldw	ra,8(sp)
   28cf0:	dc400117 	ldw	r17,4(sp)
   28cf4:	dc000017 	ldw	r16,0(sp)
   28cf8:	dec00304 	addi	sp,sp,12
   28cfc:	f800283a 	ret

00028d00 <_realloc_r>:
   28d00:	defff504 	addi	sp,sp,-44
   28d04:	dd400615 	stw	r21,24(sp)
   28d08:	dc800315 	stw	r18,12(sp)
   28d0c:	dc000115 	stw	r16,4(sp)
   28d10:	dfc00a15 	stw	ra,40(sp)
   28d14:	df000915 	stw	fp,36(sp)
   28d18:	ddc00815 	stw	r23,32(sp)
   28d1c:	dd800715 	stw	r22,28(sp)
   28d20:	dd000515 	stw	r20,20(sp)
   28d24:	dcc00415 	stw	r19,16(sp)
   28d28:	dc400215 	stw	r17,8(sp)
   28d2c:	2821883a 	mov	r16,r5
   28d30:	202b883a 	mov	r21,r4
   28d34:	3025883a 	mov	r18,r6
   28d38:	28009626 	beq	r5,zero,28f94 <_realloc_r+0x294>
   28d3c:	002bba80 	call	2bba8 <__malloc_lock>
   28d40:	80bfff17 	ldw	r2,-4(r16)
   28d44:	04ffff04 	movi	r19,-4
   28d48:	90c002c4 	addi	r3,r18,11
   28d4c:	01000584 	movi	r4,22
   28d50:	85bffe04 	addi	r22,r16,-8
   28d54:	14e6703a 	and	r19,r2,r19
   28d58:	20c0372e 	bgeu	r4,r3,28e38 <_realloc_r+0x138>
   28d5c:	047ffe04 	movi	r17,-8
   28d60:	1c62703a 	and	r17,r3,r17
   28d64:	8807883a 	mov	r3,r17
   28d68:	88005a16 	blt	r17,zero,28ed4 <_realloc_r+0x1d4>
   28d6c:	8c805936 	bltu	r17,r18,28ed4 <_realloc_r+0x1d4>
   28d70:	98c0340e 	bge	r19,r3,28e44 <_realloc_r+0x144>
   28d74:	070000f4 	movhi	fp,3
   28d78:	e73cea04 	addi	fp,fp,-3160
   28d7c:	e1400217 	ldw	r5,8(fp)
   28d80:	b4c9883a 	add	r4,r22,r19
   28d84:	29009026 	beq	r5,r4,28fc8 <_realloc_r+0x2c8>
   28d88:	21800117 	ldw	r6,4(r4)
   28d8c:	01ffff84 	movi	r7,-2
   28d90:	31ce703a 	and	r7,r6,r7
   28d94:	21cf883a 	add	r7,r4,r7
   28d98:	39c00117 	ldw	r7,4(r7)
   28d9c:	39c0004c 	andi	r7,r7,1
   28da0:	38004326 	beq	r7,zero,28eb0 <_realloc_r+0x1b0>
   28da4:	000d883a 	mov	r6,zero
   28da8:	0009883a 	mov	r4,zero
   28dac:	1080004c 	andi	r2,r2,1
   28db0:	10005a1e 	bne	r2,zero,28f1c <_realloc_r+0x21c>
   28db4:	85fffe17 	ldw	r23,-8(r16)
   28db8:	00bfff04 	movi	r2,-4
   28dbc:	b5efc83a 	sub	r23,r22,r23
   28dc0:	b9c00117 	ldw	r7,4(r23)
   28dc4:	388e703a 	and	r7,r7,r2
   28dc8:	3ccf883a 	add	r7,r7,r19
   28dcc:	20005226 	beq	r4,zero,28f18 <_realloc_r+0x218>
   28dd0:	31e9883a 	add	r20,r6,r7
   28dd4:	2140c726 	beq	r4,r5,290f4 <_realloc_r+0x3f4>
   28dd8:	a0c04f16 	blt	r20,r3,28f18 <_realloc_r+0x218>
   28ddc:	20800317 	ldw	r2,12(r4)
   28de0:	20c00217 	ldw	r3,8(r4)
   28de4:	99bfff04 	addi	r6,r19,-4
   28de8:	01000904 	movi	r4,36
   28dec:	18800315 	stw	r2,12(r3)
   28df0:	10c00215 	stw	r3,8(r2)
   28df4:	b8c00217 	ldw	r3,8(r23)
   28df8:	b8800317 	ldw	r2,12(r23)
   28dfc:	bc800204 	addi	r18,r23,8
   28e00:	18800315 	stw	r2,12(r3)
   28e04:	10c00215 	stw	r3,8(r2)
   28e08:	2180ed36 	bltu	r4,r6,291c0 <_realloc_r+0x4c0>
   28e0c:	008004c4 	movi	r2,19
   28e10:	11809b2e 	bgeu	r2,r6,29080 <_realloc_r+0x380>
   28e14:	80800017 	ldw	r2,0(r16)
   28e18:	b8800215 	stw	r2,8(r23)
   28e1c:	80800117 	ldw	r2,4(r16)
   28e20:	b8800315 	stw	r2,12(r23)
   28e24:	008006c4 	movi	r2,27
   28e28:	1180f936 	bltu	r2,r6,29210 <_realloc_r+0x510>
   28e2c:	b8800404 	addi	r2,r23,16
   28e30:	80c00204 	addi	r3,r16,8
   28e34:	00009406 	br	29088 <_realloc_r+0x388>
   28e38:	00c00404 	movi	r3,16
   28e3c:	1823883a 	mov	r17,r3
   28e40:	003fca06 	br	28d6c <_realloc_r+0x6c>
   28e44:	9829883a 	mov	r20,r19
   28e48:	a447c83a 	sub	r3,r20,r17
   28e4c:	010003c4 	movi	r4,15
   28e50:	1080004c 	andi	r2,r2,1
   28e54:	20c02336 	bltu	r4,r3,28ee4 <_realloc_r+0x1e4>
   28e58:	1504b03a 	or	r2,r2,r20
   28e5c:	b0800115 	stw	r2,4(r22)
   28e60:	b52d883a 	add	r22,r22,r20
   28e64:	b0800117 	ldw	r2,4(r22)
   28e68:	10800054 	ori	r2,r2,1
   28e6c:	b0800115 	stw	r2,4(r22)
   28e70:	a809883a 	mov	r4,r21
   28e74:	002bbc80 	call	2bbc8 <__malloc_unlock>
   28e78:	8025883a 	mov	r18,r16
   28e7c:	9005883a 	mov	r2,r18
   28e80:	dfc00a17 	ldw	ra,40(sp)
   28e84:	df000917 	ldw	fp,36(sp)
   28e88:	ddc00817 	ldw	r23,32(sp)
   28e8c:	dd800717 	ldw	r22,28(sp)
   28e90:	dd400617 	ldw	r21,24(sp)
   28e94:	dd000517 	ldw	r20,20(sp)
   28e98:	dcc00417 	ldw	r19,16(sp)
   28e9c:	dc800317 	ldw	r18,12(sp)
   28ea0:	dc400217 	ldw	r17,8(sp)
   28ea4:	dc000117 	ldw	r16,4(sp)
   28ea8:	dec00b04 	addi	sp,sp,44
   28eac:	f800283a 	ret
   28eb0:	01ffff04 	movi	r7,-4
   28eb4:	31cc703a 	and	r6,r6,r7
   28eb8:	34e9883a 	add	r20,r6,r19
   28ebc:	a0ffbb16 	blt	r20,r3,28dac <_realloc_r+0xac>
   28ec0:	20c00317 	ldw	r3,12(r4)
   28ec4:	21000217 	ldw	r4,8(r4)
   28ec8:	20c00315 	stw	r3,12(r4)
   28ecc:	19000215 	stw	r4,8(r3)
   28ed0:	003fdd06 	br	28e48 <_realloc_r+0x148>
   28ed4:	00800304 	movi	r2,12
   28ed8:	a8800015 	stw	r2,0(r21)
   28edc:	0025883a 	mov	r18,zero
   28ee0:	003fe606 	br	28e7c <_realloc_r+0x17c>
   28ee4:	1444b03a 	or	r2,r2,r17
   28ee8:	b0800115 	stw	r2,4(r22)
   28eec:	b44b883a 	add	r5,r22,r17
   28ef0:	18800054 	ori	r2,r3,1
   28ef4:	28800115 	stw	r2,4(r5)
   28ef8:	28c7883a 	add	r3,r5,r3
   28efc:	18800117 	ldw	r2,4(r3)
   28f00:	a809883a 	mov	r4,r21
   28f04:	29400204 	addi	r5,r5,8
   28f08:	10800054 	ori	r2,r2,1
   28f0c:	18800115 	stw	r2,4(r3)
   28f10:	0021cd80 	call	21cd8 <_free_r>
   28f14:	003fd606 	br	28e70 <_realloc_r+0x170>
   28f18:	38c0330e 	bge	r7,r3,28fe8 <_realloc_r+0x2e8>
   28f1c:	900b883a 	mov	r5,r18
   28f20:	a809883a 	mov	r4,r21
   28f24:	00227b00 	call	227b0 <_malloc_r>
   28f28:	1025883a 	mov	r18,r2
   28f2c:	10001626 	beq	r2,zero,28f88 <_realloc_r+0x288>
   28f30:	80bfff17 	ldw	r2,-4(r16)
   28f34:	00ffff84 	movi	r3,-2
   28f38:	913ffe04 	addi	r4,r18,-8
   28f3c:	10c6703a 	and	r3,r2,r3
   28f40:	b0c7883a 	add	r3,r22,r3
   28f44:	20c09926 	beq	r4,r3,291ac <_realloc_r+0x4ac>
   28f48:	99bfff04 	addi	r6,r19,-4
   28f4c:	00800904 	movi	r2,36
   28f50:	11806436 	bltu	r2,r6,290e4 <_realloc_r+0x3e4>
   28f54:	00c004c4 	movi	r3,19
   28f58:	19804036 	bltu	r3,r6,2905c <_realloc_r+0x35c>
   28f5c:	9005883a 	mov	r2,r18
   28f60:	8007883a 	mov	r3,r16
   28f64:	19000017 	ldw	r4,0(r3)
   28f68:	11000015 	stw	r4,0(r2)
   28f6c:	19000117 	ldw	r4,4(r3)
   28f70:	11000115 	stw	r4,4(r2)
   28f74:	18c00217 	ldw	r3,8(r3)
   28f78:	10c00215 	stw	r3,8(r2)
   28f7c:	a809883a 	mov	r4,r21
   28f80:	800b883a 	mov	r5,r16
   28f84:	0021cd80 	call	21cd8 <_free_r>
   28f88:	a809883a 	mov	r4,r21
   28f8c:	002bbc80 	call	2bbc8 <__malloc_unlock>
   28f90:	003fba06 	br	28e7c <_realloc_r+0x17c>
   28f94:	300b883a 	mov	r5,r6
   28f98:	dfc00a17 	ldw	ra,40(sp)
   28f9c:	df000917 	ldw	fp,36(sp)
   28fa0:	ddc00817 	ldw	r23,32(sp)
   28fa4:	dd800717 	ldw	r22,28(sp)
   28fa8:	dd400617 	ldw	r21,24(sp)
   28fac:	dd000517 	ldw	r20,20(sp)
   28fb0:	dcc00417 	ldw	r19,16(sp)
   28fb4:	dc800317 	ldw	r18,12(sp)
   28fb8:	dc400217 	ldw	r17,8(sp)
   28fbc:	dc000117 	ldw	r16,4(sp)
   28fc0:	dec00b04 	addi	sp,sp,44
   28fc4:	00227b01 	jmpi	227b0 <_malloc_r>
   28fc8:	29800117 	ldw	r6,4(r5)
   28fcc:	013fff04 	movi	r4,-4
   28fd0:	89c00404 	addi	r7,r17,16
   28fd4:	310c703a 	and	r6,r6,r4
   28fd8:	34c9883a 	add	r4,r6,r19
   28fdc:	21c0340e 	bge	r4,r7,290b0 <_realloc_r+0x3b0>
   28fe0:	2809883a 	mov	r4,r5
   28fe4:	003f7106 	br	28dac <_realloc_r+0xac>
   28fe8:	b8800317 	ldw	r2,12(r23)
   28fec:	b8c00217 	ldw	r3,8(r23)
   28ff0:	99bfff04 	addi	r6,r19,-4
   28ff4:	01000904 	movi	r4,36
   28ff8:	18800315 	stw	r2,12(r3)
   28ffc:	10c00215 	stw	r3,8(r2)
   29000:	bc800204 	addi	r18,r23,8
   29004:	21807836 	bltu	r4,r6,291e8 <_realloc_r+0x4e8>
   29008:	008004c4 	movi	r2,19
   2900c:	1180732e 	bgeu	r2,r6,291dc <_realloc_r+0x4dc>
   29010:	80800017 	ldw	r2,0(r16)
   29014:	b8800215 	stw	r2,8(r23)
   29018:	80800117 	ldw	r2,4(r16)
   2901c:	b8800315 	stw	r2,12(r23)
   29020:	008006c4 	movi	r2,27
   29024:	11808936 	bltu	r2,r6,2924c <_realloc_r+0x54c>
   29028:	b8800404 	addi	r2,r23,16
   2902c:	80c00204 	addi	r3,r16,8
   29030:	19000017 	ldw	r4,0(r3)
   29034:	9021883a 	mov	r16,r18
   29038:	3829883a 	mov	r20,r7
   2903c:	11000015 	stw	r4,0(r2)
   29040:	19000117 	ldw	r4,4(r3)
   29044:	b82d883a 	mov	r22,r23
   29048:	11000115 	stw	r4,4(r2)
   2904c:	18c00217 	ldw	r3,8(r3)
   29050:	10c00215 	stw	r3,8(r2)
   29054:	b8800117 	ldw	r2,4(r23)
   29058:	003f7b06 	br	28e48 <_realloc_r+0x148>
   2905c:	80c00017 	ldw	r3,0(r16)
   29060:	90c00015 	stw	r3,0(r18)
   29064:	80c00117 	ldw	r3,4(r16)
   29068:	90c00115 	stw	r3,4(r18)
   2906c:	00c006c4 	movi	r3,27
   29070:	19804636 	bltu	r3,r6,2918c <_realloc_r+0x48c>
   29074:	90800204 	addi	r2,r18,8
   29078:	80c00204 	addi	r3,r16,8
   2907c:	003fb906 	br	28f64 <_realloc_r+0x264>
   29080:	9005883a 	mov	r2,r18
   29084:	8007883a 	mov	r3,r16
   29088:	19000017 	ldw	r4,0(r3)
   2908c:	9021883a 	mov	r16,r18
   29090:	b82d883a 	mov	r22,r23
   29094:	11000015 	stw	r4,0(r2)
   29098:	19000117 	ldw	r4,4(r3)
   2909c:	11000115 	stw	r4,4(r2)
   290a0:	18c00217 	ldw	r3,8(r3)
   290a4:	10c00215 	stw	r3,8(r2)
   290a8:	b8800117 	ldw	r2,4(r23)
   290ac:	003f6606 	br	28e48 <_realloc_r+0x148>
   290b0:	2445c83a 	sub	r2,r4,r17
   290b4:	b46d883a 	add	r22,r22,r17
   290b8:	10800054 	ori	r2,r2,1
   290bc:	b0800115 	stw	r2,4(r22)
   290c0:	80bfff17 	ldw	r2,-4(r16)
   290c4:	a809883a 	mov	r4,r21
   290c8:	e5800215 	stw	r22,8(fp)
   290cc:	1080004c 	andi	r2,r2,1
   290d0:	88a2b03a 	or	r17,r17,r2
   290d4:	847fff15 	stw	r17,-4(r16)
   290d8:	002bbc80 	call	2bbc8 <__malloc_unlock>
   290dc:	8025883a 	mov	r18,r16
   290e0:	003f6606 	br	28e7c <_realloc_r+0x17c>
   290e4:	9009883a 	mov	r4,r18
   290e8:	800b883a 	mov	r5,r16
   290ec:	0027ab80 	call	27ab8 <memmove>
   290f0:	003fa206 	br	28f7c <_realloc_r+0x27c>
   290f4:	88800404 	addi	r2,r17,16
   290f8:	a0bf8716 	blt	r20,r2,28f18 <_realloc_r+0x218>
   290fc:	b8800317 	ldw	r2,12(r23)
   29100:	b8c00217 	ldw	r3,8(r23)
   29104:	99bfff04 	addi	r6,r19,-4
   29108:	01000904 	movi	r4,36
   2910c:	18800315 	stw	r2,12(r3)
   29110:	10c00215 	stw	r3,8(r2)
   29114:	bc800204 	addi	r18,r23,8
   29118:	21806536 	bltu	r4,r6,292b0 <_realloc_r+0x5b0>
   2911c:	008004c4 	movi	r2,19
   29120:	1180592e 	bgeu	r2,r6,29288 <_realloc_r+0x588>
   29124:	80800017 	ldw	r2,0(r16)
   29128:	b8800215 	stw	r2,8(r23)
   2912c:	80800117 	ldw	r2,4(r16)
   29130:	b8800315 	stw	r2,12(r23)
   29134:	008006c4 	movi	r2,27
   29138:	11806136 	bltu	r2,r6,292c0 <_realloc_r+0x5c0>
   2913c:	b8800404 	addi	r2,r23,16
   29140:	80c00204 	addi	r3,r16,8
   29144:	19000017 	ldw	r4,0(r3)
   29148:	11000015 	stw	r4,0(r2)
   2914c:	19000117 	ldw	r4,4(r3)
   29150:	11000115 	stw	r4,4(r2)
   29154:	18c00217 	ldw	r3,8(r3)
   29158:	10c00215 	stw	r3,8(r2)
   2915c:	a447c83a 	sub	r3,r20,r17
   29160:	bc45883a 	add	r2,r23,r17
   29164:	18c00054 	ori	r3,r3,1
   29168:	10c00115 	stw	r3,4(r2)
   2916c:	b8c00117 	ldw	r3,4(r23)
   29170:	e0800215 	stw	r2,8(fp)
   29174:	a809883a 	mov	r4,r21
   29178:	1880004c 	andi	r2,r3,1
   2917c:	88a2b03a 	or	r17,r17,r2
   29180:	bc400115 	stw	r17,4(r23)
   29184:	002bbc80 	call	2bbc8 <__malloc_unlock>
   29188:	003f3c06 	br	28e7c <_realloc_r+0x17c>
   2918c:	80c00217 	ldw	r3,8(r16)
   29190:	90c00215 	stw	r3,8(r18)
   29194:	80c00317 	ldw	r3,12(r16)
   29198:	90c00315 	stw	r3,12(r18)
   2919c:	30802426 	beq	r6,r2,29230 <_realloc_r+0x530>
   291a0:	90800404 	addi	r2,r18,16
   291a4:	80c00404 	addi	r3,r16,16
   291a8:	003f6e06 	br	28f64 <_realloc_r+0x264>
   291ac:	953fff17 	ldw	r20,-4(r18)
   291b0:	00ffff04 	movi	r3,-4
   291b4:	a0e8703a 	and	r20,r20,r3
   291b8:	a4e9883a 	add	r20,r20,r19
   291bc:	003f2206 	br	28e48 <_realloc_r+0x148>
   291c0:	800b883a 	mov	r5,r16
   291c4:	9009883a 	mov	r4,r18
   291c8:	0027ab80 	call	27ab8 <memmove>
   291cc:	9021883a 	mov	r16,r18
   291d0:	b8800117 	ldw	r2,4(r23)
   291d4:	b82d883a 	mov	r22,r23
   291d8:	003f1b06 	br	28e48 <_realloc_r+0x148>
   291dc:	9005883a 	mov	r2,r18
   291e0:	8007883a 	mov	r3,r16
   291e4:	003f9206 	br	29030 <_realloc_r+0x330>
   291e8:	800b883a 	mov	r5,r16
   291ec:	9009883a 	mov	r4,r18
   291f0:	d9c00015 	stw	r7,0(sp)
   291f4:	0027ab80 	call	27ab8 <memmove>
   291f8:	d9c00017 	ldw	r7,0(sp)
   291fc:	9021883a 	mov	r16,r18
   29200:	b8800117 	ldw	r2,4(r23)
   29204:	3829883a 	mov	r20,r7
   29208:	b82d883a 	mov	r22,r23
   2920c:	003f0e06 	br	28e48 <_realloc_r+0x148>
   29210:	80800217 	ldw	r2,8(r16)
   29214:	b8800415 	stw	r2,16(r23)
   29218:	80800317 	ldw	r2,12(r16)
   2921c:	b8800515 	stw	r2,20(r23)
   29220:	31001226 	beq	r6,r4,2926c <_realloc_r+0x56c>
   29224:	b8800604 	addi	r2,r23,24
   29228:	80c00404 	addi	r3,r16,16
   2922c:	003f9606 	br	29088 <_realloc_r+0x388>
   29230:	81000417 	ldw	r4,16(r16)
   29234:	90800604 	addi	r2,r18,24
   29238:	80c00604 	addi	r3,r16,24
   2923c:	91000415 	stw	r4,16(r18)
   29240:	81000517 	ldw	r4,20(r16)
   29244:	91000515 	stw	r4,20(r18)
   29248:	003f4606 	br	28f64 <_realloc_r+0x264>
   2924c:	80800217 	ldw	r2,8(r16)
   29250:	b8800415 	stw	r2,16(r23)
   29254:	80800317 	ldw	r2,12(r16)
   29258:	b8800515 	stw	r2,20(r23)
   2925c:	31000d26 	beq	r6,r4,29294 <_realloc_r+0x594>
   29260:	b8800604 	addi	r2,r23,24
   29264:	80c00404 	addi	r3,r16,16
   29268:	003f7106 	br	29030 <_realloc_r+0x330>
   2926c:	81000417 	ldw	r4,16(r16)
   29270:	b8800804 	addi	r2,r23,32
   29274:	80c00604 	addi	r3,r16,24
   29278:	b9000615 	stw	r4,24(r23)
   2927c:	81000517 	ldw	r4,20(r16)
   29280:	b9000715 	stw	r4,28(r23)
   29284:	003f8006 	br	29088 <_realloc_r+0x388>
   29288:	9005883a 	mov	r2,r18
   2928c:	8007883a 	mov	r3,r16
   29290:	003fac06 	br	29144 <_realloc_r+0x444>
   29294:	81000417 	ldw	r4,16(r16)
   29298:	b8800804 	addi	r2,r23,32
   2929c:	80c00604 	addi	r3,r16,24
   292a0:	b9000615 	stw	r4,24(r23)
   292a4:	81000517 	ldw	r4,20(r16)
   292a8:	b9000715 	stw	r4,28(r23)
   292ac:	003f6006 	br	29030 <_realloc_r+0x330>
   292b0:	9009883a 	mov	r4,r18
   292b4:	800b883a 	mov	r5,r16
   292b8:	0027ab80 	call	27ab8 <memmove>
   292bc:	003fa706 	br	2915c <_realloc_r+0x45c>
   292c0:	80800217 	ldw	r2,8(r16)
   292c4:	b8800415 	stw	r2,16(r23)
   292c8:	80800317 	ldw	r2,12(r16)
   292cc:	b8800515 	stw	r2,20(r23)
   292d0:	31000326 	beq	r6,r4,292e0 <_realloc_r+0x5e0>
   292d4:	b8800604 	addi	r2,r23,24
   292d8:	80c00404 	addi	r3,r16,16
   292dc:	003f9906 	br	29144 <_realloc_r+0x444>
   292e0:	81000417 	ldw	r4,16(r16)
   292e4:	b8800804 	addi	r2,r23,32
   292e8:	80c00604 	addi	r3,r16,24
   292ec:	b9000615 	stw	r4,24(r23)
   292f0:	81000517 	ldw	r4,20(r16)
   292f4:	b9000715 	stw	r4,28(r23)
   292f8:	003f9206 	br	29144 <_realloc_r+0x444>

000292fc <__isinfd>:
   292fc:	0105c83a 	sub	r2,zero,r4
   29300:	1108b03a 	or	r4,r2,r4
   29304:	2004d7fa 	srli	r2,r4,31
   29308:	00e00034 	movhi	r3,32768
   2930c:	18ffffc4 	addi	r3,r3,-1
   29310:	28ca703a 	and	r5,r5,r3
   29314:	1144b03a 	or	r2,r2,r5
   29318:	00dffc34 	movhi	r3,32752
   2931c:	1885c83a 	sub	r2,r3,r2
   29320:	0087c83a 	sub	r3,zero,r2
   29324:	1884b03a 	or	r2,r3,r2
   29328:	1005d7fa 	srai	r2,r2,31
   2932c:	10800044 	addi	r2,r2,1
   29330:	f800283a 	ret

00029334 <__isnand>:
   29334:	0105c83a 	sub	r2,zero,r4
   29338:	1108b03a 	or	r4,r2,r4
   2933c:	2004d7fa 	srli	r2,r4,31
   29340:	00e00034 	movhi	r3,32768
   29344:	18ffffc4 	addi	r3,r3,-1
   29348:	28ca703a 	and	r5,r5,r3
   2934c:	1144b03a 	or	r2,r2,r5
   29350:	00dffc34 	movhi	r3,32752
   29354:	1885c83a 	sub	r2,r3,r2
   29358:	1004d7fa 	srli	r2,r2,31
   2935c:	f800283a 	ret

00029360 <strcmp>:
   29360:	2904b03a 	or	r2,r5,r4
   29364:	108000cc 	andi	r2,r2,3
   29368:	1000171e 	bne	r2,zero,293c8 <strcmp+0x68>
   2936c:	20800017 	ldw	r2,0(r4)
   29370:	28c00017 	ldw	r3,0(r5)
   29374:	10c0141e 	bne	r2,r3,293c8 <strcmp+0x68>
   29378:	027fbff4 	movhi	r9,65279
   2937c:	4a7fbfc4 	addi	r9,r9,-257
   29380:	1247883a 	add	r3,r2,r9
   29384:	0084303a 	nor	r2,zero,r2
   29388:	1884703a 	and	r2,r3,r2
   2938c:	02202074 	movhi	r8,32897
   29390:	42202004 	addi	r8,r8,-32640
   29394:	1204703a 	and	r2,r2,r8
   29398:	10000226 	beq	r2,zero,293a4 <strcmp+0x44>
   2939c:	00001706 	br	293fc <strcmp+0x9c>
   293a0:	3000161e 	bne	r6,zero,293fc <strcmp+0x9c>
   293a4:	21000104 	addi	r4,r4,4
   293a8:	20800017 	ldw	r2,0(r4)
   293ac:	29400104 	addi	r5,r5,4
   293b0:	28c00017 	ldw	r3,0(r5)
   293b4:	124f883a 	add	r7,r2,r9
   293b8:	008c303a 	nor	r6,zero,r2
   293bc:	398c703a 	and	r6,r7,r6
   293c0:	320c703a 	and	r6,r6,r8
   293c4:	10fff626 	beq	r2,r3,293a0 <strcmp+0x40>
   293c8:	20800007 	ldb	r2,0(r4)
   293cc:	1000051e 	bne	r2,zero,293e4 <strcmp+0x84>
   293d0:	00000606 	br	293ec <strcmp+0x8c>
   293d4:	21000044 	addi	r4,r4,1
   293d8:	20800007 	ldb	r2,0(r4)
   293dc:	29400044 	addi	r5,r5,1
   293e0:	10000226 	beq	r2,zero,293ec <strcmp+0x8c>
   293e4:	28c00007 	ldb	r3,0(r5)
   293e8:	10fffa26 	beq	r2,r3,293d4 <strcmp+0x74>
   293ec:	20c00003 	ldbu	r3,0(r4)
   293f0:	28800003 	ldbu	r2,0(r5)
   293f4:	1885c83a 	sub	r2,r3,r2
   293f8:	f800283a 	ret
   293fc:	0005883a 	mov	r2,zero
   29400:	f800283a 	ret

00029404 <_calloc_r>:
   29404:	defffe04 	addi	sp,sp,-8
   29408:	dc000015 	stw	r16,0(sp)
   2940c:	2021883a 	mov	r16,r4
   29410:	3009883a 	mov	r4,r6
   29414:	dfc00115 	stw	ra,4(sp)
   29418:	00212100 	call	21210 <__mulsi3>
   2941c:	8009883a 	mov	r4,r16
   29420:	100b883a 	mov	r5,r2
   29424:	00227b00 	call	227b0 <_malloc_r>
   29428:	1021883a 	mov	r16,r2
   2942c:	10000c26 	beq	r2,zero,29460 <_calloc_r+0x5c>
   29430:	11bfff17 	ldw	r6,-4(r2)
   29434:	00ffff04 	movi	r3,-4
   29438:	00800904 	movi	r2,36
   2943c:	30cc703a 	and	r6,r6,r3
   29440:	30cd883a 	add	r6,r6,r3
   29444:	11801436 	bltu	r2,r6,29498 <_calloc_r+0x94>
   29448:	00c004c4 	movi	r3,19
   2944c:	19800936 	bltu	r3,r6,29474 <_calloc_r+0x70>
   29450:	8005883a 	mov	r2,r16
   29454:	10000015 	stw	zero,0(r2)
   29458:	10000115 	stw	zero,4(r2)
   2945c:	10000215 	stw	zero,8(r2)
   29460:	8005883a 	mov	r2,r16
   29464:	dfc00117 	ldw	ra,4(sp)
   29468:	dc000017 	ldw	r16,0(sp)
   2946c:	dec00204 	addi	sp,sp,8
   29470:	f800283a 	ret
   29474:	80000015 	stw	zero,0(r16)
   29478:	80000115 	stw	zero,4(r16)
   2947c:	00c006c4 	movi	r3,27
   29480:	19800d2e 	bgeu	r3,r6,294b8 <_calloc_r+0xb4>
   29484:	80000215 	stw	zero,8(r16)
   29488:	80000315 	stw	zero,12(r16)
   2948c:	30800c26 	beq	r6,r2,294c0 <_calloc_r+0xbc>
   29490:	80800404 	addi	r2,r16,16
   29494:	003fef06 	br	29454 <_calloc_r+0x50>
   29498:	8009883a 	mov	r4,r16
   2949c:	000b883a 	mov	r5,zero
   294a0:	002316c0 	call	2316c <memset>
   294a4:	8005883a 	mov	r2,r16
   294a8:	dfc00117 	ldw	ra,4(sp)
   294ac:	dc000017 	ldw	r16,0(sp)
   294b0:	dec00204 	addi	sp,sp,8
   294b4:	f800283a 	ret
   294b8:	80800204 	addi	r2,r16,8
   294bc:	003fe506 	br	29454 <_calloc_r+0x50>
   294c0:	80000415 	stw	zero,16(r16)
   294c4:	80000515 	stw	zero,20(r16)
   294c8:	80800604 	addi	r2,r16,24
   294cc:	003fe106 	br	29454 <_calloc_r+0x50>

000294d0 <__udivdi3>:
   294d0:	defff504 	addi	sp,sp,-44
   294d4:	dd000515 	stw	r20,20(sp)
   294d8:	dcc00415 	stw	r19,16(sp)
   294dc:	dc800315 	stw	r18,12(sp)
   294e0:	dc400215 	stw	r17,8(sp)
   294e4:	dc000115 	stw	r16,4(sp)
   294e8:	dfc00a15 	stw	ra,40(sp)
   294ec:	df000915 	stw	fp,36(sp)
   294f0:	ddc00815 	stw	r23,32(sp)
   294f4:	dd800715 	stw	r22,28(sp)
   294f8:	dd400615 	stw	r21,24(sp)
   294fc:	2025883a 	mov	r18,r4
   29500:	2823883a 	mov	r17,r5
   29504:	3021883a 	mov	r16,r6
   29508:	2027883a 	mov	r19,r4
   2950c:	2829883a 	mov	r20,r5
   29510:	3800451e 	bne	r7,zero,29628 <__udivdi3+0x158>
   29514:	2980652e 	bgeu	r5,r6,296ac <__udivdi3+0x1dc>
   29518:	00bfffd4 	movui	r2,65535
   2951c:	1180b436 	bltu	r2,r6,297f0 <__udivdi3+0x320>
   29520:	00803fc4 	movi	r2,255
   29524:	11816636 	bltu	r2,r6,29ac0 <__udivdi3+0x5f0>
   29528:	0005883a 	mov	r2,zero
   2952c:	0007883a 	mov	r3,zero
   29530:	3084d83a 	srl	r2,r6,r2
   29534:	010000f4 	movhi	r4,3
   29538:	213b9c04 	addi	r4,r4,-4496
   2953c:	2085883a 	add	r2,r4,r2
   29540:	10800003 	ldbu	r2,0(r2)
   29544:	10c7883a 	add	r3,r2,r3
   29548:	00800804 	movi	r2,32
   2954c:	10c5c83a 	sub	r2,r2,r3
   29550:	10000526 	beq	r2,zero,29568 <__udivdi3+0x98>
   29554:	88a2983a 	sll	r17,r17,r2
   29558:	90c6d83a 	srl	r3,r18,r3
   2955c:	30a0983a 	sll	r16,r6,r2
   29560:	90a6983a 	sll	r19,r18,r2
   29564:	88e8b03a 	or	r20,r17,r3
   29568:	8022d43a 	srli	r17,r16,16
   2956c:	a009883a 	mov	r4,r20
   29570:	857fffcc 	andi	r21,r16,65535
   29574:	880b883a 	mov	r5,r17
   29578:	002afb00 	call	2afb0 <__umodsi3>
   2957c:	a009883a 	mov	r4,r20
   29580:	880b883a 	mov	r5,r17
   29584:	102d883a 	mov	r22,r2
   29588:	002afa80 	call	2afa8 <__udivsi3>
   2958c:	1009883a 	mov	r4,r2
   29590:	a80b883a 	mov	r5,r21
   29594:	1025883a 	mov	r18,r2
   29598:	00212100 	call	21210 <__mulsi3>
   2959c:	1009883a 	mov	r4,r2
   295a0:	b006943a 	slli	r3,r22,16
   295a4:	9804d43a 	srli	r2,r19,16
   295a8:	1886b03a 	or	r3,r3,r2
   295ac:	1900052e 	bgeu	r3,r4,295c4 <__udivdi3+0xf4>
   295b0:	1c07883a 	add	r3,r3,r16
   295b4:	90bfffc4 	addi	r2,r18,-1
   295b8:	1c000136 	bltu	r3,r16,295c0 <__udivdi3+0xf0>
   295bc:	19015536 	bltu	r3,r4,29b14 <__udivdi3+0x644>
   295c0:	1025883a 	mov	r18,r2
   295c4:	1929c83a 	sub	r20,r3,r4
   295c8:	880b883a 	mov	r5,r17
   295cc:	a009883a 	mov	r4,r20
   295d0:	002afb00 	call	2afb0 <__umodsi3>
   295d4:	102d883a 	mov	r22,r2
   295d8:	880b883a 	mov	r5,r17
   295dc:	a009883a 	mov	r4,r20
   295e0:	b02c943a 	slli	r22,r22,16
   295e4:	002afa80 	call	2afa8 <__udivsi3>
   295e8:	1009883a 	mov	r4,r2
   295ec:	a80b883a 	mov	r5,r21
   295f0:	9cffffcc 	andi	r19,r19,65535
   295f4:	1023883a 	mov	r17,r2
   295f8:	b4e6b03a 	or	r19,r22,r19
   295fc:	00212100 	call	21210 <__mulsi3>
   29600:	9880052e 	bgeu	r19,r2,29618 <__udivdi3+0x148>
   29604:	9c27883a 	add	r19,r19,r16
   29608:	88ffffc4 	addi	r3,r17,-1
   2960c:	9c011436 	bltu	r19,r16,29a60 <__udivdi3+0x590>
   29610:	9881132e 	bgeu	r19,r2,29a60 <__udivdi3+0x590>
   29614:	8c7fff84 	addi	r17,r17,-2
   29618:	9004943a 	slli	r2,r18,16
   2961c:	0007883a 	mov	r3,zero
   29620:	8884b03a 	or	r2,r17,r2
   29624:	00001506 	br	2967c <__udivdi3+0x1ac>
   29628:	29c06a36 	bltu	r5,r7,297d4 <__udivdi3+0x304>
   2962c:	00bfffd4 	movui	r2,65535
   29630:	11c06a2e 	bgeu	r2,r7,297dc <__udivdi3+0x30c>
   29634:	00804034 	movhi	r2,256
   29638:	10bfffc4 	addi	r2,r2,-1
   2963c:	11c11436 	bltu	r2,r7,29a90 <__udivdi3+0x5c0>
   29640:	00c00404 	movi	r3,16
   29644:	180b883a 	mov	r5,r3
   29648:	38c6d83a 	srl	r3,r7,r3
   2964c:	010000f4 	movhi	r4,3
   29650:	213b9c04 	addi	r4,r4,-4496
   29654:	04000804 	movi	r16,32
   29658:	20c7883a 	add	r3,r4,r3
   2965c:	18800003 	ldbu	r2,0(r3)
   29660:	1145883a 	add	r2,r2,r5
   29664:	80a1c83a 	sub	r16,r16,r2
   29668:	80006e1e 	bne	r16,zero,29824 <__udivdi3+0x354>
   2966c:	0007883a 	mov	r3,zero
   29670:	3c406a36 	bltu	r7,r17,2981c <__udivdi3+0x34c>
   29674:	9180692e 	bgeu	r18,r6,2981c <__udivdi3+0x34c>
   29678:	0005883a 	mov	r2,zero
   2967c:	dfc00a17 	ldw	ra,40(sp)
   29680:	df000917 	ldw	fp,36(sp)
   29684:	ddc00817 	ldw	r23,32(sp)
   29688:	dd800717 	ldw	r22,28(sp)
   2968c:	dd400617 	ldw	r21,24(sp)
   29690:	dd000517 	ldw	r20,20(sp)
   29694:	dcc00417 	ldw	r19,16(sp)
   29698:	dc800317 	ldw	r18,12(sp)
   2969c:	dc400217 	ldw	r17,8(sp)
   296a0:	dc000117 	ldw	r16,4(sp)
   296a4:	dec00b04 	addi	sp,sp,44
   296a8:	f800283a 	ret
   296ac:	3000041e 	bne	r6,zero,296c0 <__udivdi3+0x1f0>
   296b0:	01000044 	movi	r4,1
   296b4:	000b883a 	mov	r5,zero
   296b8:	002afa80 	call	2afa8 <__udivsi3>
   296bc:	1021883a 	mov	r16,r2
   296c0:	00bfffd4 	movui	r2,65535
   296c4:	1400502e 	bgeu	r2,r16,29808 <__udivdi3+0x338>
   296c8:	00804034 	movhi	r2,256
   296cc:	10bfffc4 	addi	r2,r2,-1
   296d0:	1400f536 	bltu	r2,r16,29aa8 <__udivdi3+0x5d8>
   296d4:	00800404 	movi	r2,16
   296d8:	1007883a 	mov	r3,r2
   296dc:	8084d83a 	srl	r2,r16,r2
   296e0:	010000f4 	movhi	r4,3
   296e4:	213b9c04 	addi	r4,r4,-4496
   296e8:	2085883a 	add	r2,r4,r2
   296ec:	10800003 	ldbu	r2,0(r2)
   296f0:	10c7883a 	add	r3,r2,r3
   296f4:	00800804 	movi	r2,32
   296f8:	10c5c83a 	sub	r2,r2,r3
   296fc:	1000a01e 	bne	r2,zero,29980 <__udivdi3+0x4b0>
   29700:	8028d43a 	srli	r20,r16,16
   29704:	8c23c83a 	sub	r17,r17,r16
   29708:	857fffcc 	andi	r21,r16,65535
   2970c:	00c00044 	movi	r3,1
   29710:	8809883a 	mov	r4,r17
   29714:	a00b883a 	mov	r5,r20
   29718:	d8c00015 	stw	r3,0(sp)
   2971c:	002afb00 	call	2afb0 <__umodsi3>
   29720:	8809883a 	mov	r4,r17
   29724:	a00b883a 	mov	r5,r20
   29728:	102d883a 	mov	r22,r2
   2972c:	002afa80 	call	2afa8 <__udivsi3>
   29730:	1009883a 	mov	r4,r2
   29734:	a80b883a 	mov	r5,r21
   29738:	1025883a 	mov	r18,r2
   2973c:	00212100 	call	21210 <__mulsi3>
   29740:	1009883a 	mov	r4,r2
   29744:	b00c943a 	slli	r6,r22,16
   29748:	9804d43a 	srli	r2,r19,16
   2974c:	d8c00017 	ldw	r3,0(sp)
   29750:	308cb03a 	or	r6,r6,r2
   29754:	3100052e 	bgeu	r6,r4,2976c <__udivdi3+0x29c>
   29758:	340d883a 	add	r6,r6,r16
   2975c:	90bfffc4 	addi	r2,r18,-1
   29760:	34000136 	bltu	r6,r16,29768 <__udivdi3+0x298>
   29764:	3100e836 	bltu	r6,r4,29b08 <__udivdi3+0x638>
   29768:	1025883a 	mov	r18,r2
   2976c:	3123c83a 	sub	r17,r6,r4
   29770:	8809883a 	mov	r4,r17
   29774:	a00b883a 	mov	r5,r20
   29778:	d8c00015 	stw	r3,0(sp)
   2977c:	002afb00 	call	2afb0 <__umodsi3>
   29780:	102d883a 	mov	r22,r2
   29784:	8809883a 	mov	r4,r17
   29788:	a00b883a 	mov	r5,r20
   2978c:	b02c943a 	slli	r22,r22,16
   29790:	002afa80 	call	2afa8 <__udivsi3>
   29794:	1009883a 	mov	r4,r2
   29798:	a80b883a 	mov	r5,r21
   2979c:	9cffffcc 	andi	r19,r19,65535
   297a0:	1023883a 	mov	r17,r2
   297a4:	b4e6b03a 	or	r19,r22,r19
   297a8:	00212100 	call	21210 <__mulsi3>
   297ac:	d8c00017 	ldw	r3,0(sp)
   297b0:	9880052e 	bgeu	r19,r2,297c8 <__udivdi3+0x2f8>
   297b4:	9c27883a 	add	r19,r19,r16
   297b8:	893fffc4 	addi	r4,r17,-1
   297bc:	9c00aa36 	bltu	r19,r16,29a68 <__udivdi3+0x598>
   297c0:	9880a92e 	bgeu	r19,r2,29a68 <__udivdi3+0x598>
   297c4:	8c7fff84 	addi	r17,r17,-2
   297c8:	9004943a 	slli	r2,r18,16
   297cc:	8884b03a 	or	r2,r17,r2
   297d0:	003faa06 	br	2967c <__udivdi3+0x1ac>
   297d4:	0007883a 	mov	r3,zero
   297d8:	003fa706 	br	29678 <__udivdi3+0x1a8>
   297dc:	00803fc4 	movi	r2,255
   297e0:	11c0ae36 	bltu	r2,r7,29a9c <__udivdi3+0x5cc>
   297e4:	0007883a 	mov	r3,zero
   297e8:	000b883a 	mov	r5,zero
   297ec:	003f9606 	br	29648 <__udivdi3+0x178>
   297f0:	00804034 	movhi	r2,256
   297f4:	10bfffc4 	addi	r2,r2,-1
   297f8:	1180ae36 	bltu	r2,r6,29ab4 <__udivdi3+0x5e4>
   297fc:	00800404 	movi	r2,16
   29800:	1007883a 	mov	r3,r2
   29804:	003f4a06 	br	29530 <__udivdi3+0x60>
   29808:	00803fc4 	movi	r2,255
   2980c:	1400af36 	bltu	r2,r16,29acc <__udivdi3+0x5fc>
   29810:	0005883a 	mov	r2,zero
   29814:	0007883a 	mov	r3,zero
   29818:	003fb006 	br	296dc <__udivdi3+0x20c>
   2981c:	00800044 	movi	r2,1
   29820:	003f9606 	br	2967c <__udivdi3+0x1ac>
   29824:	3c0e983a 	sll	r7,r7,r16
   29828:	3086d83a 	srl	r3,r6,r2
   2982c:	88aed83a 	srl	r23,r17,r2
   29830:	9084d83a 	srl	r2,r18,r2
   29834:	38e6b03a 	or	r19,r7,r3
   29838:	9828d43a 	srli	r20,r19,16
   2983c:	8c22983a 	sll	r17,r17,r16
   29840:	b809883a 	mov	r4,r23
   29844:	a00b883a 	mov	r5,r20
   29848:	342a983a 	sll	r21,r6,r16
   2984c:	88a2b03a 	or	r17,r17,r2
   29850:	002afb00 	call	2afb0 <__umodsi3>
   29854:	b809883a 	mov	r4,r23
   29858:	a00b883a 	mov	r5,r20
   2985c:	1039883a 	mov	fp,r2
   29860:	9dbfffcc 	andi	r22,r19,65535
   29864:	002afa80 	call	2afa8 <__udivsi3>
   29868:	1009883a 	mov	r4,r2
   2986c:	b00b883a 	mov	r5,r22
   29870:	102f883a 	mov	r23,r2
   29874:	00212100 	call	21210 <__mulsi3>
   29878:	1009883a 	mov	r4,r2
   2987c:	e00e943a 	slli	r7,fp,16
   29880:	8804d43a 	srli	r2,r17,16
   29884:	388eb03a 	or	r7,r7,r2
   29888:	3900042e 	bgeu	r7,r4,2989c <__udivdi3+0x3cc>
   2988c:	3ccf883a 	add	r7,r7,r19
   29890:	b8bfffc4 	addi	r2,r23,-1
   29894:	3cc0942e 	bgeu	r7,r19,29ae8 <__udivdi3+0x618>
   29898:	102f883a 	mov	r23,r2
   2989c:	3939c83a 	sub	fp,r7,r4
   298a0:	a00b883a 	mov	r5,r20
   298a4:	e009883a 	mov	r4,fp
   298a8:	002afb00 	call	2afb0 <__umodsi3>
   298ac:	a00b883a 	mov	r5,r20
   298b0:	e009883a 	mov	r4,fp
   298b4:	d8800015 	stw	r2,0(sp)
   298b8:	002afa80 	call	2afa8 <__udivsi3>
   298bc:	1009883a 	mov	r4,r2
   298c0:	b00b883a 	mov	r5,r22
   298c4:	1029883a 	mov	r20,r2
   298c8:	00212100 	call	21210 <__mulsi3>
   298cc:	d8c00017 	ldw	r3,0(sp)
   298d0:	8c7fffcc 	andi	r17,r17,65535
   298d4:	1806943a 	slli	r3,r3,16
   298d8:	1c46b03a 	or	r3,r3,r17
   298dc:	1880042e 	bgeu	r3,r2,298f0 <__udivdi3+0x420>
   298e0:	1cc7883a 	add	r3,r3,r19
   298e4:	a13fffc4 	addi	r4,r20,-1
   298e8:	1cc07b2e 	bgeu	r3,r19,29ad8 <__udivdi3+0x608>
   298ec:	2029883a 	mov	r20,r4
   298f0:	b82e943a 	slli	r23,r23,16
   298f4:	a822d43a 	srli	r17,r21,16
   298f8:	ad7fffcc 	andi	r21,r21,65535
   298fc:	a5e8b03a 	or	r20,r20,r23
   29900:	a5bfffcc 	andi	r22,r20,65535
   29904:	b009883a 	mov	r4,r22
   29908:	a80b883a 	mov	r5,r21
   2990c:	18afc83a 	sub	r23,r3,r2
   29910:	a026d43a 	srli	r19,r20,16
   29914:	00212100 	call	21210 <__mulsi3>
   29918:	b009883a 	mov	r4,r22
   2991c:	880b883a 	mov	r5,r17
   29920:	1039883a 	mov	fp,r2
   29924:	00212100 	call	21210 <__mulsi3>
   29928:	a80b883a 	mov	r5,r21
   2992c:	9809883a 	mov	r4,r19
   29930:	102d883a 	mov	r22,r2
   29934:	00212100 	call	21210 <__mulsi3>
   29938:	9809883a 	mov	r4,r19
   2993c:	880b883a 	mov	r5,r17
   29940:	102b883a 	mov	r21,r2
   29944:	00212100 	call	21210 <__mulsi3>
   29948:	100b883a 	mov	r5,r2
   2994c:	e004d43a 	srli	r2,fp,16
   29950:	ad89883a 	add	r4,r21,r22
   29954:	2089883a 	add	r4,r4,r2
   29958:	2540022e 	bgeu	r4,r21,29964 <__udivdi3+0x494>
   2995c:	00800074 	movhi	r2,1
   29960:	288b883a 	add	r5,r5,r2
   29964:	2004d43a 	srli	r2,r4,16
   29968:	288b883a 	add	r5,r5,r2
   2996c:	b9404536 	bltu	r23,r5,29a84 <__udivdi3+0x5b4>
   29970:	b9403f26 	beq	r23,r5,29a70 <__udivdi3+0x5a0>
   29974:	a005883a 	mov	r2,r20
   29978:	0007883a 	mov	r3,zero
   2997c:	003f3f06 	br	2967c <__udivdi3+0x1ac>
   29980:	80a0983a 	sll	r16,r16,r2
   29984:	88eed83a 	srl	r23,r17,r3
   29988:	90c6d83a 	srl	r3,r18,r3
   2998c:	8028d43a 	srli	r20,r16,16
   29990:	88a2983a 	sll	r17,r17,r2
   29994:	b809883a 	mov	r4,r23
   29998:	a00b883a 	mov	r5,r20
   2999c:	88ecb03a 	or	r22,r17,r3
   299a0:	90a6983a 	sll	r19,r18,r2
   299a4:	002afb00 	call	2afb0 <__umodsi3>
   299a8:	b809883a 	mov	r4,r23
   299ac:	a00b883a 	mov	r5,r20
   299b0:	1023883a 	mov	r17,r2
   299b4:	857fffcc 	andi	r21,r16,65535
   299b8:	002afa80 	call	2afa8 <__udivsi3>
   299bc:	1009883a 	mov	r4,r2
   299c0:	a80b883a 	mov	r5,r21
   299c4:	102f883a 	mov	r23,r2
   299c8:	00212100 	call	21210 <__mulsi3>
   299cc:	1009883a 	mov	r4,r2
   299d0:	880a943a 	slli	r5,r17,16
   299d4:	b004d43a 	srli	r2,r22,16
   299d8:	288ab03a 	or	r5,r5,r2
   299dc:	2900062e 	bgeu	r5,r4,299f8 <__udivdi3+0x528>
   299e0:	2c0b883a 	add	r5,r5,r16
   299e4:	b8bfffc4 	addi	r2,r23,-1
   299e8:	2c004536 	bltu	r5,r16,29b00 <__udivdi3+0x630>
   299ec:	2900442e 	bgeu	r5,r4,29b00 <__udivdi3+0x630>
   299f0:	bdffff84 	addi	r23,r23,-2
   299f4:	2c0b883a 	add	r5,r5,r16
   299f8:	2925c83a 	sub	r18,r5,r4
   299fc:	9009883a 	mov	r4,r18
   29a00:	a00b883a 	mov	r5,r20
   29a04:	002afb00 	call	2afb0 <__umodsi3>
   29a08:	1023883a 	mov	r17,r2
   29a0c:	9009883a 	mov	r4,r18
   29a10:	a00b883a 	mov	r5,r20
   29a14:	8822943a 	slli	r17,r17,16
   29a18:	002afa80 	call	2afa8 <__udivsi3>
   29a1c:	1009883a 	mov	r4,r2
   29a20:	a80b883a 	mov	r5,r21
   29a24:	b5bfffcc 	andi	r22,r22,65535
   29a28:	1025883a 	mov	r18,r2
   29a2c:	8da2b03a 	or	r17,r17,r22
   29a30:	00212100 	call	21210 <__mulsi3>
   29a34:	8880062e 	bgeu	r17,r2,29a50 <__udivdi3+0x580>
   29a38:	8c23883a 	add	r17,r17,r16
   29a3c:	90ffffc4 	addi	r3,r18,-1
   29a40:	8c002d36 	bltu	r17,r16,29af8 <__udivdi3+0x628>
   29a44:	88802c2e 	bgeu	r17,r2,29af8 <__udivdi3+0x628>
   29a48:	94bfff84 	addi	r18,r18,-2
   29a4c:	8c23883a 	add	r17,r17,r16
   29a50:	b806943a 	slli	r3,r23,16
   29a54:	88a3c83a 	sub	r17,r17,r2
   29a58:	90c6b03a 	or	r3,r18,r3
   29a5c:	003f2c06 	br	29710 <__udivdi3+0x240>
   29a60:	1823883a 	mov	r17,r3
   29a64:	003eec06 	br	29618 <__udivdi3+0x148>
   29a68:	2023883a 	mov	r17,r4
   29a6c:	003f5606 	br	297c8 <__udivdi3+0x2f8>
   29a70:	2008943a 	slli	r4,r4,16
   29a74:	9420983a 	sll	r16,r18,r16
   29a78:	e73fffcc 	andi	fp,fp,65535
   29a7c:	2709883a 	add	r4,r4,fp
   29a80:	813fbc2e 	bgeu	r16,r4,29974 <__udivdi3+0x4a4>
   29a84:	a0bfffc4 	addi	r2,r20,-1
   29a88:	0007883a 	mov	r3,zero
   29a8c:	003efb06 	br	2967c <__udivdi3+0x1ac>
   29a90:	00c00604 	movi	r3,24
   29a94:	180b883a 	mov	r5,r3
   29a98:	003eeb06 	br	29648 <__udivdi3+0x178>
   29a9c:	00c00204 	movi	r3,8
   29aa0:	180b883a 	mov	r5,r3
   29aa4:	003ee806 	br	29648 <__udivdi3+0x178>
   29aa8:	00800604 	movi	r2,24
   29aac:	1007883a 	mov	r3,r2
   29ab0:	003f0a06 	br	296dc <__udivdi3+0x20c>
   29ab4:	00800604 	movi	r2,24
   29ab8:	1007883a 	mov	r3,r2
   29abc:	003e9c06 	br	29530 <__udivdi3+0x60>
   29ac0:	00800204 	movi	r2,8
   29ac4:	1007883a 	mov	r3,r2
   29ac8:	003e9906 	br	29530 <__udivdi3+0x60>
   29acc:	00800204 	movi	r2,8
   29ad0:	1007883a 	mov	r3,r2
   29ad4:	003f0106 	br	296dc <__udivdi3+0x20c>
   29ad8:	18bf842e 	bgeu	r3,r2,298ec <__udivdi3+0x41c>
   29adc:	a53fff84 	addi	r20,r20,-2
   29ae0:	1cc7883a 	add	r3,r3,r19
   29ae4:	003f8206 	br	298f0 <__udivdi3+0x420>
   29ae8:	393f6b2e 	bgeu	r7,r4,29898 <__udivdi3+0x3c8>
   29aec:	bdffff84 	addi	r23,r23,-2
   29af0:	3ccf883a 	add	r7,r7,r19
   29af4:	003f6906 	br	2989c <__udivdi3+0x3cc>
   29af8:	1825883a 	mov	r18,r3
   29afc:	003fd406 	br	29a50 <__udivdi3+0x580>
   29b00:	102f883a 	mov	r23,r2
   29b04:	003fbc06 	br	299f8 <__udivdi3+0x528>
   29b08:	94bfff84 	addi	r18,r18,-2
   29b0c:	340d883a 	add	r6,r6,r16
   29b10:	003f1606 	br	2976c <__udivdi3+0x29c>
   29b14:	94bfff84 	addi	r18,r18,-2
   29b18:	1c07883a 	add	r3,r3,r16
   29b1c:	003ea906 	br	295c4 <__udivdi3+0xf4>

00029b20 <__umoddi3>:
   29b20:	defff304 	addi	sp,sp,-52
   29b24:	dd000715 	stw	r20,28(sp)
   29b28:	dcc00615 	stw	r19,24(sp)
   29b2c:	dc800515 	stw	r18,20(sp)
   29b30:	dc400415 	stw	r17,16(sp)
   29b34:	dc000315 	stw	r16,12(sp)
   29b38:	dfc00c15 	stw	ra,48(sp)
   29b3c:	df000b15 	stw	fp,44(sp)
   29b40:	ddc00a15 	stw	r23,40(sp)
   29b44:	dd800915 	stw	r22,36(sp)
   29b48:	dd400815 	stw	r21,32(sp)
   29b4c:	2025883a 	mov	r18,r4
   29b50:	2823883a 	mov	r17,r5
   29b54:	3021883a 	mov	r16,r6
   29b58:	2027883a 	mov	r19,r4
   29b5c:	2829883a 	mov	r20,r5
   29b60:	38003a1e 	bne	r7,zero,29c4c <__umoddi3+0x12c>
   29b64:	2980522e 	bgeu	r5,r6,29cb0 <__umoddi3+0x190>
   29b68:	00bfffd4 	movui	r2,65535
   29b6c:	1180a436 	bltu	r2,r6,29e00 <__umoddi3+0x2e0>
   29b70:	00803fc4 	movi	r2,255
   29b74:	11816036 	bltu	r2,r6,2a0f8 <__umoddi3+0x5d8>
   29b78:	0005883a 	mov	r2,zero
   29b7c:	0009883a 	mov	r4,zero
   29b80:	3084d83a 	srl	r2,r6,r2
   29b84:	00c000f4 	movhi	r3,3
   29b88:	18fb9c04 	addi	r3,r3,-4496
   29b8c:	05400804 	movi	r21,32
   29b90:	1885883a 	add	r2,r3,r2
   29b94:	10800003 	ldbu	r2,0(r2)
   29b98:	1109883a 	add	r4,r2,r4
   29b9c:	a92bc83a 	sub	r21,r21,r4
   29ba0:	a8010e26 	beq	r21,zero,29fdc <__umoddi3+0x4bc>
   29ba4:	8d62983a 	sll	r17,r17,r21
   29ba8:	9108d83a 	srl	r4,r18,r4
   29bac:	3560983a 	sll	r16,r6,r21
   29bb0:	9566983a 	sll	r19,r18,r21
   29bb4:	8928b03a 	or	r20,r17,r4
   29bb8:	8022d43a 	srli	r17,r16,16
   29bbc:	a009883a 	mov	r4,r20
   29bc0:	84bfffcc 	andi	r18,r16,65535
   29bc4:	880b883a 	mov	r5,r17
   29bc8:	002afb00 	call	2afb0 <__umodsi3>
   29bcc:	a009883a 	mov	r4,r20
   29bd0:	880b883a 	mov	r5,r17
   29bd4:	102d883a 	mov	r22,r2
   29bd8:	002afa80 	call	2afa8 <__udivsi3>
   29bdc:	1009883a 	mov	r4,r2
   29be0:	900b883a 	mov	r5,r18
   29be4:	00212100 	call	21210 <__mulsi3>
   29be8:	1009883a 	mov	r4,r2
   29bec:	b006943a 	slli	r3,r22,16
   29bf0:	9804d43a 	srli	r2,r19,16
   29bf4:	1886b03a 	or	r3,r3,r2
   29bf8:	1900042e 	bgeu	r3,r4,29c0c <__umoddi3+0xec>
   29bfc:	1c07883a 	add	r3,r3,r16
   29c00:	1c000236 	bltu	r3,r16,29c0c <__umoddi3+0xec>
   29c04:	1900012e 	bgeu	r3,r4,29c0c <__umoddi3+0xec>
   29c08:	1c07883a 	add	r3,r3,r16
   29c0c:	1929c83a 	sub	r20,r3,r4
   29c10:	a009883a 	mov	r4,r20
   29c14:	880b883a 	mov	r5,r17
   29c18:	002afb00 	call	2afb0 <__umodsi3>
   29c1c:	102d883a 	mov	r22,r2
   29c20:	a009883a 	mov	r4,r20
   29c24:	880b883a 	mov	r5,r17
   29c28:	b02c943a 	slli	r22,r22,16
   29c2c:	002afa80 	call	2afa8 <__udivsi3>
   29c30:	1009883a 	mov	r4,r2
   29c34:	900b883a 	mov	r5,r18
   29c38:	9cffffcc 	andi	r19,r19,65535
   29c3c:	00212100 	call	21210 <__mulsi3>
   29c40:	b4e6b03a 	or	r19,r22,r19
   29c44:	9880572e 	bgeu	r19,r2,29da4 <__umoddi3+0x284>
   29c48:	00005206 	br	29d94 <__umoddi3+0x274>
   29c4c:	29c05936 	bltu	r5,r7,29db4 <__umoddi3+0x294>
   29c50:	00bfffd4 	movui	r2,65535
   29c54:	11c0652e 	bgeu	r2,r7,29dec <__umoddi3+0x2cc>
   29c58:	00804034 	movhi	r2,256
   29c5c:	10bfffc4 	addi	r2,r2,-1
   29c60:	11c11936 	bltu	r2,r7,2a0c8 <__umoddi3+0x5a8>
   29c64:	00c00404 	movi	r3,16
   29c68:	1827883a 	mov	r19,r3
   29c6c:	38c6d83a 	srl	r3,r7,r3
   29c70:	010000f4 	movhi	r4,3
   29c74:	213b9c04 	addi	r4,r4,-4496
   29c78:	04000804 	movi	r16,32
   29c7c:	20c7883a 	add	r3,r4,r3
   29c80:	18800003 	ldbu	r2,0(r3)
   29c84:	14e7883a 	add	r19,r2,r19
   29c88:	84e1c83a 	sub	r16,r16,r19
   29c8c:	8000671e 	bne	r16,zero,29e2c <__umoddi3+0x30c>
   29c90:	3c400136 	bltu	r7,r17,29c98 <__umoddi3+0x178>
   29c94:	91812536 	bltu	r18,r6,2a12c <__umoddi3+0x60c>
   29c98:	9185c83a 	sub	r2,r18,r6
   29c9c:	89e3c83a 	sub	r17,r17,r7
   29ca0:	90a5803a 	cmpltu	r18,r18,r2
   29ca4:	8ca9c83a 	sub	r20,r17,r18
   29ca8:	a007883a 	mov	r3,r20
   29cac:	00004306 	br	29dbc <__umoddi3+0x29c>
   29cb0:	3000041e 	bne	r6,zero,29cc4 <__umoddi3+0x1a4>
   29cb4:	01000044 	movi	r4,1
   29cb8:	000b883a 	mov	r5,zero
   29cbc:	002afa80 	call	2afa8 <__udivsi3>
   29cc0:	1021883a 	mov	r16,r2
   29cc4:	00bfffd4 	movui	r2,65535
   29cc8:	1400532e 	bgeu	r2,r16,29e18 <__umoddi3+0x2f8>
   29ccc:	00804034 	movhi	r2,256
   29cd0:	10bfffc4 	addi	r2,r2,-1
   29cd4:	14010536 	bltu	r2,r16,2a0ec <__umoddi3+0x5cc>
   29cd8:	00800404 	movi	r2,16
   29cdc:	1007883a 	mov	r3,r2
   29ce0:	8084d83a 	srl	r2,r16,r2
   29ce4:	010000f4 	movhi	r4,3
   29ce8:	213b9c04 	addi	r4,r4,-4496
   29cec:	05400804 	movi	r21,32
   29cf0:	2085883a 	add	r2,r4,r2
   29cf4:	10800003 	ldbu	r2,0(r2)
   29cf8:	10c7883a 	add	r3,r2,r3
   29cfc:	a8ebc83a 	sub	r21,r21,r3
   29d00:	a800b81e 	bne	r21,zero,29fe4 <__umoddi3+0x4c4>
   29d04:	8028d43a 	srli	r20,r16,16
   29d08:	8c23c83a 	sub	r17,r17,r16
   29d0c:	85bfffcc 	andi	r22,r16,65535
   29d10:	8809883a 	mov	r4,r17
   29d14:	a00b883a 	mov	r5,r20
   29d18:	002afb00 	call	2afb0 <__umodsi3>
   29d1c:	8809883a 	mov	r4,r17
   29d20:	a00b883a 	mov	r5,r20
   29d24:	1025883a 	mov	r18,r2
   29d28:	002afa80 	call	2afa8 <__udivsi3>
   29d2c:	1009883a 	mov	r4,r2
   29d30:	b00b883a 	mov	r5,r22
   29d34:	00212100 	call	21210 <__mulsi3>
   29d38:	1009883a 	mov	r4,r2
   29d3c:	9006943a 	slli	r3,r18,16
   29d40:	9804d43a 	srli	r2,r19,16
   29d44:	1886b03a 	or	r3,r3,r2
   29d48:	1900032e 	bgeu	r3,r4,29d58 <__umoddi3+0x238>
   29d4c:	1c07883a 	add	r3,r3,r16
   29d50:	1c000136 	bltu	r3,r16,29d58 <__umoddi3+0x238>
   29d54:	1900f336 	bltu	r3,r4,2a124 <__umoddi3+0x604>
   29d58:	1923c83a 	sub	r17,r3,r4
   29d5c:	8809883a 	mov	r4,r17
   29d60:	a00b883a 	mov	r5,r20
   29d64:	002afb00 	call	2afb0 <__umodsi3>
   29d68:	102f883a 	mov	r23,r2
   29d6c:	8809883a 	mov	r4,r17
   29d70:	a00b883a 	mov	r5,r20
   29d74:	b82e943a 	slli	r23,r23,16
   29d78:	002afa80 	call	2afa8 <__udivsi3>
   29d7c:	1009883a 	mov	r4,r2
   29d80:	b00b883a 	mov	r5,r22
   29d84:	9cffffcc 	andi	r19,r19,65535
   29d88:	00212100 	call	21210 <__mulsi3>
   29d8c:	bce6b03a 	or	r19,r23,r19
   29d90:	9880042e 	bgeu	r19,r2,29da4 <__umoddi3+0x284>
   29d94:	9c27883a 	add	r19,r19,r16
   29d98:	9c000236 	bltu	r19,r16,29da4 <__umoddi3+0x284>
   29d9c:	9880012e 	bgeu	r19,r2,29da4 <__umoddi3+0x284>
   29da0:	9c27883a 	add	r19,r19,r16
   29da4:	9885c83a 	sub	r2,r19,r2
   29da8:	1544d83a 	srl	r2,r2,r21
   29dac:	0007883a 	mov	r3,zero
   29db0:	00000206 	br	29dbc <__umoddi3+0x29c>
   29db4:	2005883a 	mov	r2,r4
   29db8:	2807883a 	mov	r3,r5
   29dbc:	dfc00c17 	ldw	ra,48(sp)
   29dc0:	df000b17 	ldw	fp,44(sp)
   29dc4:	ddc00a17 	ldw	r23,40(sp)
   29dc8:	dd800917 	ldw	r22,36(sp)
   29dcc:	dd400817 	ldw	r21,32(sp)
   29dd0:	dd000717 	ldw	r20,28(sp)
   29dd4:	dcc00617 	ldw	r19,24(sp)
   29dd8:	dc800517 	ldw	r18,20(sp)
   29ddc:	dc400417 	ldw	r17,16(sp)
   29de0:	dc000317 	ldw	r16,12(sp)
   29de4:	dec00d04 	addi	sp,sp,52
   29de8:	f800283a 	ret
   29dec:	00803fc4 	movi	r2,255
   29df0:	11c0b236 	bltu	r2,r7,2a0bc <__umoddi3+0x59c>
   29df4:	0007883a 	mov	r3,zero
   29df8:	0027883a 	mov	r19,zero
   29dfc:	003f9b06 	br	29c6c <__umoddi3+0x14c>
   29e00:	00804034 	movhi	r2,256
   29e04:	10bfffc4 	addi	r2,r2,-1
   29e08:	1180b236 	bltu	r2,r6,2a0d4 <__umoddi3+0x5b4>
   29e0c:	00800404 	movi	r2,16
   29e10:	1009883a 	mov	r4,r2
   29e14:	003f5a06 	br	29b80 <__umoddi3+0x60>
   29e18:	00803fc4 	movi	r2,255
   29e1c:	1400b036 	bltu	r2,r16,2a0e0 <__umoddi3+0x5c0>
   29e20:	0005883a 	mov	r2,zero
   29e24:	0007883a 	mov	r3,zero
   29e28:	003fad06 	br	29ce0 <__umoddi3+0x1c0>
   29e2c:	34c4d83a 	srl	r2,r6,r19
   29e30:	3c0e983a 	sll	r7,r7,r16
   29e34:	8cf8d83a 	srl	fp,r17,r19
   29e38:	8c22983a 	sll	r17,r17,r16
   29e3c:	38a8b03a 	or	r20,r7,r2
   29e40:	a02ad43a 	srli	r21,r20,16
   29e44:	94c4d83a 	srl	r2,r18,r19
   29e48:	e009883a 	mov	r4,fp
   29e4c:	a80b883a 	mov	r5,r21
   29e50:	342c983a 	sll	r22,r6,r16
   29e54:	88a2b03a 	or	r17,r17,r2
   29e58:	002afb00 	call	2afb0 <__umodsi3>
   29e5c:	e009883a 	mov	r4,fp
   29e60:	a80b883a 	mov	r5,r21
   29e64:	a5ffffcc 	andi	r23,r20,65535
   29e68:	d8800215 	stw	r2,8(sp)
   29e6c:	002afa80 	call	2afa8 <__udivsi3>
   29e70:	1009883a 	mov	r4,r2
   29e74:	b80b883a 	mov	r5,r23
   29e78:	1039883a 	mov	fp,r2
   29e7c:	00212100 	call	21210 <__mulsi3>
   29e80:	d8c00217 	ldw	r3,8(sp)
   29e84:	1009883a 	mov	r4,r2
   29e88:	8804d43a 	srli	r2,r17,16
   29e8c:	1806943a 	slli	r3,r3,16
   29e90:	9424983a 	sll	r18,r18,r16
   29e94:	1886b03a 	or	r3,r3,r2
   29e98:	1900042e 	bgeu	r3,r4,29eac <__umoddi3+0x38c>
   29e9c:	1d07883a 	add	r3,r3,r20
   29ea0:	e0bfffc4 	addi	r2,fp,-1
   29ea4:	1d009b2e 	bgeu	r3,r20,2a114 <__umoddi3+0x5f4>
   29ea8:	1039883a 	mov	fp,r2
   29eac:	1907c83a 	sub	r3,r3,r4
   29eb0:	1809883a 	mov	r4,r3
   29eb4:	a80b883a 	mov	r5,r21
   29eb8:	d8c00215 	stw	r3,8(sp)
   29ebc:	002afb00 	call	2afb0 <__umodsi3>
   29ec0:	d8c00217 	ldw	r3,8(sp)
   29ec4:	a80b883a 	mov	r5,r21
   29ec8:	d8800015 	stw	r2,0(sp)
   29ecc:	1809883a 	mov	r4,r3
   29ed0:	002afa80 	call	2afa8 <__udivsi3>
   29ed4:	1009883a 	mov	r4,r2
   29ed8:	b80b883a 	mov	r5,r23
   29edc:	102b883a 	mov	r21,r2
   29ee0:	00212100 	call	21210 <__mulsi3>
   29ee4:	d9c00017 	ldw	r7,0(sp)
   29ee8:	8c7fffcc 	andi	r17,r17,65535
   29eec:	380e943a 	slli	r7,r7,16
   29ef0:	3c4eb03a 	or	r7,r7,r17
   29ef4:	3880042e 	bgeu	r7,r2,29f08 <__umoddi3+0x3e8>
   29ef8:	3d0f883a 	add	r7,r7,r20
   29efc:	a8ffffc4 	addi	r3,r21,-1
   29f00:	3d00802e 	bgeu	r7,r20,2a104 <__umoddi3+0x5e4>
   29f04:	182b883a 	mov	r21,r3
   29f08:	e038943a 	slli	fp,fp,16
   29f0c:	b010d43a 	srli	r8,r22,16
   29f10:	b1bfffcc 	andi	r6,r22,65535
   29f14:	af2ab03a 	or	r21,r21,fp
   29f18:	a82ed43a 	srli	r23,r21,16
   29f1c:	ad7fffcc 	andi	r21,r21,65535
   29f20:	300b883a 	mov	r5,r6
   29f24:	a809883a 	mov	r4,r21
   29f28:	38a3c83a 	sub	r17,r7,r2
   29f2c:	d9800115 	stw	r6,4(sp)
   29f30:	da000015 	stw	r8,0(sp)
   29f34:	00212100 	call	21210 <__mulsi3>
   29f38:	da000017 	ldw	r8,0(sp)
   29f3c:	a809883a 	mov	r4,r21
   29f40:	1039883a 	mov	fp,r2
   29f44:	400b883a 	mov	r5,r8
   29f48:	da000215 	stw	r8,8(sp)
   29f4c:	00212100 	call	21210 <__mulsi3>
   29f50:	d9800117 	ldw	r6,4(sp)
   29f54:	b809883a 	mov	r4,r23
   29f58:	d8800015 	stw	r2,0(sp)
   29f5c:	300b883a 	mov	r5,r6
   29f60:	00212100 	call	21210 <__mulsi3>
   29f64:	d8c00217 	ldw	r3,8(sp)
   29f68:	b809883a 	mov	r4,r23
   29f6c:	102b883a 	mov	r21,r2
   29f70:	180b883a 	mov	r5,r3
   29f74:	00212100 	call	21210 <__mulsi3>
   29f78:	d9c00017 	ldw	r7,0(sp)
   29f7c:	1007883a 	mov	r3,r2
   29f80:	e004d43a 	srli	r2,fp,16
   29f84:	a9c9883a 	add	r4,r21,r7
   29f88:	2089883a 	add	r4,r4,r2
   29f8c:	2540022e 	bgeu	r4,r21,29f98 <__umoddi3+0x478>
   29f90:	00800074 	movhi	r2,1
   29f94:	1887883a 	add	r3,r3,r2
   29f98:	2004d43a 	srli	r2,r4,16
   29f9c:	2008943a 	slli	r4,r4,16
   29fa0:	e73fffcc 	andi	fp,fp,65535
   29fa4:	1887883a 	add	r3,r3,r2
   29fa8:	2709883a 	add	r4,r4,fp
   29fac:	88c03d36 	bltu	r17,r3,2a0a4 <__umoddi3+0x584>
   29fb0:	88c06126 	beq	r17,r3,2a138 <__umoddi3+0x618>
   29fb4:	88c7c83a 	sub	r3,r17,r3
   29fb8:	202d883a 	mov	r22,r4
   29fbc:	95adc83a 	sub	r22,r18,r22
   29fc0:	95a5803a 	cmpltu	r18,r18,r22
   29fc4:	1c87c83a 	sub	r3,r3,r18
   29fc8:	1cc4983a 	sll	r2,r3,r19
   29fcc:	b42cd83a 	srl	r22,r22,r16
   29fd0:	1c06d83a 	srl	r3,r3,r16
   29fd4:	1584b03a 	or	r2,r2,r22
   29fd8:	003f7806 	br	29dbc <__umoddi3+0x29c>
   29fdc:	002b883a 	mov	r21,zero
   29fe0:	003ef506 	br	29bb8 <__umoddi3+0x98>
   29fe4:	8560983a 	sll	r16,r16,r21
   29fe8:	88e6d83a 	srl	r19,r17,r3
   29fec:	90c6d83a 	srl	r3,r18,r3
   29ff0:	8028d43a 	srli	r20,r16,16
   29ff4:	8d62983a 	sll	r17,r17,r21
   29ff8:	9809883a 	mov	r4,r19
   29ffc:	a00b883a 	mov	r5,r20
   2a000:	88eeb03a 	or	r23,r17,r3
   2a004:	002afb00 	call	2afb0 <__umodsi3>
   2a008:	9809883a 	mov	r4,r19
   2a00c:	a00b883a 	mov	r5,r20
   2a010:	1023883a 	mov	r17,r2
   2a014:	85bfffcc 	andi	r22,r16,65535
   2a018:	002afa80 	call	2afa8 <__udivsi3>
   2a01c:	1009883a 	mov	r4,r2
   2a020:	b00b883a 	mov	r5,r22
   2a024:	00212100 	call	21210 <__mulsi3>
   2a028:	1007883a 	mov	r3,r2
   2a02c:	8808943a 	slli	r4,r17,16
   2a030:	b804d43a 	srli	r2,r23,16
   2a034:	9566983a 	sll	r19,r18,r21
   2a038:	2088b03a 	or	r4,r4,r2
   2a03c:	20c0042e 	bgeu	r4,r3,2a050 <__umoddi3+0x530>
   2a040:	2409883a 	add	r4,r4,r16
   2a044:	24000236 	bltu	r4,r16,2a050 <__umoddi3+0x530>
   2a048:	20c0012e 	bgeu	r4,r3,2a050 <__umoddi3+0x530>
   2a04c:	2409883a 	add	r4,r4,r16
   2a050:	20e5c83a 	sub	r18,r4,r3
   2a054:	9009883a 	mov	r4,r18
   2a058:	a00b883a 	mov	r5,r20
   2a05c:	002afb00 	call	2afb0 <__umodsi3>
   2a060:	1023883a 	mov	r17,r2
   2a064:	9009883a 	mov	r4,r18
   2a068:	a00b883a 	mov	r5,r20
   2a06c:	8822943a 	slli	r17,r17,16
   2a070:	002afa80 	call	2afa8 <__udivsi3>
   2a074:	1009883a 	mov	r4,r2
   2a078:	b00b883a 	mov	r5,r22
   2a07c:	bdffffcc 	andi	r23,r23,65535
   2a080:	00212100 	call	21210 <__mulsi3>
   2a084:	8de2b03a 	or	r17,r17,r23
   2a088:	8880042e 	bgeu	r17,r2,2a09c <__umoddi3+0x57c>
   2a08c:	8c23883a 	add	r17,r17,r16
   2a090:	8c000236 	bltu	r17,r16,2a09c <__umoddi3+0x57c>
   2a094:	8880012e 	bgeu	r17,r2,2a09c <__umoddi3+0x57c>
   2a098:	8c23883a 	add	r17,r17,r16
   2a09c:	88a3c83a 	sub	r17,r17,r2
   2a0a0:	003f1b06 	br	29d10 <__umoddi3+0x1f0>
   2a0a4:	25adc83a 	sub	r22,r4,r22
   2a0a8:	1d07c83a 	sub	r3,r3,r20
   2a0ac:	2589803a 	cmpltu	r4,r4,r22
   2a0b0:	1907c83a 	sub	r3,r3,r4
   2a0b4:	88c7c83a 	sub	r3,r17,r3
   2a0b8:	003fc006 	br	29fbc <__umoddi3+0x49c>
   2a0bc:	00c00204 	movi	r3,8
   2a0c0:	1827883a 	mov	r19,r3
   2a0c4:	003ee906 	br	29c6c <__umoddi3+0x14c>
   2a0c8:	00c00604 	movi	r3,24
   2a0cc:	1827883a 	mov	r19,r3
   2a0d0:	003ee606 	br	29c6c <__umoddi3+0x14c>
   2a0d4:	00800604 	movi	r2,24
   2a0d8:	1009883a 	mov	r4,r2
   2a0dc:	003ea806 	br	29b80 <__umoddi3+0x60>
   2a0e0:	00800204 	movi	r2,8
   2a0e4:	1007883a 	mov	r3,r2
   2a0e8:	003efd06 	br	29ce0 <__umoddi3+0x1c0>
   2a0ec:	00800604 	movi	r2,24
   2a0f0:	1007883a 	mov	r3,r2
   2a0f4:	003efa06 	br	29ce0 <__umoddi3+0x1c0>
   2a0f8:	00800204 	movi	r2,8
   2a0fc:	1009883a 	mov	r4,r2
   2a100:	003e9f06 	br	29b80 <__umoddi3+0x60>
   2a104:	38bf7f2e 	bgeu	r7,r2,29f04 <__umoddi3+0x3e4>
   2a108:	ad7fff84 	addi	r21,r21,-2
   2a10c:	3d0f883a 	add	r7,r7,r20
   2a110:	003f7d06 	br	29f08 <__umoddi3+0x3e8>
   2a114:	193f642e 	bgeu	r3,r4,29ea8 <__umoddi3+0x388>
   2a118:	e73fff84 	addi	fp,fp,-2
   2a11c:	1d07883a 	add	r3,r3,r20
   2a120:	003f6206 	br	29eac <__umoddi3+0x38c>
   2a124:	1c07883a 	add	r3,r3,r16
   2a128:	003f0b06 	br	29d58 <__umoddi3+0x238>
   2a12c:	9005883a 	mov	r2,r18
   2a130:	a007883a 	mov	r3,r20
   2a134:	003f2106 	br	29dbc <__umoddi3+0x29c>
   2a138:	913fda36 	bltu	r18,r4,2a0a4 <__umoddi3+0x584>
   2a13c:	202d883a 	mov	r22,r4
   2a140:	0007883a 	mov	r3,zero
   2a144:	003f9d06 	br	29fbc <__umoddi3+0x49c>

0002a148 <_fpadd_parts>:
   2a148:	2005883a 	mov	r2,r4
   2a14c:	21000017 	ldw	r4,0(r4)
   2a150:	01c00044 	movi	r7,1
   2a154:	3900622e 	bgeu	r7,r4,2a2e0 <_fpadd_parts+0x198>
   2a158:	28c00017 	ldw	r3,0(r5)
   2a15c:	38c05f2e 	bgeu	r7,r3,2a2dc <_fpadd_parts+0x194>
   2a160:	01c00104 	movi	r7,4
   2a164:	21c0c626 	beq	r4,r7,2a480 <_fpadd_parts+0x338>
   2a168:	19c05c26 	beq	r3,r7,2a2dc <_fpadd_parts+0x194>
   2a16c:	01c00084 	movi	r7,2
   2a170:	19c06b26 	beq	r3,r7,2a320 <_fpadd_parts+0x1d8>
   2a174:	21c05926 	beq	r4,r7,2a2dc <_fpadd_parts+0x194>
   2a178:	11c00217 	ldw	r7,8(r2)
   2a17c:	2ac00217 	ldw	r11,8(r5)
   2a180:	13000317 	ldw	r12,12(r2)
   2a184:	13400417 	ldw	r13,16(r2)
   2a188:	3ac9c83a 	sub	r4,r7,r11
   2a18c:	2a000317 	ldw	r8,12(r5)
   2a190:	2a400417 	ldw	r9,16(r5)
   2a194:	2015883a 	mov	r10,r4
   2a198:	20007516 	blt	r4,zero,2a370 <_fpadd_parts+0x228>
   2a19c:	00c00fc4 	movi	r3,63
   2a1a0:	1a805016 	blt	r3,r10,2a2e4 <_fpadd_parts+0x19c>
   2a1a4:	0100870e 	bge	zero,r4,2a3c4 <_fpadd_parts+0x27c>
   2a1a8:	50fff804 	addi	r3,r10,-32
   2a1ac:	18009916 	blt	r3,zero,2a414 <_fpadd_parts+0x2cc>
   2a1b0:	48d6d83a 	srl	r11,r9,r3
   2a1b4:	001d883a 	mov	r14,zero
   2a1b8:	18009e16 	blt	r3,zero,2a434 <_fpadd_parts+0x2ec>
   2a1bc:	01000044 	movi	r4,1
   2a1c0:	20c6983a 	sll	r3,r4,r3
   2a1c4:	0015883a 	mov	r10,zero
   2a1c8:	513fffc4 	addi	r4,r10,-1
   2a1cc:	2295403a 	cmpgeu	r10,r4,r10
   2a1d0:	1a87c83a 	sub	r3,r3,r10
   2a1d4:	1a52703a 	and	r9,r3,r9
   2a1d8:	2210703a 	and	r8,r4,r8
   2a1dc:	4250b03a 	or	r8,r8,r9
   2a1e0:	4010c03a 	cmpne	r8,r8,zero
   2a1e4:	42d0b03a 	or	r8,r8,r11
   2a1e8:	7013883a 	mov	r9,r14
   2a1ec:	11000117 	ldw	r4,4(r2)
   2a1f0:	28800117 	ldw	r2,4(r5)
   2a1f4:	20804126 	beq	r4,r2,2a2fc <_fpadd_parts+0x1b4>
   2a1f8:	20006326 	beq	r4,zero,2a388 <_fpadd_parts+0x240>
   2a1fc:	4305c83a 	sub	r2,r8,r12
   2a200:	4091803a 	cmpltu	r8,r8,r2
   2a204:	4b47c83a 	sub	r3,r9,r13
   2a208:	1a07c83a 	sub	r3,r3,r8
   2a20c:	18006316 	blt	r3,zero,2a39c <_fpadd_parts+0x254>
   2a210:	30000115 	stw	zero,4(r6)
   2a214:	31c00215 	stw	r7,8(r6)
   2a218:	30800315 	stw	r2,12(r6)
   2a21c:	30c00415 	stw	r3,16(r6)
   2a220:	11ffffc4 	addi	r7,r2,-1
   2a224:	388b403a 	cmpgeu	r5,r7,r2
   2a228:	194bc83a 	sub	r5,r3,r5
   2a22c:	01040034 	movhi	r4,4096
   2a230:	213fffc4 	addi	r4,r4,-1
   2a234:	21401736 	bltu	r4,r5,2a294 <_fpadd_parts+0x14c>
   2a238:	29008226 	beq	r5,r4,2a444 <_fpadd_parts+0x2fc>
   2a23c:	31400217 	ldw	r5,8(r6)
   2a240:	02840034 	movhi	r10,4096
   2a244:	52bfffc4 	addi	r10,r10,-1
   2a248:	033fff84 	movi	r12,-2
   2a24c:	297fffc4 	addi	r5,r5,-1
   2a250:	00000106 	br	2a258 <_fpadd_parts+0x110>
   2a254:	3a804a26 	beq	r7,r10,2a380 <_fpadd_parts+0x238>
   2a258:	1089883a 	add	r4,r2,r2
   2a25c:	2091803a 	cmpltu	r8,r4,r2
   2a260:	18c7883a 	add	r3,r3,r3
   2a264:	227fffc4 	addi	r9,r4,-1
   2a268:	40d1883a 	add	r8,r8,r3
   2a26c:	490f403a 	cmpgeu	r7,r9,r4
   2a270:	41cfc83a 	sub	r7,r8,r7
   2a274:	2817883a 	mov	r11,r5
   2a278:	2005883a 	mov	r2,r4
   2a27c:	4007883a 	mov	r3,r8
   2a280:	297fffc4 	addi	r5,r5,-1
   2a284:	51fff32e 	bgeu	r10,r7,2a254 <_fpadd_parts+0x10c>
   2a288:	31000315 	stw	r4,12(r6)
   2a28c:	32000415 	stw	r8,16(r6)
   2a290:	32c00215 	stw	r11,8(r6)
   2a294:	010000c4 	movi	r4,3
   2a298:	31000015 	stw	r4,0(r6)
   2a29c:	01080034 	movhi	r4,8192
   2a2a0:	213fffc4 	addi	r4,r4,-1
   2a2a4:	20c00b2e 	bgeu	r4,r3,2a2d4 <_fpadd_parts+0x18c>
   2a2a8:	180e97fa 	slli	r7,r3,31
   2a2ac:	1008d07a 	srli	r4,r2,1
   2a2b0:	31400217 	ldw	r5,8(r6)
   2a2b4:	1806d07a 	srli	r3,r3,1
   2a2b8:	1080004c 	andi	r2,r2,1
   2a2bc:	3908b03a 	or	r4,r7,r4
   2a2c0:	1108b03a 	or	r4,r2,r4
   2a2c4:	29400044 	addi	r5,r5,1
   2a2c8:	31000315 	stw	r4,12(r6)
   2a2cc:	30c00415 	stw	r3,16(r6)
   2a2d0:	31400215 	stw	r5,8(r6)
   2a2d4:	3005883a 	mov	r2,r6
   2a2d8:	f800283a 	ret
   2a2dc:	2805883a 	mov	r2,r5
   2a2e0:	f800283a 	ret
   2a2e4:	59c01e0e 	bge	r11,r7,2a360 <_fpadd_parts+0x218>
   2a2e8:	11000117 	ldw	r4,4(r2)
   2a2ec:	28800117 	ldw	r2,4(r5)
   2a2f0:	0011883a 	mov	r8,zero
   2a2f4:	0013883a 	mov	r9,zero
   2a2f8:	20bfbf1e 	bne	r4,r2,2a1f8 <_fpadd_parts+0xb0>
   2a2fc:	4305883a 	add	r2,r8,r12
   2a300:	1207803a 	cmpltu	r3,r2,r8
   2a304:	4b53883a 	add	r9,r9,r13
   2a308:	1a47883a 	add	r3,r3,r9
   2a30c:	31000115 	stw	r4,4(r6)
   2a310:	31c00215 	stw	r7,8(r6)
   2a314:	30800315 	stw	r2,12(r6)
   2a318:	30c00415 	stw	r3,16(r6)
   2a31c:	003fdd06 	br	2a294 <_fpadd_parts+0x14c>
   2a320:	20ffef1e 	bne	r4,r3,2a2e0 <_fpadd_parts+0x198>
   2a324:	31000015 	stw	r4,0(r6)
   2a328:	10c00117 	ldw	r3,4(r2)
   2a32c:	30c00115 	stw	r3,4(r6)
   2a330:	10c00217 	ldw	r3,8(r2)
   2a334:	11000117 	ldw	r4,4(r2)
   2a338:	29400117 	ldw	r5,4(r5)
   2a33c:	30c00215 	stw	r3,8(r6)
   2a340:	10c00317 	ldw	r3,12(r2)
   2a344:	2908703a 	and	r4,r5,r4
   2a348:	30c00315 	stw	r3,12(r6)
   2a34c:	10c00417 	ldw	r3,16(r2)
   2a350:	31000115 	stw	r4,4(r6)
   2a354:	3005883a 	mov	r2,r6
   2a358:	30c00415 	stw	r3,16(r6)
   2a35c:	f800283a 	ret
   2a360:	580f883a 	mov	r7,r11
   2a364:	0019883a 	mov	r12,zero
   2a368:	001b883a 	mov	r13,zero
   2a36c:	003f9f06 	br	2a1ec <_fpadd_parts+0xa4>
   2a370:	0115c83a 	sub	r10,zero,r4
   2a374:	00c00fc4 	movi	r3,63
   2a378:	1abfda16 	blt	r3,r10,2a2e4 <_fpadd_parts+0x19c>
   2a37c:	003f8906 	br	2a1a4 <_fpadd_parts+0x5c>
   2a380:	627fb52e 	bgeu	r12,r9,2a258 <_fpadd_parts+0x110>
   2a384:	003fc006 	br	2a288 <_fpadd_parts+0x140>
   2a388:	6205c83a 	sub	r2,r12,r8
   2a38c:	6099803a 	cmpltu	r12,r12,r2
   2a390:	6a47c83a 	sub	r3,r13,r9
   2a394:	1b07c83a 	sub	r3,r3,r12
   2a398:	183f9d0e 	bge	r3,zero,2a210 <_fpadd_parts+0xc8>
   2a39c:	0085c83a 	sub	r2,zero,r2
   2a3a0:	1008c03a 	cmpne	r4,r2,zero
   2a3a4:	00c7c83a 	sub	r3,zero,r3
   2a3a8:	1907c83a 	sub	r3,r3,r4
   2a3ac:	01000044 	movi	r4,1
   2a3b0:	31000115 	stw	r4,4(r6)
   2a3b4:	31c00215 	stw	r7,8(r6)
   2a3b8:	30800315 	stw	r2,12(r6)
   2a3bc:	30c00415 	stw	r3,16(r6)
   2a3c0:	003f9706 	br	2a220 <_fpadd_parts+0xd8>
   2a3c4:	203f8926 	beq	r4,zero,2a1ec <_fpadd_parts+0xa4>
   2a3c8:	50fff804 	addi	r3,r10,-32
   2a3cc:	3a8f883a 	add	r7,r7,r10
   2a3d0:	18002316 	blt	r3,zero,2a460 <_fpadd_parts+0x318>
   2a3d4:	68d6d83a 	srl	r11,r13,r3
   2a3d8:	001d883a 	mov	r14,zero
   2a3dc:	18001c16 	blt	r3,zero,2a450 <_fpadd_parts+0x308>
   2a3e0:	01000044 	movi	r4,1
   2a3e4:	20c6983a 	sll	r3,r4,r3
   2a3e8:	0015883a 	mov	r10,zero
   2a3ec:	513fffc4 	addi	r4,r10,-1
   2a3f0:	2295403a 	cmpgeu	r10,r4,r10
   2a3f4:	1a87c83a 	sub	r3,r3,r10
   2a3f8:	1b5a703a 	and	r13,r3,r13
   2a3fc:	2318703a 	and	r12,r4,r12
   2a400:	6358b03a 	or	r12,r12,r13
   2a404:	6018c03a 	cmpne	r12,r12,zero
   2a408:	62d8b03a 	or	r12,r12,r11
   2a40c:	701b883a 	mov	r13,r14
   2a410:	003f7606 	br	2a1ec <_fpadd_parts+0xa4>
   2a414:	4808907a 	slli	r4,r9,1
   2a418:	02c007c4 	movi	r11,31
   2a41c:	5a97c83a 	sub	r11,r11,r10
   2a420:	22c8983a 	sll	r4,r4,r11
   2a424:	4296d83a 	srl	r11,r8,r10
   2a428:	4a9cd83a 	srl	r14,r9,r10
   2a42c:	22d6b03a 	or	r11,r4,r11
   2a430:	003f6106 	br	2a1b8 <_fpadd_parts+0x70>
   2a434:	00c00044 	movi	r3,1
   2a438:	1a94983a 	sll	r10,r3,r10
   2a43c:	0007883a 	mov	r3,zero
   2a440:	003f6106 	br	2a1c8 <_fpadd_parts+0x80>
   2a444:	013fff84 	movi	r4,-2
   2a448:	21ff7c2e 	bgeu	r4,r7,2a23c <_fpadd_parts+0xf4>
   2a44c:	003f9106 	br	2a294 <_fpadd_parts+0x14c>
   2a450:	00c00044 	movi	r3,1
   2a454:	1a94983a 	sll	r10,r3,r10
   2a458:	0007883a 	mov	r3,zero
   2a45c:	003fe306 	br	2a3ec <_fpadd_parts+0x2a4>
   2a460:	6816907a 	slli	r11,r13,1
   2a464:	010007c4 	movi	r4,31
   2a468:	2289c83a 	sub	r4,r4,r10
   2a46c:	5908983a 	sll	r4,r11,r4
   2a470:	6296d83a 	srl	r11,r12,r10
   2a474:	6a9cd83a 	srl	r14,r13,r10
   2a478:	22d6b03a 	or	r11,r4,r11
   2a47c:	003fd706 	br	2a3dc <_fpadd_parts+0x294>
   2a480:	193f971e 	bne	r3,r4,2a2e0 <_fpadd_parts+0x198>
   2a484:	11000117 	ldw	r4,4(r2)
   2a488:	28c00117 	ldw	r3,4(r5)
   2a48c:	20ff9426 	beq	r4,r3,2a2e0 <_fpadd_parts+0x198>
   2a490:	008000f4 	movhi	r2,3
   2a494:	10bb9704 	addi	r2,r2,-4516
   2a498:	f800283a 	ret

0002a49c <__adddf3>:
   2a49c:	deffec04 	addi	sp,sp,-80
   2a4a0:	d9001115 	stw	r4,68(sp)
   2a4a4:	d9401215 	stw	r5,72(sp)
   2a4a8:	d9001104 	addi	r4,sp,68
   2a4ac:	d9400a04 	addi	r5,sp,40
   2a4b0:	dfc01315 	stw	ra,76(sp)
   2a4b4:	d9c01015 	stw	r7,64(sp)
   2a4b8:	d9800f15 	stw	r6,60(sp)
   2a4bc:	002b3980 	call	2b398 <__unpack_d>
   2a4c0:	d9000f04 	addi	r4,sp,60
   2a4c4:	d9400504 	addi	r5,sp,20
   2a4c8:	002b3980 	call	2b398 <__unpack_d>
   2a4cc:	d9000a04 	addi	r4,sp,40
   2a4d0:	d9400504 	addi	r5,sp,20
   2a4d4:	d80d883a 	mov	r6,sp
   2a4d8:	002a1480 	call	2a148 <_fpadd_parts>
   2a4dc:	1009883a 	mov	r4,r2
   2a4e0:	002b1740 	call	2b174 <__pack_d>
   2a4e4:	dfc01317 	ldw	ra,76(sp)
   2a4e8:	dec01404 	addi	sp,sp,80
   2a4ec:	f800283a 	ret

0002a4f0 <__subdf3>:
   2a4f0:	deffec04 	addi	sp,sp,-80
   2a4f4:	d9001115 	stw	r4,68(sp)
   2a4f8:	d9401215 	stw	r5,72(sp)
   2a4fc:	d9001104 	addi	r4,sp,68
   2a500:	d9400a04 	addi	r5,sp,40
   2a504:	dfc01315 	stw	ra,76(sp)
   2a508:	d9c01015 	stw	r7,64(sp)
   2a50c:	d9800f15 	stw	r6,60(sp)
   2a510:	002b3980 	call	2b398 <__unpack_d>
   2a514:	d9000f04 	addi	r4,sp,60
   2a518:	d9400504 	addi	r5,sp,20
   2a51c:	002b3980 	call	2b398 <__unpack_d>
   2a520:	d8800617 	ldw	r2,24(sp)
   2a524:	d9000a04 	addi	r4,sp,40
   2a528:	d9400504 	addi	r5,sp,20
   2a52c:	d80d883a 	mov	r6,sp
   2a530:	1080005c 	xori	r2,r2,1
   2a534:	d8800615 	stw	r2,24(sp)
   2a538:	002a1480 	call	2a148 <_fpadd_parts>
   2a53c:	1009883a 	mov	r4,r2
   2a540:	002b1740 	call	2b174 <__pack_d>
   2a544:	dfc01317 	ldw	ra,76(sp)
   2a548:	dec01404 	addi	sp,sp,80
   2a54c:	f800283a 	ret

0002a550 <__muldf3>:
   2a550:	deffe404 	addi	sp,sp,-112
   2a554:	d9001115 	stw	r4,68(sp)
   2a558:	d9401215 	stw	r5,72(sp)
   2a55c:	d9001104 	addi	r4,sp,68
   2a560:	d9400a04 	addi	r5,sp,40
   2a564:	dfc01b15 	stw	ra,108(sp)
   2a568:	d9800f15 	stw	r6,60(sp)
   2a56c:	d9c01015 	stw	r7,64(sp)
   2a570:	ddc01a15 	stw	r23,104(sp)
   2a574:	dd801915 	stw	r22,100(sp)
   2a578:	dd401815 	stw	r21,96(sp)
   2a57c:	dd001715 	stw	r20,92(sp)
   2a580:	dcc01615 	stw	r19,88(sp)
   2a584:	dc801515 	stw	r18,84(sp)
   2a588:	dc401415 	stw	r17,80(sp)
   2a58c:	dc001315 	stw	r16,76(sp)
   2a590:	002b3980 	call	2b398 <__unpack_d>
   2a594:	d9000f04 	addi	r4,sp,60
   2a598:	d9400504 	addi	r5,sp,20
   2a59c:	002b3980 	call	2b398 <__unpack_d>
   2a5a0:	d8c00a17 	ldw	r3,40(sp)
   2a5a4:	00800044 	movi	r2,1
   2a5a8:	10c01136 	bltu	r2,r3,2a5f0 <__muldf3+0xa0>
   2a5ac:	d8c00b17 	ldw	r3,44(sp)
   2a5b0:	d8800617 	ldw	r2,24(sp)
   2a5b4:	d9000a04 	addi	r4,sp,40
   2a5b8:	1884c03a 	cmpne	r2,r3,r2
   2a5bc:	d8800b15 	stw	r2,44(sp)
   2a5c0:	002b1740 	call	2b174 <__pack_d>
   2a5c4:	dfc01b17 	ldw	ra,108(sp)
   2a5c8:	ddc01a17 	ldw	r23,104(sp)
   2a5cc:	dd801917 	ldw	r22,100(sp)
   2a5d0:	dd401817 	ldw	r21,96(sp)
   2a5d4:	dd001717 	ldw	r20,92(sp)
   2a5d8:	dcc01617 	ldw	r19,88(sp)
   2a5dc:	dc801517 	ldw	r18,84(sp)
   2a5e0:	dc401417 	ldw	r17,80(sp)
   2a5e4:	dc001317 	ldw	r16,76(sp)
   2a5e8:	dec01c04 	addi	sp,sp,112
   2a5ec:	f800283a 	ret
   2a5f0:	d9000517 	ldw	r4,20(sp)
   2a5f4:	11000636 	bltu	r2,r4,2a610 <__muldf3+0xc0>
   2a5f8:	d8800617 	ldw	r2,24(sp)
   2a5fc:	d8c00b17 	ldw	r3,44(sp)
   2a600:	d9000504 	addi	r4,sp,20
   2a604:	1884c03a 	cmpne	r2,r3,r2
   2a608:	d8800615 	stw	r2,24(sp)
   2a60c:	003fec06 	br	2a5c0 <__muldf3+0x70>
   2a610:	00800104 	movi	r2,4
   2a614:	1880051e 	bne	r3,r2,2a62c <__muldf3+0xdc>
   2a618:	00800084 	movi	r2,2
   2a61c:	20bfe31e 	bne	r4,r2,2a5ac <__muldf3+0x5c>
   2a620:	010000f4 	movhi	r4,3
   2a624:	213b9704 	addi	r4,r4,-4516
   2a628:	003fe506 	br	2a5c0 <__muldf3+0x70>
   2a62c:	2080031e 	bne	r4,r2,2a63c <__muldf3+0xec>
   2a630:	00800084 	movi	r2,2
   2a634:	18bffa26 	beq	r3,r2,2a620 <__muldf3+0xd0>
   2a638:	003fef06 	br	2a5f8 <__muldf3+0xa8>
   2a63c:	00800084 	movi	r2,2
   2a640:	18bfda26 	beq	r3,r2,2a5ac <__muldf3+0x5c>
   2a644:	20bfec26 	beq	r4,r2,2a5f8 <__muldf3+0xa8>
   2a648:	dc000d17 	ldw	r16,52(sp)
   2a64c:	dd000817 	ldw	r20,32(sp)
   2a650:	dc800917 	ldw	r18,36(sp)
   2a654:	8009883a 	mov	r4,r16
   2a658:	000b883a 	mov	r5,zero
   2a65c:	a00d883a 	mov	r6,r20
   2a660:	000f883a 	mov	r7,zero
   2a664:	002afb80 	call	2afb8 <__muldi3>
   2a668:	dc400e17 	ldw	r17,56(sp)
   2a66c:	9009883a 	mov	r4,r18
   2a670:	800d883a 	mov	r6,r16
   2a674:	000b883a 	mov	r5,zero
   2a678:	000f883a 	mov	r7,zero
   2a67c:	102f883a 	mov	r23,r2
   2a680:	1827883a 	mov	r19,r3
   2a684:	002afb80 	call	2afb8 <__muldi3>
   2a688:	900d883a 	mov	r6,r18
   2a68c:	8809883a 	mov	r4,r17
   2a690:	000b883a 	mov	r5,zero
   2a694:	000f883a 	mov	r7,zero
   2a698:	102b883a 	mov	r21,r2
   2a69c:	1821883a 	mov	r16,r3
   2a6a0:	002afb80 	call	2afb8 <__muldi3>
   2a6a4:	8809883a 	mov	r4,r17
   2a6a8:	000b883a 	mov	r5,zero
   2a6ac:	a00d883a 	mov	r6,r20
   2a6b0:	000f883a 	mov	r7,zero
   2a6b4:	102d883a 	mov	r22,r2
   2a6b8:	1825883a 	mov	r18,r3
   2a6bc:	002afb80 	call	2afb8 <__muldi3>
   2a6c0:	154b883a 	add	r5,r2,r21
   2a6c4:	2889803a 	cmpltu	r4,r5,r2
   2a6c8:	1c07883a 	add	r3,r3,r16
   2a6cc:	20c9883a 	add	r4,r4,r3
   2a6d0:	24004b36 	bltu	r4,r16,2a800 <__muldf3+0x2b0>
   2a6d4:	8100011e 	bne	r16,r4,2a6dc <__muldf3+0x18c>
   2a6d8:	2d404936 	bltu	r5,r21,2a800 <__muldf3+0x2b0>
   2a6dc:	0011883a 	mov	r8,zero
   2a6e0:	0007883a 	mov	r3,zero
   2a6e4:	2ccb883a 	add	r5,r5,r19
   2a6e8:	b80d883a 	mov	r6,r23
   2a6ec:	2cc0012e 	bgeu	r5,r19,2a6f4 <__muldf3+0x1a4>
   2a6f0:	02000044 	movi	r8,1
   2a6f4:	258f883a 	add	r7,r4,r22
   2a6f8:	3909803a 	cmpltu	r4,r7,r4
   2a6fc:	da400c17 	ldw	r9,48(sp)
   2a700:	2489883a 	add	r4,r4,r18
   2a704:	d8800717 	ldw	r2,28(sp)
   2a708:	20c9883a 	add	r4,r4,r3
   2a70c:	da800b17 	ldw	r10,44(sp)
   2a710:	d8c00617 	ldw	r3,24(sp)
   2a714:	3a11883a 	add	r8,r7,r8
   2a718:	4885883a 	add	r2,r9,r2
   2a71c:	50c6c03a 	cmpne	r3,r10,r3
   2a720:	41cf803a 	cmpltu	r7,r8,r7
   2a724:	12400104 	addi	r9,r2,4
   2a728:	d8c00115 	stw	r3,4(sp)
   2a72c:	3909883a 	add	r4,r7,r4
   2a730:	da400215 	stw	r9,8(sp)
   2a734:	03480034 	movhi	r13,8192
   2a738:	6b7fffc4 	addi	r13,r13,-1
   2a73c:	4007883a 	mov	r3,r8
   2a740:	6900102e 	bgeu	r13,r4,2a784 <__muldf3+0x234>
   2a744:	10800144 	addi	r2,r2,5
   2a748:	180ed07a 	srli	r7,r3,1
   2a74c:	18c0004c 	andi	r3,r3,1
   2a750:	201097fa 	slli	r8,r4,31
   2a754:	281697fa 	slli	r11,r5,31
   2a758:	2008d07a 	srli	r4,r4,1
   2a75c:	3014d07a 	srli	r10,r6,1
   2a760:	2812d07a 	srli	r9,r5,1
   2a764:	1019883a 	mov	r12,r2
   2a768:	18000226 	beq	r3,zero,2a774 <__muldf3+0x224>
   2a76c:	5a8cb03a 	or	r6,r11,r10
   2a770:	49600034 	orhi	r5,r9,32768
   2a774:	41c6b03a 	or	r3,r8,r7
   2a778:	10800044 	addi	r2,r2,1
   2a77c:	693ff236 	bltu	r13,r4,2a748 <__muldf3+0x1f8>
   2a780:	db000215 	stw	r12,8(sp)
   2a784:	03440034 	movhi	r13,4096
   2a788:	6b7fffc4 	addi	r13,r13,-1
   2a78c:	69001336 	bltu	r13,r4,2a7dc <__muldf3+0x28c>
   2a790:	d8800217 	ldw	r2,8(sp)
   2a794:	10bfffc4 	addi	r2,r2,-1
   2a798:	18d3883a 	add	r9,r3,r3
   2a79c:	48c7803a 	cmpltu	r3,r9,r3
   2a7a0:	2109883a 	add	r4,r4,r4
   2a7a4:	190f883a 	add	r7,r3,r4
   2a7a8:	3191883a 	add	r8,r6,r6
   2a7ac:	4197803a 	cmpltu	r11,r8,r6
   2a7b0:	2955883a 	add	r10,r5,r5
   2a7b4:	1019883a 	mov	r12,r2
   2a7b8:	4807883a 	mov	r3,r9
   2a7bc:	3809883a 	mov	r4,r7
   2a7c0:	2800010e 	bge	r5,zero,2a7c8 <__muldf3+0x278>
   2a7c4:	48c00054 	ori	r3,r9,1
   2a7c8:	400d883a 	mov	r6,r8
   2a7cc:	5a8b883a 	add	r5,r11,r10
   2a7d0:	10bfffc4 	addi	r2,r2,-1
   2a7d4:	69fff02e 	bgeu	r13,r7,2a798 <__muldf3+0x248>
   2a7d8:	db000215 	stw	r12,8(sp)
   2a7dc:	18803fcc 	andi	r2,r3,255
   2a7e0:	01c02004 	movi	r7,128
   2a7e4:	11c00926 	beq	r2,r7,2a80c <__muldf3+0x2bc>
   2a7e8:	008000c4 	movi	r2,3
   2a7ec:	d9000415 	stw	r4,16(sp)
   2a7f0:	d8c00315 	stw	r3,12(sp)
   2a7f4:	d8800015 	stw	r2,0(sp)
   2a7f8:	d809883a 	mov	r4,sp
   2a7fc:	003f7006 	br	2a5c0 <__muldf3+0x70>
   2a800:	0011883a 	mov	r8,zero
   2a804:	00c00044 	movi	r3,1
   2a808:	003fb606 	br	2a6e4 <__muldf3+0x194>
   2a80c:	19c0400c 	andi	r7,r3,256
   2a810:	383ff51e 	bne	r7,zero,2a7e8 <__muldf3+0x298>
   2a814:	314ab03a 	or	r5,r6,r5
   2a818:	283ff326 	beq	r5,zero,2a7e8 <__muldf3+0x298>
   2a81c:	1885883a 	add	r2,r3,r2
   2a820:	10cb803a 	cmpltu	r5,r2,r3
   2a824:	00ffc004 	movi	r3,-256
   2a828:	10c6703a 	and	r3,r2,r3
   2a82c:	2909883a 	add	r4,r5,r4
   2a830:	003fed06 	br	2a7e8 <__muldf3+0x298>

0002a834 <__divdf3>:
   2a834:	defff104 	addi	sp,sp,-60
   2a838:	d9000c15 	stw	r4,48(sp)
   2a83c:	d9400d15 	stw	r5,52(sp)
   2a840:	d9000c04 	addi	r4,sp,48
   2a844:	d9400504 	addi	r5,sp,20
   2a848:	dfc00e15 	stw	ra,56(sp)
   2a84c:	d9800a15 	stw	r6,40(sp)
   2a850:	d9c00b15 	stw	r7,44(sp)
   2a854:	002b3980 	call	2b398 <__unpack_d>
   2a858:	d9000a04 	addi	r4,sp,40
   2a85c:	d80b883a 	mov	r5,sp
   2a860:	002b3980 	call	2b398 <__unpack_d>
   2a864:	d8c00517 	ldw	r3,20(sp)
   2a868:	00800044 	movi	r2,1
   2a86c:	10c00536 	bltu	r2,r3,2a884 <__divdf3+0x50>
   2a870:	d9000504 	addi	r4,sp,20
   2a874:	002b1740 	call	2b174 <__pack_d>
   2a878:	dfc00e17 	ldw	ra,56(sp)
   2a87c:	dec00f04 	addi	sp,sp,60
   2a880:	f800283a 	ret
   2a884:	d9000017 	ldw	r4,0(sp)
   2a888:	11000536 	bltu	r2,r4,2a8a0 <__divdf3+0x6c>
   2a88c:	d809883a 	mov	r4,sp
   2a890:	002b1740 	call	2b174 <__pack_d>
   2a894:	dfc00e17 	ldw	ra,56(sp)
   2a898:	dec00f04 	addi	sp,sp,60
   2a89c:	f800283a 	ret
   2a8a0:	d9800617 	ldw	r6,24(sp)
   2a8a4:	d9400117 	ldw	r5,4(sp)
   2a8a8:	00800104 	movi	r2,4
   2a8ac:	314af03a 	xor	r5,r6,r5
   2a8b0:	d9400615 	stw	r5,24(sp)
   2a8b4:	18800226 	beq	r3,r2,2a8c0 <__divdf3+0x8c>
   2a8b8:	01400084 	movi	r5,2
   2a8bc:	1940041e 	bne	r3,r5,2a8d0 <__divdf3+0x9c>
   2a8c0:	193feb1e 	bne	r3,r4,2a870 <__divdf3+0x3c>
   2a8c4:	010000f4 	movhi	r4,3
   2a8c8:	213b9704 	addi	r4,r4,-4516
   2a8cc:	003fe906 	br	2a874 <__divdf3+0x40>
   2a8d0:	20803326 	beq	r4,r2,2a9a0 <__divdf3+0x16c>
   2a8d4:	21403726 	beq	r4,r5,2a9b4 <__divdf3+0x180>
   2a8d8:	d8800217 	ldw	r2,8(sp)
   2a8dc:	d9000717 	ldw	r4,28(sp)
   2a8e0:	d8c00917 	ldw	r3,36(sp)
   2a8e4:	da000417 	ldw	r8,16(sp)
   2a8e8:	2089c83a 	sub	r4,r4,r2
   2a8ec:	d9000715 	stw	r4,28(sp)
   2a8f0:	d8800817 	ldw	r2,32(sp)
   2a8f4:	dbc00317 	ldw	r15,12(sp)
   2a8f8:	1a000236 	bltu	r3,r8,2a904 <__divdf3+0xd0>
   2a8fc:	40c0081e 	bne	r8,r3,2a920 <__divdf3+0xec>
   2a900:	13c0072e 	bgeu	r2,r15,2a920 <__divdf3+0xec>
   2a904:	108b883a 	add	r5,r2,r2
   2a908:	288d803a 	cmpltu	r6,r5,r2
   2a90c:	18c7883a 	add	r3,r3,r3
   2a910:	213fffc4 	addi	r4,r4,-1
   2a914:	2805883a 	mov	r2,r5
   2a918:	30c7883a 	add	r3,r6,r3
   2a91c:	d9000715 	stw	r4,28(sp)
   2a920:	01400f44 	movi	r5,61
   2a924:	000f883a 	mov	r7,zero
   2a928:	01040034 	movhi	r4,4096
   2a92c:	0019883a 	mov	r12,zero
   2a930:	001b883a 	mov	r13,zero
   2a934:	201697fa 	slli	r11,r4,31
   2a938:	3814d07a 	srli	r10,r7,1
   2a93c:	297fffc4 	addi	r5,r5,-1
   2a940:	1a000936 	bltu	r3,r8,2a968 <__divdf3+0x134>
   2a944:	13cdc83a 	sub	r6,r2,r15
   2a948:	1193803a 	cmpltu	r9,r2,r6
   2a94c:	1a1dc83a 	sub	r14,r3,r8
   2a950:	40c0011e 	bne	r8,r3,2a958 <__divdf3+0x124>
   2a954:	13c00436 	bltu	r2,r15,2a968 <__divdf3+0x134>
   2a958:	3005883a 	mov	r2,r6
   2a95c:	7247c83a 	sub	r3,r14,r9
   2a960:	61d8b03a 	or	r12,r12,r7
   2a964:	691ab03a 	or	r13,r13,r4
   2a968:	108d883a 	add	r6,r2,r2
   2a96c:	3093803a 	cmpltu	r9,r6,r2
   2a970:	18c7883a 	add	r3,r3,r3
   2a974:	5a8eb03a 	or	r7,r11,r10
   2a978:	2008d07a 	srli	r4,r4,1
   2a97c:	3005883a 	mov	r2,r6
   2a980:	48c7883a 	add	r3,r9,r3
   2a984:	283feb1e 	bne	r5,zero,2a934 <__divdf3+0x100>
   2a988:	61003fcc 	andi	r4,r12,255
   2a98c:	01402004 	movi	r5,128
   2a990:	21400b26 	beq	r4,r5,2a9c0 <__divdf3+0x18c>
   2a994:	db000815 	stw	r12,32(sp)
   2a998:	db400915 	stw	r13,36(sp)
   2a99c:	003fb406 	br	2a870 <__divdf3+0x3c>
   2a9a0:	d8000815 	stw	zero,32(sp)
   2a9a4:	d8000915 	stw	zero,36(sp)
   2a9a8:	d8000715 	stw	zero,28(sp)
   2a9ac:	d9000504 	addi	r4,sp,20
   2a9b0:	003fb006 	br	2a874 <__divdf3+0x40>
   2a9b4:	d8800515 	stw	r2,20(sp)
   2a9b8:	d9000504 	addi	r4,sp,20
   2a9bc:	003fad06 	br	2a874 <__divdf3+0x40>
   2a9c0:	6140400c 	andi	r5,r12,256
   2a9c4:	283ff31e 	bne	r5,zero,2a994 <__divdf3+0x160>
   2a9c8:	30c4b03a 	or	r2,r6,r3
   2a9cc:	103ff126 	beq	r2,zero,2a994 <__divdf3+0x160>
   2a9d0:	6109883a 	add	r4,r12,r4
   2a9d4:	2305803a 	cmpltu	r2,r4,r12
   2a9d8:	033fc004 	movi	r12,-256
   2a9dc:	2318703a 	and	r12,r4,r12
   2a9e0:	135b883a 	add	r13,r2,r13
   2a9e4:	003feb06 	br	2a994 <__divdf3+0x160>

0002a9e8 <__eqdf2>:
   2a9e8:	defff104 	addi	sp,sp,-60
   2a9ec:	d9000c15 	stw	r4,48(sp)
   2a9f0:	d9400d15 	stw	r5,52(sp)
   2a9f4:	d9000c04 	addi	r4,sp,48
   2a9f8:	d9400504 	addi	r5,sp,20
   2a9fc:	dfc00e15 	stw	ra,56(sp)
   2aa00:	d9800a15 	stw	r6,40(sp)
   2aa04:	d9c00b15 	stw	r7,44(sp)
   2aa08:	002b3980 	call	2b398 <__unpack_d>
   2aa0c:	d9000a04 	addi	r4,sp,40
   2aa10:	d80b883a 	mov	r5,sp
   2aa14:	002b3980 	call	2b398 <__unpack_d>
   2aa18:	d8c00517 	ldw	r3,20(sp)
   2aa1c:	00800044 	movi	r2,1
   2aa20:	10c0052e 	bgeu	r2,r3,2aa38 <__eqdf2+0x50>
   2aa24:	d8c00017 	ldw	r3,0(sp)
   2aa28:	10c0032e 	bgeu	r2,r3,2aa38 <__eqdf2+0x50>
   2aa2c:	d9000504 	addi	r4,sp,20
   2aa30:	d80b883a 	mov	r5,sp
   2aa34:	002b49c0 	call	2b49c <__fpcmp_parts_d>
   2aa38:	dfc00e17 	ldw	ra,56(sp)
   2aa3c:	dec00f04 	addi	sp,sp,60
   2aa40:	f800283a 	ret

0002aa44 <__nedf2>:
   2aa44:	defff104 	addi	sp,sp,-60
   2aa48:	d9000c15 	stw	r4,48(sp)
   2aa4c:	d9400d15 	stw	r5,52(sp)
   2aa50:	d9000c04 	addi	r4,sp,48
   2aa54:	d9400504 	addi	r5,sp,20
   2aa58:	dfc00e15 	stw	ra,56(sp)
   2aa5c:	d9800a15 	stw	r6,40(sp)
   2aa60:	d9c00b15 	stw	r7,44(sp)
   2aa64:	002b3980 	call	2b398 <__unpack_d>
   2aa68:	d9000a04 	addi	r4,sp,40
   2aa6c:	d80b883a 	mov	r5,sp
   2aa70:	002b3980 	call	2b398 <__unpack_d>
   2aa74:	d8c00517 	ldw	r3,20(sp)
   2aa78:	00800044 	movi	r2,1
   2aa7c:	10c0052e 	bgeu	r2,r3,2aa94 <__nedf2+0x50>
   2aa80:	d8c00017 	ldw	r3,0(sp)
   2aa84:	10c0032e 	bgeu	r2,r3,2aa94 <__nedf2+0x50>
   2aa88:	d9000504 	addi	r4,sp,20
   2aa8c:	d80b883a 	mov	r5,sp
   2aa90:	002b49c0 	call	2b49c <__fpcmp_parts_d>
   2aa94:	dfc00e17 	ldw	ra,56(sp)
   2aa98:	dec00f04 	addi	sp,sp,60
   2aa9c:	f800283a 	ret

0002aaa0 <__gtdf2>:
   2aaa0:	defff104 	addi	sp,sp,-60
   2aaa4:	d9000c15 	stw	r4,48(sp)
   2aaa8:	d9400d15 	stw	r5,52(sp)
   2aaac:	d9000c04 	addi	r4,sp,48
   2aab0:	d9400504 	addi	r5,sp,20
   2aab4:	dfc00e15 	stw	ra,56(sp)
   2aab8:	d9800a15 	stw	r6,40(sp)
   2aabc:	d9c00b15 	stw	r7,44(sp)
   2aac0:	002b3980 	call	2b398 <__unpack_d>
   2aac4:	d9000a04 	addi	r4,sp,40
   2aac8:	d80b883a 	mov	r5,sp
   2aacc:	002b3980 	call	2b398 <__unpack_d>
   2aad0:	d8c00517 	ldw	r3,20(sp)
   2aad4:	00800044 	movi	r2,1
   2aad8:	10c0082e 	bgeu	r2,r3,2aafc <__gtdf2+0x5c>
   2aadc:	d8c00017 	ldw	r3,0(sp)
   2aae0:	10c0062e 	bgeu	r2,r3,2aafc <__gtdf2+0x5c>
   2aae4:	d9000504 	addi	r4,sp,20
   2aae8:	d80b883a 	mov	r5,sp
   2aaec:	002b49c0 	call	2b49c <__fpcmp_parts_d>
   2aaf0:	dfc00e17 	ldw	ra,56(sp)
   2aaf4:	dec00f04 	addi	sp,sp,60
   2aaf8:	f800283a 	ret
   2aafc:	00bfffc4 	movi	r2,-1
   2ab00:	003ffb06 	br	2aaf0 <__gtdf2+0x50>

0002ab04 <__gedf2>:
   2ab04:	defff104 	addi	sp,sp,-60
   2ab08:	d9000c15 	stw	r4,48(sp)
   2ab0c:	d9400d15 	stw	r5,52(sp)
   2ab10:	d9000c04 	addi	r4,sp,48
   2ab14:	d9400504 	addi	r5,sp,20
   2ab18:	dfc00e15 	stw	ra,56(sp)
   2ab1c:	d9800a15 	stw	r6,40(sp)
   2ab20:	d9c00b15 	stw	r7,44(sp)
   2ab24:	002b3980 	call	2b398 <__unpack_d>
   2ab28:	d9000a04 	addi	r4,sp,40
   2ab2c:	d80b883a 	mov	r5,sp
   2ab30:	002b3980 	call	2b398 <__unpack_d>
   2ab34:	d8c00517 	ldw	r3,20(sp)
   2ab38:	00800044 	movi	r2,1
   2ab3c:	10c0082e 	bgeu	r2,r3,2ab60 <__gedf2+0x5c>
   2ab40:	d8c00017 	ldw	r3,0(sp)
   2ab44:	10c0062e 	bgeu	r2,r3,2ab60 <__gedf2+0x5c>
   2ab48:	d9000504 	addi	r4,sp,20
   2ab4c:	d80b883a 	mov	r5,sp
   2ab50:	002b49c0 	call	2b49c <__fpcmp_parts_d>
   2ab54:	dfc00e17 	ldw	ra,56(sp)
   2ab58:	dec00f04 	addi	sp,sp,60
   2ab5c:	f800283a 	ret
   2ab60:	00bfffc4 	movi	r2,-1
   2ab64:	003ffb06 	br	2ab54 <__gedf2+0x50>

0002ab68 <__ltdf2>:
   2ab68:	defff104 	addi	sp,sp,-60
   2ab6c:	d9000c15 	stw	r4,48(sp)
   2ab70:	d9400d15 	stw	r5,52(sp)
   2ab74:	d9000c04 	addi	r4,sp,48
   2ab78:	d9400504 	addi	r5,sp,20
   2ab7c:	dfc00e15 	stw	ra,56(sp)
   2ab80:	d9800a15 	stw	r6,40(sp)
   2ab84:	d9c00b15 	stw	r7,44(sp)
   2ab88:	002b3980 	call	2b398 <__unpack_d>
   2ab8c:	d9000a04 	addi	r4,sp,40
   2ab90:	d80b883a 	mov	r5,sp
   2ab94:	002b3980 	call	2b398 <__unpack_d>
   2ab98:	d8c00517 	ldw	r3,20(sp)
   2ab9c:	00800044 	movi	r2,1
   2aba0:	10c0052e 	bgeu	r2,r3,2abb8 <__ltdf2+0x50>
   2aba4:	d8c00017 	ldw	r3,0(sp)
   2aba8:	10c0032e 	bgeu	r2,r3,2abb8 <__ltdf2+0x50>
   2abac:	d9000504 	addi	r4,sp,20
   2abb0:	d80b883a 	mov	r5,sp
   2abb4:	002b49c0 	call	2b49c <__fpcmp_parts_d>
   2abb8:	dfc00e17 	ldw	ra,56(sp)
   2abbc:	dec00f04 	addi	sp,sp,60
   2abc0:	f800283a 	ret

0002abc4 <__floatsidf>:
   2abc4:	2004d7fa 	srli	r2,r4,31
   2abc8:	defff904 	addi	sp,sp,-28
   2abcc:	00c000c4 	movi	r3,3
   2abd0:	dfc00615 	stw	ra,24(sp)
   2abd4:	dc000515 	stw	r16,20(sp)
   2abd8:	d8c00015 	stw	r3,0(sp)
   2abdc:	d8800115 	stw	r2,4(sp)
   2abe0:	2000081e 	bne	r4,zero,2ac04 <__floatsidf+0x40>
   2abe4:	00800084 	movi	r2,2
   2abe8:	d8800015 	stw	r2,0(sp)
   2abec:	d809883a 	mov	r4,sp
   2abf0:	002b1740 	call	2b174 <__pack_d>
   2abf4:	dfc00617 	ldw	ra,24(sp)
   2abf8:	dc000517 	ldw	r16,20(sp)
   2abfc:	dec00704 	addi	sp,sp,28
   2ac00:	f800283a 	ret
   2ac04:	00c00f04 	movi	r3,60
   2ac08:	d8c00215 	stw	r3,8(sp)
   2ac0c:	10000f1e 	bne	r2,zero,2ac4c <__floatsidf+0x88>
   2ac10:	2021883a 	mov	r16,r4
   2ac14:	8009883a 	mov	r4,r16
   2ac18:	002b0c80 	call	2b0c8 <__clzsi2>
   2ac1c:	11000744 	addi	r4,r2,29
   2ac20:	0100110e 	bge	zero,r4,2ac68 <__floatsidf+0xa4>
   2ac24:	10ffff44 	addi	r3,r2,-3
   2ac28:	18001216 	blt	r3,zero,2ac74 <__floatsidf+0xb0>
   2ac2c:	80c6983a 	sll	r3,r16,r3
   2ac30:	0009883a 	mov	r4,zero
   2ac34:	014007c4 	movi	r5,31
   2ac38:	2885c83a 	sub	r2,r5,r2
   2ac3c:	d9000315 	stw	r4,12(sp)
   2ac40:	d8c00415 	stw	r3,16(sp)
   2ac44:	d8800215 	stw	r2,8(sp)
   2ac48:	003fe806 	br	2abec <__floatsidf+0x28>
   2ac4c:	00a00034 	movhi	r2,32768
   2ac50:	20800e26 	beq	r4,r2,2ac8c <__floatsidf+0xc8>
   2ac54:	0121c83a 	sub	r16,zero,r4
   2ac58:	8009883a 	mov	r4,r16
   2ac5c:	002b0c80 	call	2b0c8 <__clzsi2>
   2ac60:	11000744 	addi	r4,r2,29
   2ac64:	013fef16 	blt	zero,r4,2ac24 <__floatsidf+0x60>
   2ac68:	dc000315 	stw	r16,12(sp)
   2ac6c:	d8000415 	stw	zero,16(sp)
   2ac70:	003fde06 	br	2abec <__floatsidf+0x28>
   2ac74:	800ad07a 	srli	r5,r16,1
   2ac78:	00c007c4 	movi	r3,31
   2ac7c:	1907c83a 	sub	r3,r3,r4
   2ac80:	28c6d83a 	srl	r3,r5,r3
   2ac84:	8108983a 	sll	r4,r16,r4
   2ac88:	003fea06 	br	2ac34 <__floatsidf+0x70>
   2ac8c:	0005883a 	mov	r2,zero
   2ac90:	00f07834 	movhi	r3,49632
   2ac94:	003fd706 	br	2abf4 <__floatsidf+0x30>

0002ac98 <__fixdfsi>:
   2ac98:	defff804 	addi	sp,sp,-32
   2ac9c:	d9000515 	stw	r4,20(sp)
   2aca0:	d9400615 	stw	r5,24(sp)
   2aca4:	d9000504 	addi	r4,sp,20
   2aca8:	d80b883a 	mov	r5,sp
   2acac:	dfc00715 	stw	ra,28(sp)
   2acb0:	002b3980 	call	2b398 <__unpack_d>
   2acb4:	d8800017 	ldw	r2,0(sp)
   2acb8:	00c00084 	movi	r3,2
   2acbc:	10c01c26 	beq	r2,r3,2ad30 <__fixdfsi+0x98>
   2acc0:	00c00044 	movi	r3,1
   2acc4:	18801a2e 	bgeu	r3,r2,2ad30 <__fixdfsi+0x98>
   2acc8:	00c00104 	movi	r3,4
   2accc:	10c01126 	beq	r2,r3,2ad14 <__fixdfsi+0x7c>
   2acd0:	d8800217 	ldw	r2,8(sp)
   2acd4:	10001616 	blt	r2,zero,2ad30 <__fixdfsi+0x98>
   2acd8:	00c00784 	movi	r3,30
   2acdc:	18800d16 	blt	r3,r2,2ad14 <__fixdfsi+0x7c>
   2ace0:	00c00f04 	movi	r3,60
   2ace4:	1885c83a 	sub	r2,r3,r2
   2ace8:	10fff804 	addi	r3,r2,-32
   2acec:	d9400317 	ldw	r5,12(sp)
   2acf0:	d9000417 	ldw	r4,16(sp)
   2acf4:	18001616 	blt	r3,zero,2ad50 <__fixdfsi+0xb8>
   2acf8:	20c4d83a 	srl	r2,r4,r3
   2acfc:	d8c00117 	ldw	r3,4(sp)
   2ad00:	18000126 	beq	r3,zero,2ad08 <__fixdfsi+0x70>
   2ad04:	0085c83a 	sub	r2,zero,r2
   2ad08:	dfc00717 	ldw	ra,28(sp)
   2ad0c:	dec00804 	addi	sp,sp,32
   2ad10:	f800283a 	ret
   2ad14:	d8800117 	ldw	r2,4(sp)
   2ad18:	1000091e 	bne	r2,zero,2ad40 <__fixdfsi+0xa8>
   2ad1c:	00a00034 	movhi	r2,32768
   2ad20:	10bfffc4 	addi	r2,r2,-1
   2ad24:	dfc00717 	ldw	ra,28(sp)
   2ad28:	dec00804 	addi	sp,sp,32
   2ad2c:	f800283a 	ret
   2ad30:	0005883a 	mov	r2,zero
   2ad34:	dfc00717 	ldw	ra,28(sp)
   2ad38:	dec00804 	addi	sp,sp,32
   2ad3c:	f800283a 	ret
   2ad40:	00a00034 	movhi	r2,32768
   2ad44:	dfc00717 	ldw	ra,28(sp)
   2ad48:	dec00804 	addi	sp,sp,32
   2ad4c:	f800283a 	ret
   2ad50:	2008907a 	slli	r4,r4,1
   2ad54:	018007c4 	movi	r6,31
   2ad58:	308dc83a 	sub	r6,r6,r2
   2ad5c:	2188983a 	sll	r4,r4,r6
   2ad60:	2884d83a 	srl	r2,r5,r2
   2ad64:	2084b03a 	or	r2,r4,r2
   2ad68:	003fe406 	br	2acfc <__fixdfsi+0x64>

0002ad6c <__floatunsidf>:
   2ad6c:	defff904 	addi	sp,sp,-28
   2ad70:	dc000515 	stw	r16,20(sp)
   2ad74:	dfc00615 	stw	ra,24(sp)
   2ad78:	d8000115 	stw	zero,4(sp)
   2ad7c:	2021883a 	mov	r16,r4
   2ad80:	20001726 	beq	r4,zero,2ade0 <__floatunsidf+0x74>
   2ad84:	008000c4 	movi	r2,3
   2ad88:	d8800015 	stw	r2,0(sp)
   2ad8c:	00800f04 	movi	r2,60
   2ad90:	d8800215 	stw	r2,8(sp)
   2ad94:	002b0c80 	call	2b0c8 <__clzsi2>
   2ad98:	10c00744 	addi	r3,r2,29
   2ad9c:	18001816 	blt	r3,zero,2ae00 <__floatunsidf+0x94>
   2ada0:	18002d26 	beq	r3,zero,2ae58 <__floatunsidf+0xec>
   2ada4:	113fff44 	addi	r4,r2,-3
   2ada8:	20002e16 	blt	r4,zero,2ae64 <__floatunsidf+0xf8>
   2adac:	8108983a 	sll	r4,r16,r4
   2adb0:	0021883a 	mov	r16,zero
   2adb4:	014007c4 	movi	r5,31
   2adb8:	2885c83a 	sub	r2,r5,r2
   2adbc:	dc000315 	stw	r16,12(sp)
   2adc0:	d9000415 	stw	r4,16(sp)
   2adc4:	d8800215 	stw	r2,8(sp)
   2adc8:	d809883a 	mov	r4,sp
   2adcc:	002b1740 	call	2b174 <__pack_d>
   2add0:	dfc00617 	ldw	ra,24(sp)
   2add4:	dc000517 	ldw	r16,20(sp)
   2add8:	dec00704 	addi	sp,sp,28
   2addc:	f800283a 	ret
   2ade0:	00800084 	movi	r2,2
   2ade4:	d809883a 	mov	r4,sp
   2ade8:	d8800015 	stw	r2,0(sp)
   2adec:	002b1740 	call	2b174 <__pack_d>
   2adf0:	dfc00617 	ldw	ra,24(sp)
   2adf4:	dc000517 	ldw	r16,20(sp)
   2adf8:	dec00704 	addi	sp,sp,28
   2adfc:	f800283a 	ret
   2ae00:	00c7c83a 	sub	r3,zero,r3
   2ae04:	193ff804 	addi	r4,r3,-32
   2ae08:	20001c16 	blt	r4,zero,2ae7c <__floatunsidf+0x110>
   2ae0c:	000b883a 	mov	r5,zero
   2ae10:	2009d7fa 	srai	r4,r4,31
   2ae14:	80c6d83a 	srl	r3,r16,r3
   2ae18:	297fffc4 	addi	r5,r5,-1
   2ae1c:	2c20703a 	and	r16,r5,r16
   2ae20:	8020c03a 	cmpne	r16,r16,zero
   2ae24:	1906703a 	and	r3,r3,r4
   2ae28:	010007c4 	movi	r4,31
   2ae2c:	80c6b03a 	or	r3,r16,r3
   2ae30:	2085c83a 	sub	r2,r4,r2
   2ae34:	d809883a 	mov	r4,sp
   2ae38:	d8c00315 	stw	r3,12(sp)
   2ae3c:	d8000415 	stw	zero,16(sp)
   2ae40:	d8800215 	stw	r2,8(sp)
   2ae44:	002b1740 	call	2b174 <__pack_d>
   2ae48:	dfc00617 	ldw	ra,24(sp)
   2ae4c:	dc000517 	ldw	r16,20(sp)
   2ae50:	dec00704 	addi	sp,sp,28
   2ae54:	f800283a 	ret
   2ae58:	dc000315 	stw	r16,12(sp)
   2ae5c:	d8000415 	stw	zero,16(sp)
   2ae60:	003fd906 	br	2adc8 <__floatunsidf+0x5c>
   2ae64:	800ad07a 	srli	r5,r16,1
   2ae68:	010007c4 	movi	r4,31
   2ae6c:	20c9c83a 	sub	r4,r4,r3
   2ae70:	2908d83a 	srl	r4,r5,r4
   2ae74:	80e0983a 	sll	r16,r16,r3
   2ae78:	003fce06 	br	2adb4 <__floatunsidf+0x48>
   2ae7c:	01400044 	movi	r5,1
   2ae80:	28ca983a 	sll	r5,r5,r3
   2ae84:	003fe206 	br	2ae10 <__floatunsidf+0xa4>

0002ae88 <udivmodsi4>:
   2ae88:	2005883a 	mov	r2,r4
   2ae8c:	2900182e 	bgeu	r5,r4,2aef0 <udivmodsi4+0x68>
   2ae90:	28001716 	blt	r5,zero,2aef0 <udivmodsi4+0x68>
   2ae94:	01000804 	movi	r4,32
   2ae98:	00c00044 	movi	r3,1
   2ae9c:	00000206 	br	2aea8 <udivmodsi4+0x20>
   2aea0:	20001126 	beq	r4,zero,2aee8 <udivmodsi4+0x60>
   2aea4:	28000516 	blt	r5,zero,2aebc <udivmodsi4+0x34>
   2aea8:	294b883a 	add	r5,r5,r5
   2aeac:	213fffc4 	addi	r4,r4,-1
   2aeb0:	18c7883a 	add	r3,r3,r3
   2aeb4:	28bffa36 	bltu	r5,r2,2aea0 <udivmodsi4+0x18>
   2aeb8:	18000b26 	beq	r3,zero,2aee8 <udivmodsi4+0x60>
   2aebc:	0009883a 	mov	r4,zero
   2aec0:	11400236 	bltu	r2,r5,2aecc <udivmodsi4+0x44>
   2aec4:	1145c83a 	sub	r2,r2,r5
   2aec8:	20c8b03a 	or	r4,r4,r3
   2aecc:	1806d07a 	srli	r3,r3,1
   2aed0:	280ad07a 	srli	r5,r5,1
   2aed4:	183ffa1e 	bne	r3,zero,2aec0 <udivmodsi4+0x38>
   2aed8:	3000021e 	bne	r6,zero,2aee4 <udivmodsi4+0x5c>
   2aedc:	2005883a 	mov	r2,r4
   2aee0:	f800283a 	ret
   2aee4:	f800283a 	ret
   2aee8:	0009883a 	mov	r4,zero
   2aeec:	003ffa06 	br	2aed8 <udivmodsi4+0x50>
   2aef0:	00c00044 	movi	r3,1
   2aef4:	0009883a 	mov	r4,zero
   2aef8:	003ff106 	br	2aec0 <udivmodsi4+0x38>

0002aefc <__divsi3>:
   2aefc:	defffe04 	addi	sp,sp,-8
   2af00:	dfc00115 	stw	ra,4(sp)
   2af04:	dc000015 	stw	r16,0(sp)
   2af08:	20000a16 	blt	r4,zero,2af34 <__divsi3+0x38>
   2af0c:	0021883a 	mov	r16,zero
   2af10:	28000b16 	blt	r5,zero,2af40 <__divsi3+0x44>
   2af14:	000d883a 	mov	r6,zero
   2af18:	002ae880 	call	2ae88 <udivmodsi4>
   2af1c:	80000126 	beq	r16,zero,2af24 <__divsi3+0x28>
   2af20:	0085c83a 	sub	r2,zero,r2
   2af24:	dfc00117 	ldw	ra,4(sp)
   2af28:	dc000017 	ldw	r16,0(sp)
   2af2c:	dec00204 	addi	sp,sp,8
   2af30:	f800283a 	ret
   2af34:	0109c83a 	sub	r4,zero,r4
   2af38:	04000044 	movi	r16,1
   2af3c:	283ff50e 	bge	r5,zero,2af14 <__divsi3+0x18>
   2af40:	014bc83a 	sub	r5,zero,r5
   2af44:	8400005c 	xori	r16,r16,1
   2af48:	003ff206 	br	2af14 <__divsi3+0x18>

0002af4c <__modsi3>:
   2af4c:	deffff04 	addi	sp,sp,-4
   2af50:	dfc00015 	stw	ra,0(sp)
   2af54:	20000516 	blt	r4,zero,2af6c <__modsi3+0x20>
   2af58:	28000c16 	blt	r5,zero,2af8c <__modsi3+0x40>
   2af5c:	01800044 	movi	r6,1
   2af60:	dfc00017 	ldw	ra,0(sp)
   2af64:	dec00104 	addi	sp,sp,4
   2af68:	002ae881 	jmpi	2ae88 <udivmodsi4>
   2af6c:	0109c83a 	sub	r4,zero,r4
   2af70:	28000b16 	blt	r5,zero,2afa0 <__modsi3+0x54>
   2af74:	01800044 	movi	r6,1
   2af78:	002ae880 	call	2ae88 <udivmodsi4>
   2af7c:	0085c83a 	sub	r2,zero,r2
   2af80:	dfc00017 	ldw	ra,0(sp)
   2af84:	dec00104 	addi	sp,sp,4
   2af88:	f800283a 	ret
   2af8c:	014bc83a 	sub	r5,zero,r5
   2af90:	01800044 	movi	r6,1
   2af94:	dfc00017 	ldw	ra,0(sp)
   2af98:	dec00104 	addi	sp,sp,4
   2af9c:	002ae881 	jmpi	2ae88 <udivmodsi4>
   2afa0:	014bc83a 	sub	r5,zero,r5
   2afa4:	003ff306 	br	2af74 <__modsi3+0x28>

0002afa8 <__udivsi3>:
   2afa8:	000d883a 	mov	r6,zero
   2afac:	002ae881 	jmpi	2ae88 <udivmodsi4>

0002afb0 <__umodsi3>:
   2afb0:	01800044 	movi	r6,1
   2afb4:	002ae881 	jmpi	2ae88 <udivmodsi4>

0002afb8 <__muldi3>:
   2afb8:	defff604 	addi	sp,sp,-40
   2afbc:	dd400515 	stw	r21,20(sp)
   2afc0:	dd000415 	stw	r20,16(sp)
   2afc4:	257fffcc 	andi	r21,r4,65535
   2afc8:	353fffcc 	andi	r20,r6,65535
   2afcc:	dcc00315 	stw	r19,12(sp)
   2afd0:	3026d43a 	srli	r19,r6,16
   2afd4:	dd800615 	stw	r22,24(sp)
   2afd8:	dc800215 	stw	r18,8(sp)
   2afdc:	dc400115 	stw	r17,4(sp)
   2afe0:	2024d43a 	srli	r18,r4,16
   2afe4:	2023883a 	mov	r17,r4
   2afe8:	282d883a 	mov	r22,r5
   2afec:	a009883a 	mov	r4,r20
   2aff0:	a80b883a 	mov	r5,r21
   2aff4:	dfc00915 	stw	ra,36(sp)
   2aff8:	df000815 	stw	fp,32(sp)
   2affc:	ddc00715 	stw	r23,28(sp)
   2b000:	3839883a 	mov	fp,r7
   2b004:	dc000015 	stw	r16,0(sp)
   2b008:	3021883a 	mov	r16,r6
   2b00c:	00212100 	call	21210 <__mulsi3>
   2b010:	a80b883a 	mov	r5,r21
   2b014:	9809883a 	mov	r4,r19
   2b018:	102f883a 	mov	r23,r2
   2b01c:	00212100 	call	21210 <__mulsi3>
   2b020:	a009883a 	mov	r4,r20
   2b024:	900b883a 	mov	r5,r18
   2b028:	102b883a 	mov	r21,r2
   2b02c:	00212100 	call	21210 <__mulsi3>
   2b030:	9809883a 	mov	r4,r19
   2b034:	900b883a 	mov	r5,r18
   2b038:	1029883a 	mov	r20,r2
   2b03c:	00212100 	call	21210 <__mulsi3>
   2b040:	1007883a 	mov	r3,r2
   2b044:	b804d43a 	srli	r2,r23,16
   2b048:	a549883a 	add	r4,r20,r21
   2b04c:	2089883a 	add	r4,r4,r2
   2b050:	2500022e 	bgeu	r4,r20,2b05c <__muldi3+0xa4>
   2b054:	00800074 	movhi	r2,1
   2b058:	1887883a 	add	r3,r3,r2
   2b05c:	200cd43a 	srli	r6,r4,16
   2b060:	2004943a 	slli	r2,r4,16
   2b064:	e00b883a 	mov	r5,fp
   2b068:	8809883a 	mov	r4,r17
   2b06c:	bdffffcc 	andi	r23,r23,65535
   2b070:	19a3883a 	add	r17,r3,r6
   2b074:	15ef883a 	add	r23,r2,r23
   2b078:	00212100 	call	21210 <__mulsi3>
   2b07c:	8009883a 	mov	r4,r16
   2b080:	b00b883a 	mov	r5,r22
   2b084:	1025883a 	mov	r18,r2
   2b088:	00212100 	call	21210 <__mulsi3>
   2b08c:	9085883a 	add	r2,r18,r2
   2b090:	1447883a 	add	r3,r2,r17
   2b094:	b805883a 	mov	r2,r23
   2b098:	dfc00917 	ldw	ra,36(sp)
   2b09c:	df000817 	ldw	fp,32(sp)
   2b0a0:	ddc00717 	ldw	r23,28(sp)
   2b0a4:	dd800617 	ldw	r22,24(sp)
   2b0a8:	dd400517 	ldw	r21,20(sp)
   2b0ac:	dd000417 	ldw	r20,16(sp)
   2b0b0:	dcc00317 	ldw	r19,12(sp)
   2b0b4:	dc800217 	ldw	r18,8(sp)
   2b0b8:	dc400117 	ldw	r17,4(sp)
   2b0bc:	dc000017 	ldw	r16,0(sp)
   2b0c0:	dec00a04 	addi	sp,sp,40
   2b0c4:	f800283a 	ret

0002b0c8 <__clzsi2>:
   2b0c8:	00bfffd4 	movui	r2,65535
   2b0cc:	11000b36 	bltu	r2,r4,2b0fc <__clzsi2+0x34>
   2b0d0:	00803fc4 	movi	r2,255
   2b0d4:	11001e2e 	bgeu	r2,r4,2b150 <__clzsi2+0x88>
   2b0d8:	00c00204 	movi	r3,8
   2b0dc:	20c8d83a 	srl	r4,r4,r3
   2b0e0:	00c000f4 	movhi	r3,3
   2b0e4:	18fb9c04 	addi	r3,r3,-4496
   2b0e8:	00800604 	movi	r2,24
   2b0ec:	1909883a 	add	r4,r3,r4
   2b0f0:	20c00003 	ldbu	r3,0(r4)
   2b0f4:	10c5c83a 	sub	r2,r2,r3
   2b0f8:	f800283a 	ret
   2b0fc:	00804034 	movhi	r2,256
   2b100:	10bfffc4 	addi	r2,r2,-1
   2b104:	11000936 	bltu	r2,r4,2b12c <__clzsi2+0x64>
   2b108:	00800404 	movi	r2,16
   2b10c:	1007883a 	mov	r3,r2
   2b110:	20c8d83a 	srl	r4,r4,r3
   2b114:	00c000f4 	movhi	r3,3
   2b118:	18fb9c04 	addi	r3,r3,-4496
   2b11c:	1909883a 	add	r4,r3,r4
   2b120:	20c00003 	ldbu	r3,0(r4)
   2b124:	10c5c83a 	sub	r2,r2,r3
   2b128:	f800283a 	ret
   2b12c:	00c00604 	movi	r3,24
   2b130:	20c8d83a 	srl	r4,r4,r3
   2b134:	00c000f4 	movhi	r3,3
   2b138:	18fb9c04 	addi	r3,r3,-4496
   2b13c:	00800204 	movi	r2,8
   2b140:	1909883a 	add	r4,r3,r4
   2b144:	20c00003 	ldbu	r3,0(r4)
   2b148:	10c5c83a 	sub	r2,r2,r3
   2b14c:	f800283a 	ret
   2b150:	0007883a 	mov	r3,zero
   2b154:	20c8d83a 	srl	r4,r4,r3
   2b158:	00c000f4 	movhi	r3,3
   2b15c:	18fb9c04 	addi	r3,r3,-4496
   2b160:	00800804 	movi	r2,32
   2b164:	1909883a 	add	r4,r3,r4
   2b168:	20c00003 	ldbu	r3,0(r4)
   2b16c:	10c5c83a 	sub	r2,r2,r3
   2b170:	f800283a 	ret

0002b174 <__pack_d>:
   2b174:	20800017 	ldw	r2,0(r4)
   2b178:	defff804 	addi	sp,sp,-32
   2b17c:	dcc00315 	stw	r19,12(sp)
   2b180:	dc800215 	stw	r18,8(sp)
   2b184:	dfc00715 	stw	ra,28(sp)
   2b188:	dd800615 	stw	r22,24(sp)
   2b18c:	dd400515 	stw	r21,20(sp)
   2b190:	dd000415 	stw	r20,16(sp)
   2b194:	dc400115 	stw	r17,4(sp)
   2b198:	dc000015 	stw	r16,0(sp)
   2b19c:	04800044 	movi	r18,1
   2b1a0:	24400317 	ldw	r17,12(r4)
   2b1a4:	24000417 	ldw	r16,16(r4)
   2b1a8:	24c00117 	ldw	r19,4(r4)
   2b1ac:	9080422e 	bgeu	r18,r2,2b2b8 <__pack_d+0x144>
   2b1b0:	00c00104 	movi	r3,4
   2b1b4:	10c03c26 	beq	r2,r3,2b2a8 <__pack_d+0x134>
   2b1b8:	00c00084 	movi	r3,2
   2b1bc:	10c01926 	beq	r2,r3,2b224 <__pack_d+0xb0>
   2b1c0:	8c04b03a 	or	r2,r17,r16
   2b1c4:	10001726 	beq	r2,zero,2b224 <__pack_d+0xb0>
   2b1c8:	21000217 	ldw	r4,8(r4)
   2b1cc:	00bf0084 	movi	r2,-1022
   2b1d0:	20804016 	blt	r4,r2,2b2d4 <__pack_d+0x160>
   2b1d4:	0080ffc4 	movi	r2,1023
   2b1d8:	11003316 	blt	r2,r4,2b2a8 <__pack_d+0x134>
   2b1dc:	88803fcc 	andi	r2,r17,255
   2b1e0:	00c02004 	movi	r3,128
   2b1e4:	10c02926 	beq	r2,r3,2b28c <__pack_d+0x118>
   2b1e8:	88801fc4 	addi	r2,r17,127
   2b1ec:	1463803a 	cmpltu	r17,r2,r17
   2b1f0:	8c21883a 	add	r16,r17,r16
   2b1f4:	1023883a 	mov	r17,r2
   2b1f8:	00880034 	movhi	r2,8192
   2b1fc:	10bfffc4 	addi	r2,r2,-1
   2b200:	14001c36 	bltu	r2,r16,2b274 <__pack_d+0x100>
   2b204:	2100ffc4 	addi	r4,r4,1023
   2b208:	8006963a 	slli	r3,r16,24
   2b20c:	8804d23a 	srli	r2,r17,8
   2b210:	8020913a 	slli	r16,r16,4
   2b214:	2101ffcc 	andi	r4,r4,2047
   2b218:	1884b03a 	or	r2,r3,r2
   2b21c:	8020d33a 	srli	r16,r16,12
   2b220:	00000306 	br	2b230 <__pack_d+0xbc>
   2b224:	0009883a 	mov	r4,zero
   2b228:	0005883a 	mov	r2,zero
   2b22c:	0021883a 	mov	r16,zero
   2b230:	2008953a 	slli	r4,r4,20
   2b234:	982697fa 	slli	r19,r19,31
   2b238:	00c00434 	movhi	r3,16
   2b23c:	18ffffc4 	addi	r3,r3,-1
   2b240:	80e0703a 	and	r16,r16,r3
   2b244:	8106b03a 	or	r3,r16,r4
   2b248:	1cc6b03a 	or	r3,r3,r19
   2b24c:	dfc00717 	ldw	ra,28(sp)
   2b250:	dd800617 	ldw	r22,24(sp)
   2b254:	dd400517 	ldw	r21,20(sp)
   2b258:	dd000417 	ldw	r20,16(sp)
   2b25c:	dcc00317 	ldw	r19,12(sp)
   2b260:	dc800217 	ldw	r18,8(sp)
   2b264:	dc400117 	ldw	r17,4(sp)
   2b268:	dc000017 	ldw	r16,0(sp)
   2b26c:	dec00804 	addi	sp,sp,32
   2b270:	f800283a 	ret
   2b274:	800697fa 	slli	r3,r16,31
   2b278:	8804d07a 	srli	r2,r17,1
   2b27c:	21010004 	addi	r4,r4,1024
   2b280:	8020d07a 	srli	r16,r16,1
   2b284:	18a2b03a 	or	r17,r3,r2
   2b288:	003fdf06 	br	2b208 <__pack_d+0x94>
   2b28c:	88c0400c 	andi	r3,r17,256
   2b290:	183fd926 	beq	r3,zero,2b1f8 <__pack_d+0x84>
   2b294:	8885883a 	add	r2,r17,r2
   2b298:	1463803a 	cmpltu	r17,r2,r17
   2b29c:	8c21883a 	add	r16,r17,r16
   2b2a0:	1023883a 	mov	r17,r2
   2b2a4:	003fd406 	br	2b1f8 <__pack_d+0x84>
   2b2a8:	0101ffc4 	movi	r4,2047
   2b2ac:	0005883a 	mov	r2,zero
   2b2b0:	0021883a 	mov	r16,zero
   2b2b4:	003fde06 	br	2b230 <__pack_d+0xbc>
   2b2b8:	84000234 	orhi	r16,r16,8
   2b2bc:	00c00434 	movhi	r3,16
   2b2c0:	18ffffc4 	addi	r3,r3,-1
   2b2c4:	8805883a 	mov	r2,r17
   2b2c8:	80e0703a 	and	r16,r16,r3
   2b2cc:	0101ffc4 	movi	r4,2047
   2b2d0:	003fd706 	br	2b230 <__pack_d+0xbc>
   2b2d4:	1129c83a 	sub	r20,r2,r4
   2b2d8:	00800e04 	movi	r2,56
   2b2dc:	15002716 	blt	r2,r20,2b37c <__pack_d+0x208>
   2b2e0:	800b883a 	mov	r5,r16
   2b2e4:	a00d883a 	mov	r6,r20
   2b2e8:	8809883a 	mov	r4,r17
   2b2ec:	002b56c0 	call	2b56c <__lshrdi3>
   2b2f0:	9009883a 	mov	r4,r18
   2b2f4:	000b883a 	mov	r5,zero
   2b2f8:	a00d883a 	mov	r6,r20
   2b2fc:	102d883a 	mov	r22,r2
   2b300:	182b883a 	mov	r21,r3
   2b304:	002b5b00 	call	2b5b0 <__ashldi3>
   2b308:	1009003a 	cmpeq	r4,r2,zero
   2b30c:	1907c83a 	sub	r3,r3,r4
   2b310:	10bfffc4 	addi	r2,r2,-1
   2b314:	1c20703a 	and	r16,r3,r16
   2b318:	1444703a 	and	r2,r2,r17
   2b31c:	1404b03a 	or	r2,r2,r16
   2b320:	1004c03a 	cmpne	r2,r2,zero
   2b324:	1584b03a 	or	r2,r2,r22
   2b328:	11003fcc 	andi	r4,r2,255
   2b32c:	01402004 	movi	r5,128
   2b330:	a807883a 	mov	r3,r21
   2b334:	2140131e 	bne	r4,r5,2b384 <__pack_d+0x210>
   2b338:	1140400c 	andi	r5,r2,256
   2b33c:	28000426 	beq	r5,zero,2b350 <__pack_d+0x1dc>
   2b340:	1109883a 	add	r4,r2,r4
   2b344:	2085803a 	cmpltu	r2,r4,r2
   2b348:	1547883a 	add	r3,r2,r21
   2b34c:	2005883a 	mov	r2,r4
   2b350:	1808963a 	slli	r4,r3,24
   2b354:	1004d23a 	srli	r2,r2,8
   2b358:	1820913a 	slli	r16,r3,4
   2b35c:	01440034 	movhi	r5,4096
   2b360:	297fffc4 	addi	r5,r5,-1
   2b364:	2084b03a 	or	r2,r4,r2
   2b368:	8020d33a 	srli	r16,r16,12
   2b36c:	01000044 	movi	r4,1
   2b370:	28ffaf36 	bltu	r5,r3,2b230 <__pack_d+0xbc>
   2b374:	0009883a 	mov	r4,zero
   2b378:	003fad06 	br	2b230 <__pack_d+0xbc>
   2b37c:	0005883a 	mov	r2,zero
   2b380:	0007883a 	mov	r3,zero
   2b384:	11001fc4 	addi	r4,r2,127
   2b388:	2085803a 	cmpltu	r2,r4,r2
   2b38c:	10c7883a 	add	r3,r2,r3
   2b390:	2005883a 	mov	r2,r4
   2b394:	003fee06 	br	2b350 <__pack_d+0x1dc>

0002b398 <__unpack_d>:
   2b398:	21800117 	ldw	r6,4(r4)
   2b39c:	20c00017 	ldw	r3,0(r4)
   2b3a0:	3004d7fa 	srli	r2,r6,31
   2b3a4:	3008d53a 	srli	r4,r6,20
   2b3a8:	28800115 	stw	r2,4(r5)
   2b3ac:	2101ffcc 	andi	r4,r4,2047
   2b3b0:	00800434 	movhi	r2,16
   2b3b4:	10bfffc4 	addi	r2,r2,-1
   2b3b8:	3084703a 	and	r2,r6,r2
   2b3bc:	20001a1e 	bne	r4,zero,2b428 <__unpack_d+0x90>
   2b3c0:	1888b03a 	or	r4,r3,r2
   2b3c4:	20002626 	beq	r4,zero,2b460 <__unpack_d+0xc8>
   2b3c8:	1808d63a 	srli	r4,r3,24
   2b3cc:	1004923a 	slli	r2,r2,8
   2b3d0:	01bf0084 	movi	r6,-1022
   2b3d4:	29800215 	stw	r6,8(r5)
   2b3d8:	2084b03a 	or	r2,r4,r2
   2b3dc:	010000c4 	movi	r4,3
   2b3e0:	29000015 	stw	r4,0(r5)
   2b3e4:	02040034 	movhi	r8,4096
   2b3e8:	423fffc4 	addi	r8,r8,-1
   2b3ec:	1806923a 	slli	r3,r3,8
   2b3f0:	40801836 	bltu	r8,r2,2b454 <__unpack_d+0xbc>
   2b3f4:	013f0044 	movi	r4,-1023
   2b3f8:	18cd883a 	add	r6,r3,r3
   2b3fc:	30c7803a 	cmpltu	r3,r6,r3
   2b400:	1085883a 	add	r2,r2,r2
   2b404:	1885883a 	add	r2,r3,r2
   2b408:	200f883a 	mov	r7,r4
   2b40c:	3007883a 	mov	r3,r6
   2b410:	213fffc4 	addi	r4,r4,-1
   2b414:	40bff82e 	bgeu	r8,r2,2b3f8 <__unpack_d+0x60>
   2b418:	29c00215 	stw	r7,8(r5)
   2b41c:	28c00315 	stw	r3,12(r5)
   2b420:	28800415 	stw	r2,16(r5)
   2b424:	f800283a 	ret
   2b428:	01c1ffc4 	movi	r7,2047
   2b42c:	21c00f26 	beq	r4,r7,2b46c <__unpack_d+0xd4>
   2b430:	180cd63a 	srli	r6,r3,24
   2b434:	1004923a 	slli	r2,r2,8
   2b438:	213f0044 	addi	r4,r4,-1023
   2b43c:	1806923a 	slli	r3,r3,8
   2b440:	3084b03a 	or	r2,r6,r2
   2b444:	29000215 	stw	r4,8(r5)
   2b448:	010000c4 	movi	r4,3
   2b44c:	10840034 	orhi	r2,r2,4096
   2b450:	29000015 	stw	r4,0(r5)
   2b454:	28c00315 	stw	r3,12(r5)
   2b458:	28800415 	stw	r2,16(r5)
   2b45c:	f800283a 	ret
   2b460:	00800084 	movi	r2,2
   2b464:	28800015 	stw	r2,0(r5)
   2b468:	f800283a 	ret
   2b46c:	1888b03a 	or	r4,r3,r2
   2b470:	20000526 	beq	r4,zero,2b488 <__unpack_d+0xf0>
   2b474:	3180022c 	andhi	r6,r6,8
   2b478:	30000626 	beq	r6,zero,2b494 <__unpack_d+0xfc>
   2b47c:	01000044 	movi	r4,1
   2b480:	29000015 	stw	r4,0(r5)
   2b484:	003ff306 	br	2b454 <__unpack_d+0xbc>
   2b488:	00800104 	movi	r2,4
   2b48c:	28800015 	stw	r2,0(r5)
   2b490:	f800283a 	ret
   2b494:	28000015 	stw	zero,0(r5)
   2b498:	003fee06 	br	2b454 <__unpack_d+0xbc>

0002b49c <__fpcmp_parts_d>:
   2b49c:	20c00017 	ldw	r3,0(r4)
   2b4a0:	00800044 	movi	r2,1
   2b4a4:	10c0142e 	bgeu	r2,r3,2b4f8 <__fpcmp_parts_d+0x5c>
   2b4a8:	29800017 	ldw	r6,0(r5)
   2b4ac:	1180122e 	bgeu	r2,r6,2b4f8 <__fpcmp_parts_d+0x5c>
   2b4b0:	01c00104 	movi	r7,4
   2b4b4:	19c02826 	beq	r3,r7,2b558 <__fpcmp_parts_d+0xbc>
   2b4b8:	31c00926 	beq	r6,r7,2b4e0 <__fpcmp_parts_d+0x44>
   2b4bc:	01c00084 	movi	r7,2
   2b4c0:	19c00626 	beq	r3,r7,2b4dc <__fpcmp_parts_d+0x40>
   2b4c4:	31c00a26 	beq	r6,r7,2b4f0 <__fpcmp_parts_d+0x54>
   2b4c8:	20c00117 	ldw	r3,4(r4)
   2b4cc:	29800117 	ldw	r6,4(r5)
   2b4d0:	19800b26 	beq	r3,r6,2b500 <__fpcmp_parts_d+0x64>
   2b4d4:	1800041e 	bne	r3,zero,2b4e8 <__fpcmp_parts_d+0x4c>
   2b4d8:	f800283a 	ret
   2b4dc:	30c01a26 	beq	r6,r3,2b548 <__fpcmp_parts_d+0xac>
   2b4e0:	28800117 	ldw	r2,4(r5)
   2b4e4:	1000041e 	bne	r2,zero,2b4f8 <__fpcmp_parts_d+0x5c>
   2b4e8:	00bfffc4 	movi	r2,-1
   2b4ec:	f800283a 	ret
   2b4f0:	20800117 	ldw	r2,4(r4)
   2b4f4:	103ffc1e 	bne	r2,zero,2b4e8 <__fpcmp_parts_d+0x4c>
   2b4f8:	00800044 	movi	r2,1
   2b4fc:	f800283a 	ret
   2b500:	21c00217 	ldw	r7,8(r4)
   2b504:	29800217 	ldw	r6,8(r5)
   2b508:	31c0020e 	bge	r6,r7,2b514 <__fpcmp_parts_d+0x78>
   2b50c:	183ff61e 	bne	r3,zero,2b4e8 <__fpcmp_parts_d+0x4c>
   2b510:	f800283a 	ret
   2b514:	39800a16 	blt	r7,r6,2b540 <__fpcmp_parts_d+0xa4>
   2b518:	20800417 	ldw	r2,16(r4)
   2b51c:	29800417 	ldw	r6,16(r5)
   2b520:	21c00317 	ldw	r7,12(r4)
   2b524:	29000317 	ldw	r4,12(r5)
   2b528:	30800936 	bltu	r6,r2,2b550 <__fpcmp_parts_d+0xb4>
   2b52c:	1180011e 	bne	r2,r6,2b534 <__fpcmp_parts_d+0x98>
   2b530:	21c00736 	bltu	r4,r7,2b550 <__fpcmp_parts_d+0xb4>
   2b534:	11800236 	bltu	r2,r6,2b540 <__fpcmp_parts_d+0xa4>
   2b538:	3080031e 	bne	r6,r2,2b548 <__fpcmp_parts_d+0xac>
   2b53c:	3900022e 	bgeu	r7,r4,2b548 <__fpcmp_parts_d+0xac>
   2b540:	183fe926 	beq	r3,zero,2b4e8 <__fpcmp_parts_d+0x4c>
   2b544:	003fec06 	br	2b4f8 <__fpcmp_parts_d+0x5c>
   2b548:	0005883a 	mov	r2,zero
   2b54c:	f800283a 	ret
   2b550:	183fe926 	beq	r3,zero,2b4f8 <__fpcmp_parts_d+0x5c>
   2b554:	003fe406 	br	2b4e8 <__fpcmp_parts_d+0x4c>
   2b558:	30ffe51e 	bne	r6,r3,2b4f0 <__fpcmp_parts_d+0x54>
   2b55c:	28c00117 	ldw	r3,4(r5)
   2b560:	20800117 	ldw	r2,4(r4)
   2b564:	1885c83a 	sub	r2,r3,r2
   2b568:	f800283a 	ret

0002b56c <__lshrdi3>:
   2b56c:	2005883a 	mov	r2,r4
   2b570:	2807883a 	mov	r3,r5
   2b574:	30000826 	beq	r6,zero,2b598 <__lshrdi3+0x2c>
   2b578:	01000804 	movi	r4,32
   2b57c:	2189c83a 	sub	r4,r4,r6
   2b580:	0100060e 	bge	zero,r4,2b59c <__lshrdi3+0x30>
   2b584:	1184d83a 	srl	r2,r2,r6
   2b588:	2908983a 	sll	r4,r5,r4
   2b58c:	298cd83a 	srl	r6,r5,r6
   2b590:	2084b03a 	or	r2,r4,r2
   2b594:	3007883a 	mov	r3,r6
   2b598:	f800283a 	ret
   2b59c:	0105c83a 	sub	r2,zero,r4
   2b5a0:	000d883a 	mov	r6,zero
   2b5a4:	2884d83a 	srl	r2,r5,r2
   2b5a8:	3007883a 	mov	r3,r6
   2b5ac:	003ffa06 	br	2b598 <__lshrdi3+0x2c>

0002b5b0 <__ashldi3>:
   2b5b0:	2005883a 	mov	r2,r4
   2b5b4:	2807883a 	mov	r3,r5
   2b5b8:	30000826 	beq	r6,zero,2b5dc <__ashldi3+0x2c>
   2b5bc:	01000804 	movi	r4,32
   2b5c0:	2189c83a 	sub	r4,r4,r6
   2b5c4:	0100060e 	bge	zero,r4,2b5e0 <__ashldi3+0x30>
   2b5c8:	1108d83a 	srl	r4,r2,r4
   2b5cc:	2986983a 	sll	r3,r5,r6
   2b5d0:	118c983a 	sll	r6,r2,r6
   2b5d4:	20c6b03a 	or	r3,r4,r3
   2b5d8:	3005883a 	mov	r2,r6
   2b5dc:	f800283a 	ret
   2b5e0:	0107c83a 	sub	r3,zero,r4
   2b5e4:	000d883a 	mov	r6,zero
   2b5e8:	10c6983a 	sll	r3,r2,r3
   2b5ec:	3005883a 	mov	r2,r6
   2b5f0:	003ffa06 	br	2b5dc <__ashldi3+0x2c>

0002b5f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b5f4:	defffe04 	addi	sp,sp,-8
   2b5f8:	dfc00115 	stw	ra,4(sp)
   2b5fc:	df000015 	stw	fp,0(sp)
   2b600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b604:	008000f4 	movhi	r2,3
   2b608:	10be7904 	addi	r2,r2,-1564
   2b60c:	10800017 	ldw	r2,0(r2)
   2b610:	10000526 	beq	r2,zero,2b628 <alt_get_errno+0x34>
   2b614:	008000f4 	movhi	r2,3
   2b618:	10be7904 	addi	r2,r2,-1564
   2b61c:	10800017 	ldw	r2,0(r2)
   2b620:	103ee83a 	callr	r2
   2b624:	00000206 	br	2b630 <alt_get_errno+0x3c>
   2b628:	008000f4 	movhi	r2,3
   2b62c:	10813604 	addi	r2,r2,1240
}
   2b630:	e037883a 	mov	sp,fp
   2b634:	dfc00117 	ldw	ra,4(sp)
   2b638:	df000017 	ldw	fp,0(sp)
   2b63c:	dec00204 	addi	sp,sp,8
   2b640:	f800283a 	ret

0002b644 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2b644:	defffb04 	addi	sp,sp,-20
   2b648:	dfc00415 	stw	ra,16(sp)
   2b64c:	df000315 	stw	fp,12(sp)
   2b650:	df000304 	addi	fp,sp,12
   2b654:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2b658:	e0bfff17 	ldw	r2,-4(fp)
   2b65c:	10000716 	blt	r2,zero,2b67c <close+0x38>
   2b660:	e13fff17 	ldw	r4,-4(fp)
   2b664:	01400304 	movi	r5,12
   2b668:	00212100 	call	21210 <__mulsi3>
   2b66c:	00c000f4 	movhi	r3,3
   2b670:	18fdf904 	addi	r3,r3,-2076
   2b674:	10c5883a 	add	r2,r2,r3
   2b678:	00000106 	br	2b680 <close+0x3c>
   2b67c:	0005883a 	mov	r2,zero
   2b680:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2b684:	e0bffd17 	ldw	r2,-12(fp)
   2b688:	10001826 	beq	r2,zero,2b6ec <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2b68c:	e0bffd17 	ldw	r2,-12(fp)
   2b690:	10800017 	ldw	r2,0(r2)
   2b694:	10800417 	ldw	r2,16(r2)
   2b698:	10000626 	beq	r2,zero,2b6b4 <close+0x70>
   2b69c:	e0bffd17 	ldw	r2,-12(fp)
   2b6a0:	10800017 	ldw	r2,0(r2)
   2b6a4:	10800417 	ldw	r2,16(r2)
   2b6a8:	e13ffd17 	ldw	r4,-12(fp)
   2b6ac:	103ee83a 	callr	r2
   2b6b0:	00000106 	br	2b6b8 <close+0x74>
   2b6b4:	0005883a 	mov	r2,zero
   2b6b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2b6bc:	e13fff17 	ldw	r4,-4(fp)
   2b6c0:	002bfc40 	call	2bfc4 <alt_release_fd>
    if (rval < 0)
   2b6c4:	e0bffe17 	ldw	r2,-8(fp)
   2b6c8:	1000060e 	bge	r2,zero,2b6e4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2b6cc:	002b5f40 	call	2b5f4 <alt_get_errno>
   2b6d0:	e0fffe17 	ldw	r3,-8(fp)
   2b6d4:	00c7c83a 	sub	r3,zero,r3
   2b6d8:	10c00015 	stw	r3,0(r2)
      return -1;
   2b6dc:	00bfffc4 	movi	r2,-1
   2b6e0:	00000606 	br	2b6fc <close+0xb8>
    }
    return 0;
   2b6e4:	0005883a 	mov	r2,zero
   2b6e8:	00000406 	br	2b6fc <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2b6ec:	002b5f40 	call	2b5f4 <alt_get_errno>
   2b6f0:	00c01444 	movi	r3,81
   2b6f4:	10c00015 	stw	r3,0(r2)
    return -1;
   2b6f8:	00bfffc4 	movi	r2,-1
  }
}
   2b6fc:	e037883a 	mov	sp,fp
   2b700:	dfc00117 	ldw	ra,4(sp)
   2b704:	df000017 	ldw	fp,0(sp)
   2b708:	dec00204 	addi	sp,sp,8
   2b70c:	f800283a 	ret

0002b710 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2b710:	defffc04 	addi	sp,sp,-16
   2b714:	df000315 	stw	fp,12(sp)
   2b718:	df000304 	addi	fp,sp,12
   2b71c:	e13ffd15 	stw	r4,-12(fp)
   2b720:	e17ffe15 	stw	r5,-8(fp)
   2b724:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2b728:	e0bfff17 	ldw	r2,-4(fp)
}
   2b72c:	e037883a 	mov	sp,fp
   2b730:	df000017 	ldw	fp,0(sp)
   2b734:	dec00104 	addi	sp,sp,4
   2b738:	f800283a 	ret

0002b73c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b73c:	defffe04 	addi	sp,sp,-8
   2b740:	dfc00115 	stw	ra,4(sp)
   2b744:	df000015 	stw	fp,0(sp)
   2b748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b74c:	008000f4 	movhi	r2,3
   2b750:	10be7904 	addi	r2,r2,-1564
   2b754:	10800017 	ldw	r2,0(r2)
   2b758:	10000526 	beq	r2,zero,2b770 <alt_get_errno+0x34>
   2b75c:	008000f4 	movhi	r2,3
   2b760:	10be7904 	addi	r2,r2,-1564
   2b764:	10800017 	ldw	r2,0(r2)
   2b768:	103ee83a 	callr	r2
   2b76c:	00000206 	br	2b778 <alt_get_errno+0x3c>
   2b770:	008000f4 	movhi	r2,3
   2b774:	10813604 	addi	r2,r2,1240
}
   2b778:	e037883a 	mov	sp,fp
   2b77c:	dfc00117 	ldw	ra,4(sp)
   2b780:	df000017 	ldw	fp,0(sp)
   2b784:	dec00204 	addi	sp,sp,8
   2b788:	f800283a 	ret

0002b78c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2b78c:	defffb04 	addi	sp,sp,-20
   2b790:	dfc00415 	stw	ra,16(sp)
   2b794:	df000315 	stw	fp,12(sp)
   2b798:	df000304 	addi	fp,sp,12
   2b79c:	e13ffe15 	stw	r4,-8(fp)
   2b7a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b7a4:	e0bffe17 	ldw	r2,-8(fp)
   2b7a8:	10000716 	blt	r2,zero,2b7c8 <fstat+0x3c>
   2b7ac:	e13ffe17 	ldw	r4,-8(fp)
   2b7b0:	01400304 	movi	r5,12
   2b7b4:	00212100 	call	21210 <__mulsi3>
   2b7b8:	00c000f4 	movhi	r3,3
   2b7bc:	18fdf904 	addi	r3,r3,-2076
   2b7c0:	10c5883a 	add	r2,r2,r3
   2b7c4:	00000106 	br	2b7cc <fstat+0x40>
   2b7c8:	0005883a 	mov	r2,zero
   2b7cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2b7d0:	e0bffd17 	ldw	r2,-12(fp)
   2b7d4:	10001026 	beq	r2,zero,2b818 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2b7d8:	e0bffd17 	ldw	r2,-12(fp)
   2b7dc:	10800017 	ldw	r2,0(r2)
   2b7e0:	10800817 	ldw	r2,32(r2)
   2b7e4:	10000726 	beq	r2,zero,2b804 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   2b7e8:	e0bffd17 	ldw	r2,-12(fp)
   2b7ec:	10800017 	ldw	r2,0(r2)
   2b7f0:	10800817 	ldw	r2,32(r2)
   2b7f4:	e13ffd17 	ldw	r4,-12(fp)
   2b7f8:	e17fff17 	ldw	r5,-4(fp)
   2b7fc:	103ee83a 	callr	r2
   2b800:	00000906 	br	2b828 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2b804:	e0bfff17 	ldw	r2,-4(fp)
   2b808:	00c80004 	movi	r3,8192
   2b80c:	10c00115 	stw	r3,4(r2)
      return 0;
   2b810:	0005883a 	mov	r2,zero
   2b814:	00000406 	br	2b828 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2b818:	002b73c0 	call	2b73c <alt_get_errno>
   2b81c:	00c01444 	movi	r3,81
   2b820:	10c00015 	stw	r3,0(r2)
    return -1;
   2b824:	00bfffc4 	movi	r2,-1
  }
}
   2b828:	e037883a 	mov	sp,fp
   2b82c:	dfc00117 	ldw	ra,4(sp)
   2b830:	df000017 	ldw	fp,0(sp)
   2b834:	dec00204 	addi	sp,sp,8
   2b838:	f800283a 	ret

0002b83c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b83c:	defffe04 	addi	sp,sp,-8
   2b840:	dfc00115 	stw	ra,4(sp)
   2b844:	df000015 	stw	fp,0(sp)
   2b848:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b84c:	008000f4 	movhi	r2,3
   2b850:	10be7904 	addi	r2,r2,-1564
   2b854:	10800017 	ldw	r2,0(r2)
   2b858:	10000526 	beq	r2,zero,2b870 <alt_get_errno+0x34>
   2b85c:	008000f4 	movhi	r2,3
   2b860:	10be7904 	addi	r2,r2,-1564
   2b864:	10800017 	ldw	r2,0(r2)
   2b868:	103ee83a 	callr	r2
   2b86c:	00000206 	br	2b878 <alt_get_errno+0x3c>
   2b870:	008000f4 	movhi	r2,3
   2b874:	10813604 	addi	r2,r2,1240
}
   2b878:	e037883a 	mov	sp,fp
   2b87c:	dfc00117 	ldw	ra,4(sp)
   2b880:	df000017 	ldw	fp,0(sp)
   2b884:	dec00204 	addi	sp,sp,8
   2b888:	f800283a 	ret

0002b88c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2b88c:	deffed04 	addi	sp,sp,-76
   2b890:	dfc01215 	stw	ra,72(sp)
   2b894:	df001115 	stw	fp,68(sp)
   2b898:	df001104 	addi	fp,sp,68
   2b89c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b8a0:	e0bfff17 	ldw	r2,-4(fp)
   2b8a4:	10000716 	blt	r2,zero,2b8c4 <isatty+0x38>
   2b8a8:	e13fff17 	ldw	r4,-4(fp)
   2b8ac:	01400304 	movi	r5,12
   2b8b0:	00212100 	call	21210 <__mulsi3>
   2b8b4:	00c000f4 	movhi	r3,3
   2b8b8:	18fdf904 	addi	r3,r3,-2076
   2b8bc:	10c5883a 	add	r2,r2,r3
   2b8c0:	00000106 	br	2b8c8 <isatty+0x3c>
   2b8c4:	0005883a 	mov	r2,zero
   2b8c8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2b8cc:	e0bfef17 	ldw	r2,-68(fp)
   2b8d0:	10000e26 	beq	r2,zero,2b90c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2b8d4:	e0bfef17 	ldw	r2,-68(fp)
   2b8d8:	10800017 	ldw	r2,0(r2)
   2b8dc:	10800817 	ldw	r2,32(r2)
   2b8e0:	1000021e 	bne	r2,zero,2b8ec <isatty+0x60>
    {
      return 1;
   2b8e4:	00800044 	movi	r2,1
   2b8e8:	00000c06 	br	2b91c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2b8ec:	e0bff004 	addi	r2,fp,-64
   2b8f0:	e13fff17 	ldw	r4,-4(fp)
   2b8f4:	100b883a 	mov	r5,r2
   2b8f8:	002b78c0 	call	2b78c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2b8fc:	e0bff117 	ldw	r2,-60(fp)
   2b900:	10880020 	cmpeqi	r2,r2,8192
   2b904:	10803fcc 	andi	r2,r2,255
   2b908:	00000406 	br	2b91c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2b90c:	002b83c0 	call	2b83c <alt_get_errno>
   2b910:	00c01444 	movi	r3,81
   2b914:	10c00015 	stw	r3,0(r2)
    return 0;
   2b918:	0005883a 	mov	r2,zero
  }
}
   2b91c:	e037883a 	mov	sp,fp
   2b920:	dfc00117 	ldw	ra,4(sp)
   2b924:	df000017 	ldw	fp,0(sp)
   2b928:	dec00204 	addi	sp,sp,8
   2b92c:	f800283a 	ret

0002b930 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2b930:	defffc04 	addi	sp,sp,-16
   2b934:	df000315 	stw	fp,12(sp)
   2b938:	df000304 	addi	fp,sp,12
   2b93c:	e13ffd15 	stw	r4,-12(fp)
   2b940:	e17ffe15 	stw	r5,-8(fp)
   2b944:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2b948:	e0fffe17 	ldw	r3,-8(fp)
   2b94c:	e0bffd17 	ldw	r2,-12(fp)
   2b950:	18800e26 	beq	r3,r2,2b98c <alt_load_section+0x5c>
  {
    while( to != end )
   2b954:	00000a06 	br	2b980 <alt_load_section+0x50>
    {
      *to++ = *from++;
   2b958:	e0bffd17 	ldw	r2,-12(fp)
   2b95c:	10c00017 	ldw	r3,0(r2)
   2b960:	e0bffe17 	ldw	r2,-8(fp)
   2b964:	10c00015 	stw	r3,0(r2)
   2b968:	e0bffe17 	ldw	r2,-8(fp)
   2b96c:	10800104 	addi	r2,r2,4
   2b970:	e0bffe15 	stw	r2,-8(fp)
   2b974:	e0bffd17 	ldw	r2,-12(fp)
   2b978:	10800104 	addi	r2,r2,4
   2b97c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2b980:	e0fffe17 	ldw	r3,-8(fp)
   2b984:	e0bfff17 	ldw	r2,-4(fp)
   2b988:	18bff31e 	bne	r3,r2,2b958 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2b98c:	e037883a 	mov	sp,fp
   2b990:	df000017 	ldw	fp,0(sp)
   2b994:	dec00104 	addi	sp,sp,4
   2b998:	f800283a 	ret

0002b99c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2b99c:	defffe04 	addi	sp,sp,-8
   2b9a0:	dfc00115 	stw	ra,4(sp)
   2b9a4:	df000015 	stw	fp,0(sp)
   2b9a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2b9ac:	010000f4 	movhi	r4,3
   2b9b0:	213e9004 	addi	r4,r4,-1472
   2b9b4:	014000f4 	movhi	r5,3
   2b9b8:	297bea04 	addi	r5,r5,-4184
   2b9bc:	018000f4 	movhi	r6,3
   2b9c0:	31be9004 	addi	r6,r6,-1472
   2b9c4:	002b9300 	call	2b930 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2b9c8:	010000b4 	movhi	r4,2
   2b9cc:	21000804 	addi	r4,r4,32
   2b9d0:	014000b4 	movhi	r5,2
   2b9d4:	29400804 	addi	r5,r5,32
   2b9d8:	018000b4 	movhi	r6,2
   2b9dc:	31806e04 	addi	r6,r6,440
   2b9e0:	002b9300 	call	2b930 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2b9e4:	010000f4 	movhi	r4,3
   2b9e8:	2136c904 	addi	r4,r4,-9436
   2b9ec:	014000f4 	movhi	r5,3
   2b9f0:	2976c904 	addi	r5,r5,-9436
   2b9f4:	018000f4 	movhi	r6,3
   2b9f8:	31bbea04 	addi	r6,r6,-4184
   2b9fc:	002b9300 	call	2b930 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2ba00:	002cdcc0 	call	2cdcc <alt_dcache_flush_all>
  alt_icache_flush_all();
   2ba04:	002d1fc0 	call	2d1fc <alt_icache_flush_all>
}
   2ba08:	e037883a 	mov	sp,fp
   2ba0c:	dfc00117 	ldw	ra,4(sp)
   2ba10:	df000017 	ldw	fp,0(sp)
   2ba14:	dec00204 	addi	sp,sp,8
   2ba18:	f800283a 	ret

0002ba1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ba1c:	defffe04 	addi	sp,sp,-8
   2ba20:	dfc00115 	stw	ra,4(sp)
   2ba24:	df000015 	stw	fp,0(sp)
   2ba28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ba2c:	008000f4 	movhi	r2,3
   2ba30:	10be7904 	addi	r2,r2,-1564
   2ba34:	10800017 	ldw	r2,0(r2)
   2ba38:	10000526 	beq	r2,zero,2ba50 <alt_get_errno+0x34>
   2ba3c:	008000f4 	movhi	r2,3
   2ba40:	10be7904 	addi	r2,r2,-1564
   2ba44:	10800017 	ldw	r2,0(r2)
   2ba48:	103ee83a 	callr	r2
   2ba4c:	00000206 	br	2ba58 <alt_get_errno+0x3c>
   2ba50:	008000f4 	movhi	r2,3
   2ba54:	10813604 	addi	r2,r2,1240
}
   2ba58:	e037883a 	mov	sp,fp
   2ba5c:	dfc00117 	ldw	ra,4(sp)
   2ba60:	df000017 	ldw	fp,0(sp)
   2ba64:	dec00204 	addi	sp,sp,8
   2ba68:	f800283a 	ret

0002ba6c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2ba6c:	defff904 	addi	sp,sp,-28
   2ba70:	dfc00615 	stw	ra,24(sp)
   2ba74:	df000515 	stw	fp,20(sp)
   2ba78:	df000504 	addi	fp,sp,20
   2ba7c:	e13ffd15 	stw	r4,-12(fp)
   2ba80:	e17ffe15 	stw	r5,-8(fp)
   2ba84:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2ba88:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ba8c:	e0bffd17 	ldw	r2,-12(fp)
   2ba90:	10000716 	blt	r2,zero,2bab0 <lseek+0x44>
   2ba94:	e13ffd17 	ldw	r4,-12(fp)
   2ba98:	01400304 	movi	r5,12
   2ba9c:	00212100 	call	21210 <__mulsi3>
   2baa0:	00c000f4 	movhi	r3,3
   2baa4:	18fdf904 	addi	r3,r3,-2076
   2baa8:	10c5883a 	add	r2,r2,r3
   2baac:	00000106 	br	2bab4 <lseek+0x48>
   2bab0:	0005883a 	mov	r2,zero
   2bab4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2bab8:	e0bffc17 	ldw	r2,-16(fp)
   2babc:	10001026 	beq	r2,zero,2bb00 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2bac0:	e0bffc17 	ldw	r2,-16(fp)
   2bac4:	10800017 	ldw	r2,0(r2)
   2bac8:	10800717 	ldw	r2,28(r2)
   2bacc:	10000926 	beq	r2,zero,2baf4 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2bad0:	e0bffc17 	ldw	r2,-16(fp)
   2bad4:	10800017 	ldw	r2,0(r2)
   2bad8:	10800717 	ldw	r2,28(r2)
   2badc:	e13ffc17 	ldw	r4,-16(fp)
   2bae0:	e17ffe17 	ldw	r5,-8(fp)
   2bae4:	e1bfff17 	ldw	r6,-4(fp)
   2bae8:	103ee83a 	callr	r2
   2baec:	e0bffb15 	stw	r2,-20(fp)
   2baf0:	00000506 	br	2bb08 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2baf4:	00bfde84 	movi	r2,-134
   2baf8:	e0bffb15 	stw	r2,-20(fp)
   2bafc:	00000206 	br	2bb08 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   2bb00:	00bfebc4 	movi	r2,-81
   2bb04:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2bb08:	e0bffb17 	ldw	r2,-20(fp)
   2bb0c:	1000060e 	bge	r2,zero,2bb28 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2bb10:	002ba1c0 	call	2ba1c <alt_get_errno>
   2bb14:	e0fffb17 	ldw	r3,-20(fp)
   2bb18:	00c7c83a 	sub	r3,zero,r3
   2bb1c:	10c00015 	stw	r3,0(r2)
    rc = -1;
   2bb20:	00bfffc4 	movi	r2,-1
   2bb24:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2bb28:	e0bffb17 	ldw	r2,-20(fp)
}
   2bb2c:	e037883a 	mov	sp,fp
   2bb30:	dfc00117 	ldw	ra,4(sp)
   2bb34:	df000017 	ldw	fp,0(sp)
   2bb38:	dec00204 	addi	sp,sp,8
   2bb3c:	f800283a 	ret

0002bb40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2bb40:	defffd04 	addi	sp,sp,-12
   2bb44:	dfc00215 	stw	ra,8(sp)
   2bb48:	df000115 	stw	fp,4(sp)
   2bb4c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2bb50:	0009883a 	mov	r4,zero
   2bb54:	002c29c0 	call	2c29c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2bb58:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2bb5c:	002c2d00 	call	2c2d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2bb60:	010000f4 	movhi	r4,3
   2bb64:	213bdf04 	addi	r4,r4,-4228
   2bb68:	014000f4 	movhi	r5,3
   2bb6c:	297bdf04 	addi	r5,r5,-4228
   2bb70:	018000f4 	movhi	r6,3
   2bb74:	31bbdf04 	addi	r6,r6,-4228
   2bb78:	002d5d40 	call	2d5d4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2bb7c:	d122cf17 	ldw	r4,-29892(gp)
   2bb80:	d0e2d017 	ldw	r3,-29888(gp)
   2bb84:	d0a2d117 	ldw	r2,-29884(gp)
   2bb88:	180b883a 	mov	r5,r3
   2bb8c:	100d883a 	mov	r6,r2
   2bb90:	00211d80 	call	211d8 <main>
   2bb94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2bb98:	01000044 	movi	r4,1
   2bb9c:	002b6440 	call	2b644 <close>
  exit (result);
   2bba0:	e13fff17 	ldw	r4,-4(fp)
   2bba4:	002d8940 	call	2d894 <exit>

0002bba8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2bba8:	defffe04 	addi	sp,sp,-8
   2bbac:	df000115 	stw	fp,4(sp)
   2bbb0:	df000104 	addi	fp,sp,4
   2bbb4:	e13fff15 	stw	r4,-4(fp)
}
   2bbb8:	e037883a 	mov	sp,fp
   2bbbc:	df000017 	ldw	fp,0(sp)
   2bbc0:	dec00104 	addi	sp,sp,4
   2bbc4:	f800283a 	ret

0002bbc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2bbc8:	defffe04 	addi	sp,sp,-8
   2bbcc:	df000115 	stw	fp,4(sp)
   2bbd0:	df000104 	addi	fp,sp,4
   2bbd4:	e13fff15 	stw	r4,-4(fp)
}
   2bbd8:	e037883a 	mov	sp,fp
   2bbdc:	df000017 	ldw	fp,0(sp)
   2bbe0:	dec00104 	addi	sp,sp,4
   2bbe4:	f800283a 	ret

0002bbe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bbe8:	defffe04 	addi	sp,sp,-8
   2bbec:	dfc00115 	stw	ra,4(sp)
   2bbf0:	df000015 	stw	fp,0(sp)
   2bbf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2bbf8:	008000f4 	movhi	r2,3
   2bbfc:	10be7904 	addi	r2,r2,-1564
   2bc00:	10800017 	ldw	r2,0(r2)
   2bc04:	10000526 	beq	r2,zero,2bc1c <alt_get_errno+0x34>
   2bc08:	008000f4 	movhi	r2,3
   2bc0c:	10be7904 	addi	r2,r2,-1564
   2bc10:	10800017 	ldw	r2,0(r2)
   2bc14:	103ee83a 	callr	r2
   2bc18:	00000206 	br	2bc24 <alt_get_errno+0x3c>
   2bc1c:	008000f4 	movhi	r2,3
   2bc20:	10813604 	addi	r2,r2,1240
}
   2bc24:	e037883a 	mov	sp,fp
   2bc28:	dfc00117 	ldw	ra,4(sp)
   2bc2c:	df000017 	ldw	fp,0(sp)
   2bc30:	dec00204 	addi	sp,sp,8
   2bc34:	f800283a 	ret

0002bc38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2bc38:	defffb04 	addi	sp,sp,-20
   2bc3c:	dfc00415 	stw	ra,16(sp)
   2bc40:	df000315 	stw	fp,12(sp)
   2bc44:	dc000215 	stw	r16,8(sp)
   2bc48:	df000204 	addi	fp,sp,8
   2bc4c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2bc50:	e0bfff17 	ldw	r2,-4(fp)
   2bc54:	10800217 	ldw	r2,8(r2)
   2bc58:	10d00034 	orhi	r3,r2,16384
   2bc5c:	e0bfff17 	ldw	r2,-4(fp)
   2bc60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bc64:	e03ffe15 	stw	zero,-8(fp)
   2bc68:	00002206 	br	2bcf4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bc6c:	040000f4 	movhi	r16,3
   2bc70:	843df904 	addi	r16,r16,-2076
   2bc74:	e0bffe17 	ldw	r2,-8(fp)
   2bc78:	1009883a 	mov	r4,r2
   2bc7c:	01400304 	movi	r5,12
   2bc80:	00212100 	call	21210 <__mulsi3>
   2bc84:	8085883a 	add	r2,r16,r2
   2bc88:	10c00017 	ldw	r3,0(r2)
   2bc8c:	e0bfff17 	ldw	r2,-4(fp)
   2bc90:	10800017 	ldw	r2,0(r2)
   2bc94:	1880141e 	bne	r3,r2,2bce8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bc98:	040000f4 	movhi	r16,3
   2bc9c:	843df904 	addi	r16,r16,-2076
   2bca0:	e0bffe17 	ldw	r2,-8(fp)
   2bca4:	1009883a 	mov	r4,r2
   2bca8:	01400304 	movi	r5,12
   2bcac:	00212100 	call	21210 <__mulsi3>
   2bcb0:	8085883a 	add	r2,r16,r2
   2bcb4:	10800204 	addi	r2,r2,8
   2bcb8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bcbc:	10000a0e 	bge	r2,zero,2bce8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2bcc0:	e13ffe17 	ldw	r4,-8(fp)
   2bcc4:	01400304 	movi	r5,12
   2bcc8:	00212100 	call	21210 <__mulsi3>
   2bccc:	00c000f4 	movhi	r3,3
   2bcd0:	18fdf904 	addi	r3,r3,-2076
   2bcd4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bcd8:	e0bfff17 	ldw	r2,-4(fp)
   2bcdc:	18800226 	beq	r3,r2,2bce8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2bce0:	00bffcc4 	movi	r2,-13
   2bce4:	00000a06 	br	2bd10 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bce8:	e0bffe17 	ldw	r2,-8(fp)
   2bcec:	10800044 	addi	r2,r2,1
   2bcf0:	e0bffe15 	stw	r2,-8(fp)
   2bcf4:	008000f4 	movhi	r2,3
   2bcf8:	10be7804 	addi	r2,r2,-1568
   2bcfc:	10800017 	ldw	r2,0(r2)
   2bd00:	1007883a 	mov	r3,r2
   2bd04:	e0bffe17 	ldw	r2,-8(fp)
   2bd08:	18bfd82e 	bgeu	r3,r2,2bc6c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2bd0c:	0005883a 	mov	r2,zero
}
   2bd10:	e037883a 	mov	sp,fp
   2bd14:	dfc00217 	ldw	ra,8(sp)
   2bd18:	df000117 	ldw	fp,4(sp)
   2bd1c:	dc000017 	ldw	r16,0(sp)
   2bd20:	dec00304 	addi	sp,sp,12
   2bd24:	f800283a 	ret

0002bd28 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2bd28:	defff604 	addi	sp,sp,-40
   2bd2c:	dfc00915 	stw	ra,36(sp)
   2bd30:	df000815 	stw	fp,32(sp)
   2bd34:	df000804 	addi	fp,sp,32
   2bd38:	e13ffd15 	stw	r4,-12(fp)
   2bd3c:	e17ffe15 	stw	r5,-8(fp)
   2bd40:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2bd44:	00bfffc4 	movi	r2,-1
   2bd48:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2bd4c:	00bffb44 	movi	r2,-19
   2bd50:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2bd54:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2bd58:	e13ffd17 	ldw	r4,-12(fp)
   2bd5c:	014000f4 	movhi	r5,3
   2bd60:	297e7604 	addi	r5,r5,-1576
   2bd64:	002cf000 	call	2cf00 <alt_find_dev>
   2bd68:	e0bff815 	stw	r2,-32(fp)
   2bd6c:	e0bff817 	ldw	r2,-32(fp)
   2bd70:	1000051e 	bne	r2,zero,2bd88 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2bd74:	e13ffd17 	ldw	r4,-12(fp)
   2bd78:	002cf900 	call	2cf90 <alt_find_file>
   2bd7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2bd80:	00800044 	movi	r2,1
   2bd84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2bd88:	e0bff817 	ldw	r2,-32(fp)
   2bd8c:	10002a26 	beq	r2,zero,2be38 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2bd90:	e13ff817 	ldw	r4,-32(fp)
   2bd94:	002d1280 	call	2d128 <alt_get_fd>
   2bd98:	e0bff915 	stw	r2,-28(fp)
   2bd9c:	e0bff917 	ldw	r2,-28(fp)
   2bda0:	1000030e 	bge	r2,zero,2bdb0 <open+0x88>
    {
      status = index;
   2bda4:	e0bff917 	ldw	r2,-28(fp)
   2bda8:	e0bffa15 	stw	r2,-24(fp)
   2bdac:	00002406 	br	2be40 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2bdb0:	e13ff917 	ldw	r4,-28(fp)
   2bdb4:	01400304 	movi	r5,12
   2bdb8:	00212100 	call	21210 <__mulsi3>
   2bdbc:	00c000f4 	movhi	r3,3
   2bdc0:	18fdf904 	addi	r3,r3,-2076
   2bdc4:	10c5883a 	add	r2,r2,r3
   2bdc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2bdcc:	e0fffe17 	ldw	r3,-8(fp)
   2bdd0:	00900034 	movhi	r2,16384
   2bdd4:	10bfffc4 	addi	r2,r2,-1
   2bdd8:	1886703a 	and	r3,r3,r2
   2bddc:	e0bffc17 	ldw	r2,-16(fp)
   2bde0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2bde4:	e0bffb17 	ldw	r2,-20(fp)
   2bde8:	1000051e 	bne	r2,zero,2be00 <open+0xd8>
   2bdec:	e13ffc17 	ldw	r4,-16(fp)
   2bdf0:	002bc380 	call	2bc38 <alt_file_locked>
   2bdf4:	e0bffa15 	stw	r2,-24(fp)
   2bdf8:	e0bffa17 	ldw	r2,-24(fp)
   2bdfc:	10001016 	blt	r2,zero,2be40 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2be00:	e0bff817 	ldw	r2,-32(fp)
   2be04:	10800317 	ldw	r2,12(r2)
   2be08:	10000826 	beq	r2,zero,2be2c <open+0x104>
   2be0c:	e0bff817 	ldw	r2,-32(fp)
   2be10:	10800317 	ldw	r2,12(r2)
   2be14:	e13ffc17 	ldw	r4,-16(fp)
   2be18:	e17ffd17 	ldw	r5,-12(fp)
   2be1c:	e1bffe17 	ldw	r6,-8(fp)
   2be20:	e1ffff17 	ldw	r7,-4(fp)
   2be24:	103ee83a 	callr	r2
   2be28:	00000106 	br	2be30 <open+0x108>
   2be2c:	0005883a 	mov	r2,zero
   2be30:	e0bffa15 	stw	r2,-24(fp)
   2be34:	00000206 	br	2be40 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2be38:	00bffb44 	movi	r2,-19
   2be3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2be40:	e0bffa17 	ldw	r2,-24(fp)
   2be44:	1000080e 	bge	r2,zero,2be68 <open+0x140>
  {
    alt_release_fd (index);  
   2be48:	e13ff917 	ldw	r4,-28(fp)
   2be4c:	002bfc40 	call	2bfc4 <alt_release_fd>
    ALT_ERRNO = -status;
   2be50:	002bbe80 	call	2bbe8 <alt_get_errno>
   2be54:	e0fffa17 	ldw	r3,-24(fp)
   2be58:	00c7c83a 	sub	r3,zero,r3
   2be5c:	10c00015 	stw	r3,0(r2)
    return -1;
   2be60:	00bfffc4 	movi	r2,-1
   2be64:	00000106 	br	2be6c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2be68:	e0bff917 	ldw	r2,-28(fp)
}
   2be6c:	e037883a 	mov	sp,fp
   2be70:	dfc00117 	ldw	ra,4(sp)
   2be74:	df000017 	ldw	fp,0(sp)
   2be78:	dec00204 	addi	sp,sp,8
   2be7c:	f800283a 	ret

0002be80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2be80:	defffe04 	addi	sp,sp,-8
   2be84:	dfc00115 	stw	ra,4(sp)
   2be88:	df000015 	stw	fp,0(sp)
   2be8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2be90:	008000f4 	movhi	r2,3
   2be94:	10be7904 	addi	r2,r2,-1564
   2be98:	10800017 	ldw	r2,0(r2)
   2be9c:	10000526 	beq	r2,zero,2beb4 <alt_get_errno+0x34>
   2bea0:	008000f4 	movhi	r2,3
   2bea4:	10be7904 	addi	r2,r2,-1564
   2bea8:	10800017 	ldw	r2,0(r2)
   2beac:	103ee83a 	callr	r2
   2beb0:	00000206 	br	2bebc <alt_get_errno+0x3c>
   2beb4:	008000f4 	movhi	r2,3
   2beb8:	10813604 	addi	r2,r2,1240
}
   2bebc:	e037883a 	mov	sp,fp
   2bec0:	dfc00117 	ldw	ra,4(sp)
   2bec4:	df000017 	ldw	fp,0(sp)
   2bec8:	dec00204 	addi	sp,sp,8
   2becc:	f800283a 	ret

0002bed0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2bed0:	defff904 	addi	sp,sp,-28
   2bed4:	dfc00615 	stw	ra,24(sp)
   2bed8:	df000515 	stw	fp,20(sp)
   2bedc:	df000504 	addi	fp,sp,20
   2bee0:	e13ffd15 	stw	r4,-12(fp)
   2bee4:	e17ffe15 	stw	r5,-8(fp)
   2bee8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2beec:	e0bffd17 	ldw	r2,-12(fp)
   2bef0:	10000716 	blt	r2,zero,2bf10 <read+0x40>
   2bef4:	e13ffd17 	ldw	r4,-12(fp)
   2bef8:	01400304 	movi	r5,12
   2befc:	00212100 	call	21210 <__mulsi3>
   2bf00:	00c000f4 	movhi	r3,3
   2bf04:	18fdf904 	addi	r3,r3,-2076
   2bf08:	10c5883a 	add	r2,r2,r3
   2bf0c:	00000106 	br	2bf14 <read+0x44>
   2bf10:	0005883a 	mov	r2,zero
   2bf14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2bf18:	e0bffb17 	ldw	r2,-20(fp)
   2bf1c:	10002026 	beq	r2,zero,2bfa0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2bf20:	e0bffb17 	ldw	r2,-20(fp)
   2bf24:	10800217 	ldw	r2,8(r2)
   2bf28:	108000cc 	andi	r2,r2,3
   2bf2c:	10800060 	cmpeqi	r2,r2,1
   2bf30:	1000171e 	bne	r2,zero,2bf90 <read+0xc0>
        (fd->dev->read))
   2bf34:	e0bffb17 	ldw	r2,-20(fp)
   2bf38:	10800017 	ldw	r2,0(r2)
   2bf3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2bf40:	10001326 	beq	r2,zero,2bf90 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2bf44:	e0bffb17 	ldw	r2,-20(fp)
   2bf48:	10800017 	ldw	r2,0(r2)
   2bf4c:	10c00517 	ldw	r3,20(r2)
   2bf50:	e0bfff17 	ldw	r2,-4(fp)
   2bf54:	e13ffb17 	ldw	r4,-20(fp)
   2bf58:	e17ffe17 	ldw	r5,-8(fp)
   2bf5c:	100d883a 	mov	r6,r2
   2bf60:	183ee83a 	callr	r3
   2bf64:	e0bffc15 	stw	r2,-16(fp)
   2bf68:	e0bffc17 	ldw	r2,-16(fp)
   2bf6c:	1000060e 	bge	r2,zero,2bf88 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2bf70:	002be800 	call	2be80 <alt_get_errno>
   2bf74:	e0fffc17 	ldw	r3,-16(fp)
   2bf78:	00c7c83a 	sub	r3,zero,r3
   2bf7c:	10c00015 	stw	r3,0(r2)
          return -1;
   2bf80:	00bfffc4 	movi	r2,-1
   2bf84:	00000a06 	br	2bfb0 <read+0xe0>
        }
        return rval;
   2bf88:	e0bffc17 	ldw	r2,-16(fp)
   2bf8c:	00000806 	br	2bfb0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2bf90:	002be800 	call	2be80 <alt_get_errno>
   2bf94:	00c00344 	movi	r3,13
   2bf98:	10c00015 	stw	r3,0(r2)
   2bf9c:	00000306 	br	2bfac <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2bfa0:	002be800 	call	2be80 <alt_get_errno>
   2bfa4:	00c01444 	movi	r3,81
   2bfa8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2bfac:	00bfffc4 	movi	r2,-1
}
   2bfb0:	e037883a 	mov	sp,fp
   2bfb4:	dfc00117 	ldw	ra,4(sp)
   2bfb8:	df000017 	ldw	fp,0(sp)
   2bfbc:	dec00204 	addi	sp,sp,8
   2bfc0:	f800283a 	ret

0002bfc4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2bfc4:	defffc04 	addi	sp,sp,-16
   2bfc8:	dfc00315 	stw	ra,12(sp)
   2bfcc:	df000215 	stw	fp,8(sp)
   2bfd0:	dc000115 	stw	r16,4(sp)
   2bfd4:	df000104 	addi	fp,sp,4
   2bfd8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2bfdc:	e0bfff17 	ldw	r2,-4(fp)
   2bfe0:	108000d0 	cmplti	r2,r2,3
   2bfe4:	1000111e 	bne	r2,zero,2c02c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2bfe8:	040000f4 	movhi	r16,3
   2bfec:	843df904 	addi	r16,r16,-2076
   2bff0:	e0bfff17 	ldw	r2,-4(fp)
   2bff4:	1009883a 	mov	r4,r2
   2bff8:	01400304 	movi	r5,12
   2bffc:	00212100 	call	21210 <__mulsi3>
   2c000:	8085883a 	add	r2,r16,r2
   2c004:	10800204 	addi	r2,r2,8
   2c008:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2c00c:	040000f4 	movhi	r16,3
   2c010:	843df904 	addi	r16,r16,-2076
   2c014:	e0bfff17 	ldw	r2,-4(fp)
   2c018:	1009883a 	mov	r4,r2
   2c01c:	01400304 	movi	r5,12
   2c020:	00212100 	call	21210 <__mulsi3>
   2c024:	8085883a 	add	r2,r16,r2
   2c028:	10000015 	stw	zero,0(r2)
  }
}
   2c02c:	e037883a 	mov	sp,fp
   2c030:	dfc00217 	ldw	ra,8(sp)
   2c034:	df000117 	ldw	fp,4(sp)
   2c038:	dc000017 	ldw	r16,0(sp)
   2c03c:	dec00304 	addi	sp,sp,12
   2c040:	f800283a 	ret

0002c044 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2c044:	defff904 	addi	sp,sp,-28
   2c048:	df000615 	stw	fp,24(sp)
   2c04c:	df000604 	addi	fp,sp,24
   2c050:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c054:	0005303a 	rdctl	r2,status
   2c058:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c05c:	e0fffc17 	ldw	r3,-16(fp)
   2c060:	00bfff84 	movi	r2,-2
   2c064:	1884703a 	and	r2,r3,r2
   2c068:	1001703a 	wrctl	status,r2
  
  return context;
   2c06c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2c070:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2c074:	d0a00c17 	ldw	r2,-32720(gp)
   2c078:	10c000c4 	addi	r3,r2,3
   2c07c:	00bfff04 	movi	r2,-4
   2c080:	1884703a 	and	r2,r3,r2
   2c084:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2c088:	d0e00c17 	ldw	r3,-32720(gp)
   2c08c:	e0bfff17 	ldw	r2,-4(fp)
   2c090:	1885883a 	add	r2,r3,r2
   2c094:	00c000f4 	movhi	r3,3
   2c098:	18ce2004 	addi	r3,r3,14464
   2c09c:	1880062e 	bgeu	r3,r2,2c0b8 <sbrk+0x74>
   2c0a0:	e0bffa17 	ldw	r2,-24(fp)
   2c0a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c0a8:	e0bffd17 	ldw	r2,-12(fp)
   2c0ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2c0b0:	00bfffc4 	movi	r2,-1
   2c0b4:	00000b06 	br	2c0e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2c0b8:	d0a00c17 	ldw	r2,-32720(gp)
   2c0bc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2c0c0:	d0e00c17 	ldw	r3,-32720(gp)
   2c0c4:	e0bfff17 	ldw	r2,-4(fp)
   2c0c8:	1885883a 	add	r2,r3,r2
   2c0cc:	d0a00c15 	stw	r2,-32720(gp)
   2c0d0:	e0bffa17 	ldw	r2,-24(fp)
   2c0d4:	e0bffe15 	stw	r2,-8(fp)
   2c0d8:	e0bffe17 	ldw	r2,-8(fp)
   2c0dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2c0e0:	e0bffb17 	ldw	r2,-20(fp)
} 
   2c0e4:	e037883a 	mov	sp,fp
   2c0e8:	df000017 	ldw	fp,0(sp)
   2c0ec:	dec00104 	addi	sp,sp,4
   2c0f0:	f800283a 	ret

0002c0f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2c0f4:	defffd04 	addi	sp,sp,-12
   2c0f8:	dfc00215 	stw	ra,8(sp)
   2c0fc:	df000115 	stw	fp,4(sp)
   2c100:	df000104 	addi	fp,sp,4
   2c104:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2c108:	e13fff17 	ldw	r4,-4(fp)
   2c10c:	002cc940 	call	2cc94 <alt_busy_sleep>
}
   2c110:	e037883a 	mov	sp,fp
   2c114:	dfc00117 	ldw	ra,4(sp)
   2c118:	df000017 	ldw	fp,0(sp)
   2c11c:	dec00204 	addi	sp,sp,8
   2c120:	f800283a 	ret

0002c124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c124:	defffe04 	addi	sp,sp,-8
   2c128:	dfc00115 	stw	ra,4(sp)
   2c12c:	df000015 	stw	fp,0(sp)
   2c130:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2c134:	008000f4 	movhi	r2,3
   2c138:	10be7904 	addi	r2,r2,-1564
   2c13c:	10800017 	ldw	r2,0(r2)
   2c140:	10000526 	beq	r2,zero,2c158 <alt_get_errno+0x34>
   2c144:	008000f4 	movhi	r2,3
   2c148:	10be7904 	addi	r2,r2,-1564
   2c14c:	10800017 	ldw	r2,0(r2)
   2c150:	103ee83a 	callr	r2
   2c154:	00000206 	br	2c160 <alt_get_errno+0x3c>
   2c158:	008000f4 	movhi	r2,3
   2c15c:	10813604 	addi	r2,r2,1240
}
   2c160:	e037883a 	mov	sp,fp
   2c164:	dfc00117 	ldw	ra,4(sp)
   2c168:	df000017 	ldw	fp,0(sp)
   2c16c:	dec00204 	addi	sp,sp,8
   2c170:	f800283a 	ret

0002c174 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2c174:	defff904 	addi	sp,sp,-28
   2c178:	dfc00615 	stw	ra,24(sp)
   2c17c:	df000515 	stw	fp,20(sp)
   2c180:	df000504 	addi	fp,sp,20
   2c184:	e13ffd15 	stw	r4,-12(fp)
   2c188:	e17ffe15 	stw	r5,-8(fp)
   2c18c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2c190:	e0bffd17 	ldw	r2,-12(fp)
   2c194:	10000716 	blt	r2,zero,2c1b4 <write+0x40>
   2c198:	e13ffd17 	ldw	r4,-12(fp)
   2c19c:	01400304 	movi	r5,12
   2c1a0:	00212100 	call	21210 <__mulsi3>
   2c1a4:	00c000f4 	movhi	r3,3
   2c1a8:	18fdf904 	addi	r3,r3,-2076
   2c1ac:	10c5883a 	add	r2,r2,r3
   2c1b0:	00000106 	br	2c1b8 <write+0x44>
   2c1b4:	0005883a 	mov	r2,zero
   2c1b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2c1bc:	e0bffb17 	ldw	r2,-20(fp)
   2c1c0:	10001f26 	beq	r2,zero,2c240 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2c1c4:	e0bffb17 	ldw	r2,-20(fp)
   2c1c8:	10800217 	ldw	r2,8(r2)
   2c1cc:	108000cc 	andi	r2,r2,3
   2c1d0:	10001726 	beq	r2,zero,2c230 <write+0xbc>
   2c1d4:	e0bffb17 	ldw	r2,-20(fp)
   2c1d8:	10800017 	ldw	r2,0(r2)
   2c1dc:	10800617 	ldw	r2,24(r2)
   2c1e0:	10001326 	beq	r2,zero,2c230 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2c1e4:	e0bffb17 	ldw	r2,-20(fp)
   2c1e8:	10800017 	ldw	r2,0(r2)
   2c1ec:	10c00617 	ldw	r3,24(r2)
   2c1f0:	e0bfff17 	ldw	r2,-4(fp)
   2c1f4:	e13ffb17 	ldw	r4,-20(fp)
   2c1f8:	e17ffe17 	ldw	r5,-8(fp)
   2c1fc:	100d883a 	mov	r6,r2
   2c200:	183ee83a 	callr	r3
   2c204:	e0bffc15 	stw	r2,-16(fp)
   2c208:	e0bffc17 	ldw	r2,-16(fp)
   2c20c:	1000060e 	bge	r2,zero,2c228 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2c210:	002c1240 	call	2c124 <alt_get_errno>
   2c214:	e0fffc17 	ldw	r3,-16(fp)
   2c218:	00c7c83a 	sub	r3,zero,r3
   2c21c:	10c00015 	stw	r3,0(r2)
        return -1;
   2c220:	00bfffc4 	movi	r2,-1
   2c224:	00000a06 	br	2c250 <write+0xdc>
      }
      return rval;
   2c228:	e0bffc17 	ldw	r2,-16(fp)
   2c22c:	00000806 	br	2c250 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2c230:	002c1240 	call	2c124 <alt_get_errno>
   2c234:	00c00344 	movi	r3,13
   2c238:	10c00015 	stw	r3,0(r2)
   2c23c:	00000306 	br	2c24c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2c240:	002c1240 	call	2c124 <alt_get_errno>
   2c244:	00c01444 	movi	r3,81
   2c248:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2c24c:	00bfffc4 	movi	r2,-1
}
   2c250:	e037883a 	mov	sp,fp
   2c254:	dfc00117 	ldw	ra,4(sp)
   2c258:	df000017 	ldw	fp,0(sp)
   2c25c:	dec00204 	addi	sp,sp,8
   2c260:	f800283a 	ret

0002c264 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2c264:	defffd04 	addi	sp,sp,-12
   2c268:	dfc00215 	stw	ra,8(sp)
   2c26c:	df000115 	stw	fp,4(sp)
   2c270:	df000104 	addi	fp,sp,4
   2c274:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2c278:	e13fff17 	ldw	r4,-4(fp)
   2c27c:	014000f4 	movhi	r5,3
   2c280:	297e7604 	addi	r5,r5,-1576
   2c284:	002ce600 	call	2ce60 <alt_dev_llist_insert>
}
   2c288:	e037883a 	mov	sp,fp
   2c28c:	dfc00117 	ldw	ra,4(sp)
   2c290:	df000017 	ldw	fp,0(sp)
   2c294:	dec00204 	addi	sp,sp,8
   2c298:	f800283a 	ret

0002c29c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2c29c:	defffd04 	addi	sp,sp,-12
   2c2a0:	dfc00215 	stw	ra,8(sp)
   2c2a4:	df000115 	stw	fp,4(sp)
   2c2a8:	df000104 	addi	fp,sp,4
   2c2ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   2c2b0:	002d7e80 	call	2d7e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2c2b4:	00800044 	movi	r2,1
   2c2b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2c2bc:	e037883a 	mov	sp,fp
   2c2c0:	dfc00117 	ldw	ra,4(sp)
   2c2c4:	df000017 	ldw	fp,0(sp)
   2c2c8:	dec00204 	addi	sp,sp,8
   2c2cc:	f800283a 	ret

0002c2d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2c2d0:	defffe04 	addi	sp,sp,-8
   2c2d4:	dfc00115 	stw	ra,4(sp)
   2c2d8:	df000015 	stw	fp,0(sp)
   2c2dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2c2e0:	01004034 	movhi	r4,256
   2c2e4:	000b883a 	mov	r5,zero
   2c2e8:	01800084 	movi	r6,2
   2c2ec:	01c0fa04 	movi	r7,1000
   2c2f0:	002c5e40 	call	2c5e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2c2f4:	010000f4 	movhi	r4,3
   2c2f8:	213e5904 	addi	r4,r4,-1692
   2c2fc:	002c2640 	call	2c264 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   2c300:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   2c304:	010000f4 	movhi	r4,3
   2c308:	213e6404 	addi	r4,r4,-1648
   2c30c:	002d0a40 	call	2d0a4 <alt_fs_reg>
}
   2c310:	e037883a 	mov	sp,fp
   2c314:	dfc00117 	ldw	ra,4(sp)
   2c318:	df000017 	ldw	fp,0(sp)
   2c31c:	dec00204 	addi	sp,sp,8
   2c320:	f800283a 	ret

0002c324 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2c324:	defffa04 	addi	sp,sp,-24
   2c328:	dfc00515 	stw	ra,20(sp)
   2c32c:	df000415 	stw	fp,16(sp)
   2c330:	df000404 	addi	fp,sp,16
   2c334:	e13ffd15 	stw	r4,-12(fp)
   2c338:	e17ffe15 	stw	r5,-8(fp)
   2c33c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2c340:	e0bffd17 	ldw	r2,-12(fp)
   2c344:	10800017 	ldw	r2,0(r2)
   2c348:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2c34c:	e0bffc17 	ldw	r2,-16(fp)
   2c350:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2c354:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2c358:	10800217 	ldw	r2,8(r2)
   2c35c:	1809883a 	mov	r4,r3
   2c360:	e17ffe17 	ldw	r5,-8(fp)
   2c364:	e1bfff17 	ldw	r6,-4(fp)
   2c368:	100f883a 	mov	r7,r2
   2c36c:	002c3e40 	call	2c3e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2c370:	e037883a 	mov	sp,fp
   2c374:	dfc00117 	ldw	ra,4(sp)
   2c378:	df000017 	ldw	fp,0(sp)
   2c37c:	dec00204 	addi	sp,sp,8
   2c380:	f800283a 	ret

0002c384 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2c384:	defffa04 	addi	sp,sp,-24
   2c388:	dfc00515 	stw	ra,20(sp)
   2c38c:	df000415 	stw	fp,16(sp)
   2c390:	df000404 	addi	fp,sp,16
   2c394:	e13ffd15 	stw	r4,-12(fp)
   2c398:	e17ffe15 	stw	r5,-8(fp)
   2c39c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2c3a0:	e0bffd17 	ldw	r2,-12(fp)
   2c3a4:	10800017 	ldw	r2,0(r2)
   2c3a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2c3ac:	e0bffc17 	ldw	r2,-16(fp)
   2c3b0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2c3b4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2c3b8:	10800217 	ldw	r2,8(r2)
   2c3bc:	1809883a 	mov	r4,r3
   2c3c0:	e17ffe17 	ldw	r5,-8(fp)
   2c3c4:	e1bfff17 	ldw	r6,-4(fp)
   2c3c8:	100f883a 	mov	r7,r2
   2c3cc:	002c4d80 	call	2c4d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2c3d0:	e037883a 	mov	sp,fp
   2c3d4:	dfc00117 	ldw	ra,4(sp)
   2c3d8:	df000017 	ldw	fp,0(sp)
   2c3dc:	dec00204 	addi	sp,sp,8
   2c3e0:	f800283a 	ret

0002c3e4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   2c3e4:	defff704 	addi	sp,sp,-36
   2c3e8:	df000815 	stw	fp,32(sp)
   2c3ec:	df000804 	addi	fp,sp,32
   2c3f0:	e13ffc15 	stw	r4,-16(fp)
   2c3f4:	e17ffd15 	stw	r5,-12(fp)
   2c3f8:	e1bffe15 	stw	r6,-8(fp)
   2c3fc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2c400:	e0bffc17 	ldw	r2,-16(fp)
   2c404:	10800017 	ldw	r2,0(r2)
   2c408:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   2c40c:	e0bffd17 	ldw	r2,-12(fp)
   2c410:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   2c414:	e0bffe17 	ldw	r2,-8(fp)
   2c418:	e0fffd17 	ldw	r3,-12(fp)
   2c41c:	1885883a 	add	r2,r3,r2
   2c420:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   2c424:	00001406 	br	2c478 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2c428:	e0bff917 	ldw	r2,-28(fp)
   2c42c:	10800037 	ldwio	r2,0(r2)
   2c430:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   2c434:	e0bffb17 	ldw	r2,-20(fp)
   2c438:	10a0000c 	andi	r2,r2,32768
   2c43c:	10000826 	beq	r2,zero,2c460 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2c440:	e0bffb17 	ldw	r2,-20(fp)
   2c444:	1007883a 	mov	r3,r2
   2c448:	e0bff817 	ldw	r2,-32(fp)
   2c44c:	10c00005 	stb	r3,0(r2)
   2c450:	e0bff817 	ldw	r2,-32(fp)
   2c454:	10800044 	addi	r2,r2,1
   2c458:	e0bff815 	stw	r2,-32(fp)
   2c45c:	00000606 	br	2c478 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   2c460:	e0fff817 	ldw	r3,-32(fp)
   2c464:	e0bffd17 	ldw	r2,-12(fp)
   2c468:	1880071e 	bne	r3,r2,2c488 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
   2c46c:	e0bfff17 	ldw	r2,-4(fp)
   2c470:	1090000c 	andi	r2,r2,16384
   2c474:	1000061e 	bne	r2,zero,2c490 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   2c478:	e0fff817 	ldw	r3,-32(fp)
   2c47c:	e0bffa17 	ldw	r2,-24(fp)
   2c480:	18bfe936 	bltu	r3,r2,2c428 <altera_avalon_jtag_uart_read+0x44>
   2c484:	00000306 	br	2c494 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   2c488:	0001883a 	nop
   2c48c:	00000106 	br	2c494 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
   2c490:	0001883a 	nop
    
  }

  if (ptr != buffer)
   2c494:	e0fff817 	ldw	r3,-32(fp)
   2c498:	e0bffd17 	ldw	r2,-12(fp)
   2c49c:	18800426 	beq	r3,r2,2c4b0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   2c4a0:	e0fff817 	ldw	r3,-32(fp)
   2c4a4:	e0bffd17 	ldw	r2,-12(fp)
   2c4a8:	1885c83a 	sub	r2,r3,r2
   2c4ac:	00000606 	br	2c4c8 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
   2c4b0:	e0bfff17 	ldw	r2,-4(fp)
   2c4b4:	1090000c 	andi	r2,r2,16384
   2c4b8:	10000226 	beq	r2,zero,2c4c4 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
   2c4bc:	00bffd44 	movi	r2,-11
   2c4c0:	00000106 	br	2c4c8 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
   2c4c4:	00bffec4 	movi	r2,-5
}
   2c4c8:	e037883a 	mov	sp,fp
   2c4cc:	df000017 	ldw	fp,0(sp)
   2c4d0:	dec00104 	addi	sp,sp,4
   2c4d4:	f800283a 	ret

0002c4d8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2c4d8:	defff904 	addi	sp,sp,-28
   2c4dc:	df000615 	stw	fp,24(sp)
   2c4e0:	df000604 	addi	fp,sp,24
   2c4e4:	e13ffc15 	stw	r4,-16(fp)
   2c4e8:	e17ffd15 	stw	r5,-12(fp)
   2c4ec:	e1bffe15 	stw	r6,-8(fp)
   2c4f0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2c4f4:	e0bffc17 	ldw	r2,-16(fp)
   2c4f8:	10800017 	ldw	r2,0(r2)
   2c4fc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   2c500:	e0bffe17 	ldw	r2,-8(fp)
   2c504:	e0fffd17 	ldw	r3,-12(fp)
   2c508:	1885883a 	add	r2,r3,r2
   2c50c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   2c510:	00000f06 	br	2c550 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   2c514:	e0bffa17 	ldw	r2,-24(fp)
   2c518:	10800104 	addi	r2,r2,4
   2c51c:	10800037 	ldwio	r2,0(r2)
   2c520:	10bfffec 	andhi	r2,r2,65535
   2c524:	10000a26 	beq	r2,zero,2c550 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   2c528:	e0bffa17 	ldw	r2,-24(fp)
   2c52c:	e0fffd17 	ldw	r3,-12(fp)
   2c530:	18c00003 	ldbu	r3,0(r3)
   2c534:	18c03fcc 	andi	r3,r3,255
   2c538:	18c0201c 	xori	r3,r3,128
   2c53c:	18ffe004 	addi	r3,r3,-128
   2c540:	e13ffd17 	ldw	r4,-12(fp)
   2c544:	21000044 	addi	r4,r4,1
   2c548:	e13ffd15 	stw	r4,-12(fp)
   2c54c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   2c550:	e0fffd17 	ldw	r3,-12(fp)
   2c554:	e0bffb17 	ldw	r2,-20(fp)
   2c558:	18bfee36 	bltu	r3,r2,2c514 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   2c55c:	e0bffe17 	ldw	r2,-8(fp)
}
   2c560:	e037883a 	mov	sp,fp
   2c564:	df000017 	ldw	fp,0(sp)
   2c568:	dec00104 	addi	sp,sp,4
   2c56c:	f800283a 	ret

0002c570 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2c570:	defffa04 	addi	sp,sp,-24
   2c574:	dfc00515 	stw	ra,20(sp)
   2c578:	df000415 	stw	fp,16(sp)
   2c57c:	df000404 	addi	fp,sp,16
   2c580:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2c584:	0007883a 	mov	r3,zero
   2c588:	e0bfff17 	ldw	r2,-4(fp)
   2c58c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2c590:	e0bfff17 	ldw	r2,-4(fp)
   2c594:	10800104 	addi	r2,r2,4
   2c598:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c59c:	0005303a 	rdctl	r2,status
   2c5a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c5a4:	e0fffd17 	ldw	r3,-12(fp)
   2c5a8:	00bfff84 	movi	r2,-2
   2c5ac:	1884703a 	and	r2,r3,r2
   2c5b0:	1001703a 	wrctl	status,r2
  
  return context;
   2c5b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2c5b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2c5bc:	002d6e40 	call	2d6e4 <alt_tick>
   2c5c0:	e0bffc17 	ldw	r2,-16(fp)
   2c5c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c5c8:	e0bffe17 	ldw	r2,-8(fp)
   2c5cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2c5d0:	e037883a 	mov	sp,fp
   2c5d4:	dfc00117 	ldw	ra,4(sp)
   2c5d8:	df000017 	ldw	fp,0(sp)
   2c5dc:	dec00204 	addi	sp,sp,8
   2c5e0:	f800283a 	ret

0002c5e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2c5e4:	defff804 	addi	sp,sp,-32
   2c5e8:	dfc00715 	stw	ra,28(sp)
   2c5ec:	df000615 	stw	fp,24(sp)
   2c5f0:	df000604 	addi	fp,sp,24
   2c5f4:	e13ffc15 	stw	r4,-16(fp)
   2c5f8:	e17ffd15 	stw	r5,-12(fp)
   2c5fc:	e1bffe15 	stw	r6,-8(fp)
   2c600:	e1ffff15 	stw	r7,-4(fp)
   2c604:	e0bfff17 	ldw	r2,-4(fp)
   2c608:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2c60c:	008000f4 	movhi	r2,3
   2c610:	10814104 	addi	r2,r2,1284
   2c614:	10800017 	ldw	r2,0(r2)
   2c618:	1000041e 	bne	r2,zero,2c62c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2c61c:	008000f4 	movhi	r2,3
   2c620:	10814104 	addi	r2,r2,1284
   2c624:	e0fffb17 	ldw	r3,-20(fp)
   2c628:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2c62c:	e0bffc17 	ldw	r2,-16(fp)
   2c630:	10800104 	addi	r2,r2,4
   2c634:	00c001c4 	movi	r3,7
   2c638:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2c63c:	d8000015 	stw	zero,0(sp)
   2c640:	e13ffd17 	ldw	r4,-12(fp)
   2c644:	e17ffe17 	ldw	r5,-8(fp)
   2c648:	018000f4 	movhi	r6,3
   2c64c:	31b15c04 	addi	r6,r6,-14992
   2c650:	e1fffc17 	ldw	r7,-16(fp)
   2c654:	002d22c0 	call	2d22c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2c658:	e037883a 	mov	sp,fp
   2c65c:	dfc00117 	ldw	ra,4(sp)
   2c660:	df000017 	ldw	fp,0(sp)
   2c664:	dec00204 	addi	sp,sp,8
   2c668:	f800283a 	ret

0002c66c <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   2c66c:	deffeb04 	addi	sp,sp,-84
   2c670:	df001415 	stw	fp,80(sp)
   2c674:	dc401315 	stw	r17,76(sp)
   2c678:	dc001215 	stw	r16,72(sp)
   2c67c:	df001204 	addi	fp,sp,72
   2c680:	e13ffb15 	stw	r4,-20(fp)
   2c684:	e17ffc15 	stw	r5,-16(fp)
   2c688:	e1bffd15 	stw	r6,-12(fp)
   2c68c:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   2c690:	e0bffb17 	ldw	r2,-20(fp)
   2c694:	10800017 	ldw	r2,0(r2)
   2c698:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   2c69c:	e0bfee17 	ldw	r2,-72(fp)
   2c6a0:	10800217 	ldw	r2,8(r2)
   2c6a4:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   2c6a8:	e0bff717 	ldw	r2,-36(fp)
   2c6ac:	10bfffc4 	addi	r2,r2,-1
   2c6b0:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   2c6b4:	e0bff817 	ldw	r2,-32(fp)
   2c6b8:	10800044 	addi	r2,r2,1
   2c6bc:	e0bff815 	stw	r2,-32(fp)
   2c6c0:	e0bff817 	ldw	r2,-32(fp)
   2c6c4:	10800003 	ldbu	r2,0(r2)
   2c6c8:	10803fcc 	andi	r2,r2,255
   2c6cc:	1080201c 	xori	r2,r2,128
   2c6d0:	10bfe004 	addi	r2,r2,-128
   2c6d4:	103ff71e 	bne	r2,zero,2c6b4 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   2c6d8:	e0fff817 	ldw	r3,-32(fp)
   2c6dc:	e0bff717 	ldw	r2,-36(fp)
   2c6e0:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   2c6e4:	10800044 	addi	r2,r2,1
   2c6e8:	e0fffc17 	ldw	r3,-16(fp)
   2c6ec:	1885883a 	add	r2,r3,r2
   2c6f0:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   2c6f4:	d0a01c04 	addi	r2,gp,-32656
   2c6f8:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   2c6fc:	e0bffc17 	ldw	r2,-16(fp)
   2c700:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   2c704:	e0bffd17 	ldw	r2,-12(fp)
   2c708:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   2c70c:	e0bffe17 	ldw	r2,-8(fp)
   2c710:	e0bff215 	stw	r2,-56(fp)
   2c714:	e0bffc17 	ldw	r2,-16(fp)
   2c718:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   2c71c:	e0bff917 	ldw	r2,-28(fp)
   2c720:	10bfffc4 	addi	r2,r2,-1
   2c724:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   2c728:	e0bffa17 	ldw	r2,-24(fp)
   2c72c:	10800044 	addi	r2,r2,1
   2c730:	e0bffa15 	stw	r2,-24(fp)
   2c734:	e0bffa17 	ldw	r2,-24(fp)
   2c738:	10800003 	ldbu	r2,0(r2)
   2c73c:	10803fcc 	andi	r2,r2,255
   2c740:	1080201c 	xori	r2,r2,128
   2c744:	10bfe004 	addi	r2,r2,-128
   2c748:	103ff71e 	bne	r2,zero,2c728 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   2c74c:	e0fffa17 	ldw	r3,-24(fp)
   2c750:	e0bff917 	ldw	r2,-28(fp)
   2c754:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   2c758:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   2c75c:	e13ff017 	ldw	r4,-64(fp)
   2c760:	e13fff15 	stw	r4,-4(fp)
   2c764:	e17ff117 	ldw	r5,-60(fp)
   2c768:	e1bff217 	ldw	r6,-56(fp)
   2c76c:	e1fff317 	ldw	r7,-52(fp)
   2c770:	e0ffef17 	ldw	r3,-68(fp)
   2c774:	1821883a 	mov	r16,r3
   2c778:	8007883a 	mov	r3,r16
   2c77c:	e13fff17 	ldw	r4,-4(fp)
   2c780:	003da07a 	break	1
   2c784:	1821883a 	mov	r16,r3
   2c788:	1023883a 	mov	r17,r2
   2c78c:	e47ff415 	stw	r17,-48(fp)
   2c790:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   2c794:	e0bff417 	ldw	r2,-48(fp)
   2c798:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   2c79c:	e0bfef17 	ldw	r2,-68(fp)
   2c7a0:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   2c7a4:	e0bff617 	ldw	r2,-40(fp)
   2c7a8:	1000031e 	bne	r2,zero,2c7b8 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   2c7ac:	e0bffb17 	ldw	r2,-20(fp)
   2c7b0:	e0fff517 	ldw	r3,-44(fp)
   2c7b4:	10c00115 	stw	r3,4(r2)

  return -error;
   2c7b8:	e0bff617 	ldw	r2,-40(fp)
   2c7bc:	0085c83a 	sub	r2,zero,r2
}
   2c7c0:	e037883a 	mov	sp,fp
   2c7c4:	df000217 	ldw	fp,8(sp)
   2c7c8:	dc400117 	ldw	r17,4(sp)
   2c7cc:	dc000017 	ldw	r16,0(sp)
   2c7d0:	dec00304 	addi	sp,sp,12
   2c7d4:	f800283a 	ret

0002c7d8 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   2c7d8:	defffa04 	addi	sp,sp,-24
   2c7dc:	df000515 	stw	fp,20(sp)
   2c7e0:	dc000415 	stw	r16,16(sp)
   2c7e4:	df000404 	addi	fp,sp,16
   2c7e8:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   2c7ec:	d0a01904 	addi	r2,gp,-32668
   2c7f0:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   2c7f4:	e0bfff17 	ldw	r2,-4(fp)
   2c7f8:	10800117 	ldw	r2,4(r2)
   2c7fc:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   2c800:	e0bffd17 	ldw	r2,-12(fp)
   2c804:	e0fffc17 	ldw	r3,-16(fp)
   2c808:	1821883a 	mov	r16,r3
   2c80c:	8007883a 	mov	r3,r16
   2c810:	1009883a 	mov	r4,r2
   2c814:	003da07a 	break	1
   2c818:	1821883a 	mov	r16,r3
   2c81c:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   2c820:	e0bffc17 	ldw	r2,-16(fp)
   2c824:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   2c828:	e0bffe17 	ldw	r2,-8(fp)
   2c82c:	0085c83a 	sub	r2,zero,r2
}
   2c830:	e037883a 	mov	sp,fp
   2c834:	df000117 	ldw	fp,4(sp)
   2c838:	dc000017 	ldw	r16,0(sp)
   2c83c:	dec00204 	addi	sp,sp,8
   2c840:	f800283a 	ret

0002c844 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   2c844:	defff204 	addi	sp,sp,-56
   2c848:	df000d15 	stw	fp,52(sp)
   2c84c:	dc400c15 	stw	r17,48(sp)
   2c850:	dc000b15 	stw	r16,44(sp)
   2c854:	df000b04 	addi	fp,sp,44
   2c858:	e13ffc15 	stw	r4,-16(fp)
   2c85c:	e17ffd15 	stw	r5,-12(fp)
   2c860:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   2c864:	d0a01604 	addi	r2,gp,-32680
   2c868:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   2c86c:	e0bffc17 	ldw	r2,-16(fp)
   2c870:	10800117 	ldw	r2,4(r2)
   2c874:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   2c878:	e0bffd17 	ldw	r2,-12(fp)
   2c87c:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   2c880:	e0bffe17 	ldw	r2,-8(fp)
   2c884:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   2c888:	e13ff617 	ldw	r4,-40(fp)
   2c88c:	e13fff15 	stw	r4,-4(fp)
   2c890:	e17ff717 	ldw	r5,-36(fp)
   2c894:	e1bff817 	ldw	r6,-32(fp)
   2c898:	e0fff517 	ldw	r3,-44(fp)
   2c89c:	1821883a 	mov	r16,r3
   2c8a0:	8007883a 	mov	r3,r16
   2c8a4:	e13fff17 	ldw	r4,-4(fp)
   2c8a8:	003da07a 	break	1
   2c8ac:	1821883a 	mov	r16,r3
   2c8b0:	1023883a 	mov	r17,r2
   2c8b4:	e47ff915 	stw	r17,-28(fp)
   2c8b8:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   2c8bc:	e0bff917 	ldw	r2,-28(fp)
   2c8c0:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   2c8c4:	e0bff517 	ldw	r2,-44(fp)
   2c8c8:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   2c8cc:	e0bffb17 	ldw	r2,-20(fp)
   2c8d0:	10000326 	beq	r2,zero,2c8e0 <alt_hostfs_read+0x9c>
   2c8d4:	e0bffb17 	ldw	r2,-20(fp)
   2c8d8:	0085c83a 	sub	r2,zero,r2
   2c8dc:	00000106 	br	2c8e4 <alt_hostfs_read+0xa0>
   2c8e0:	e0bffa17 	ldw	r2,-24(fp)
}
   2c8e4:	e037883a 	mov	sp,fp
   2c8e8:	df000217 	ldw	fp,8(sp)
   2c8ec:	dc400117 	ldw	r17,4(sp)
   2c8f0:	dc000017 	ldw	r16,0(sp)
   2c8f4:	dec00304 	addi	sp,sp,12
   2c8f8:	f800283a 	ret

0002c8fc <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   2c8fc:	defff204 	addi	sp,sp,-56
   2c900:	df000d15 	stw	fp,52(sp)
   2c904:	dc400c15 	stw	r17,48(sp)
   2c908:	dc000b15 	stw	r16,44(sp)
   2c90c:	df000b04 	addi	fp,sp,44
   2c910:	e13ffc15 	stw	r4,-16(fp)
   2c914:	e17ffd15 	stw	r5,-12(fp)
   2c918:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   2c91c:	d0a01304 	addi	r2,gp,-32692
   2c920:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   2c924:	e0bffc17 	ldw	r2,-16(fp)
   2c928:	10800117 	ldw	r2,4(r2)
   2c92c:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   2c930:	e0bffd17 	ldw	r2,-12(fp)
   2c934:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   2c938:	e0bffe17 	ldw	r2,-8(fp)
   2c93c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   2c940:	e13ff617 	ldw	r4,-40(fp)
   2c944:	e13fff15 	stw	r4,-4(fp)
   2c948:	e17ff717 	ldw	r5,-36(fp)
   2c94c:	e1bff817 	ldw	r6,-32(fp)
   2c950:	e0fff517 	ldw	r3,-44(fp)
   2c954:	1821883a 	mov	r16,r3
   2c958:	8007883a 	mov	r3,r16
   2c95c:	e13fff17 	ldw	r4,-4(fp)
   2c960:	003da07a 	break	1
   2c964:	1821883a 	mov	r16,r3
   2c968:	1023883a 	mov	r17,r2
   2c96c:	e47ff915 	stw	r17,-28(fp)
   2c970:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   2c974:	e0bff917 	ldw	r2,-28(fp)
   2c978:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   2c97c:	e0bff517 	ldw	r2,-44(fp)
   2c980:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   2c984:	e0bffb17 	ldw	r2,-20(fp)
   2c988:	10000326 	beq	r2,zero,2c998 <alt_hostfs_write+0x9c>
   2c98c:	e0bffb17 	ldw	r2,-20(fp)
   2c990:	0085c83a 	sub	r2,zero,r2
   2c994:	00000106 	br	2c99c <alt_hostfs_write+0xa0>
   2c998:	e0bffa17 	ldw	r2,-24(fp)
}
   2c99c:	e037883a 	mov	sp,fp
   2c9a0:	df000217 	ldw	fp,8(sp)
   2c9a4:	dc400117 	ldw	r17,4(sp)
   2c9a8:	dc000017 	ldw	r16,0(sp)
   2c9ac:	dec00304 	addi	sp,sp,12
   2c9b0:	f800283a 	ret

0002c9b4 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   2c9b4:	defff204 	addi	sp,sp,-56
   2c9b8:	df000d15 	stw	fp,52(sp)
   2c9bc:	dc400c15 	stw	r17,48(sp)
   2c9c0:	dc000b15 	stw	r16,44(sp)
   2c9c4:	df000b04 	addi	fp,sp,44
   2c9c8:	e13ffc15 	stw	r4,-16(fp)
   2c9cc:	e17ffd15 	stw	r5,-12(fp)
   2c9d0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   2c9d4:	d0a01004 	addi	r2,gp,-32704
   2c9d8:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   2c9dc:	e0bffc17 	ldw	r2,-16(fp)
   2c9e0:	10800117 	ldw	r2,4(r2)
   2c9e4:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   2c9e8:	e0bffd17 	ldw	r2,-12(fp)
   2c9ec:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   2c9f0:	e0bffe17 	ldw	r2,-8(fp)
   2c9f4:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   2c9f8:	e13ff617 	ldw	r4,-40(fp)
   2c9fc:	e13fff15 	stw	r4,-4(fp)
   2ca00:	e17ff717 	ldw	r5,-36(fp)
   2ca04:	e1bff817 	ldw	r6,-32(fp)
   2ca08:	e0fff517 	ldw	r3,-44(fp)
   2ca0c:	1821883a 	mov	r16,r3
   2ca10:	8007883a 	mov	r3,r16
   2ca14:	e13fff17 	ldw	r4,-4(fp)
   2ca18:	003da07a 	break	1
   2ca1c:	1821883a 	mov	r16,r3
   2ca20:	1023883a 	mov	r17,r2
   2ca24:	e47ff915 	stw	r17,-28(fp)
   2ca28:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   2ca2c:	e0bff917 	ldw	r2,-28(fp)
   2ca30:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   2ca34:	e0bff517 	ldw	r2,-44(fp)
   2ca38:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   2ca3c:	e0bffb17 	ldw	r2,-20(fp)
   2ca40:	10000326 	beq	r2,zero,2ca50 <alt_hostfs_seek+0x9c>
   2ca44:	e0bffb17 	ldw	r2,-20(fp)
   2ca48:	0085c83a 	sub	r2,zero,r2
   2ca4c:	00000106 	br	2ca54 <alt_hostfs_seek+0xa0>
   2ca50:	e0bffa17 	ldw	r2,-24(fp)
}
   2ca54:	e037883a 	mov	sp,fp
   2ca58:	df000217 	ldw	fp,8(sp)
   2ca5c:	dc400117 	ldw	r17,4(sp)
   2ca60:	dc000017 	ldw	r16,0(sp)
   2ca64:	dec00304 	addi	sp,sp,12
   2ca68:	f800283a 	ret

0002ca6c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   2ca6c:	deffe204 	addi	sp,sp,-120
   2ca70:	df001d15 	stw	fp,116(sp)
   2ca74:	dc401c15 	stw	r17,112(sp)
   2ca78:	dc001b15 	stw	r16,108(sp)
   2ca7c:	df001b04 	addi	fp,sp,108
   2ca80:	e13ffd15 	stw	r4,-12(fp)
   2ca84:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   2ca88:	d0a00d04 	addi	r2,gp,-32716
   2ca8c:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   2ca90:	e0bffd17 	ldw	r2,-12(fp)
   2ca94:	10800117 	ldw	r2,4(r2)
   2ca98:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   2ca9c:	e0bfed04 	addi	r2,fp,-76
   2caa0:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   2caa4:	e13fe717 	ldw	r4,-100(fp)
   2caa8:	e13fff15 	stw	r4,-4(fp)
   2caac:	e17fe817 	ldw	r5,-96(fp)
   2cab0:	e0ffe617 	ldw	r3,-104(fp)
   2cab4:	1821883a 	mov	r16,r3
   2cab8:	8007883a 	mov	r3,r16
   2cabc:	e13fff17 	ldw	r4,-4(fp)
   2cac0:	003da07a 	break	1
   2cac4:	1821883a 	mov	r16,r3
   2cac8:	1023883a 	mov	r17,r2
   2cacc:	e47fe915 	stw	r17,-92(fp)
   2cad0:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   2cad4:	e0bfe917 	ldw	r2,-92(fp)
   2cad8:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   2cadc:	e0bfe617 	ldw	r2,-104(fp)
   2cae0:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   2cae4:	e0bfeb17 	ldw	r2,-84(fp)
   2cae8:	1000621e 	bne	r2,zero,2cc74 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   2caec:	e0bfed04 	addi	r2,fp,-76
   2caf0:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   2caf4:	e0bfe517 	ldw	r2,-108(fp)
   2caf8:	10801004 	addi	r2,r2,64
   2cafc:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   2cb00:	00001606 	br	2cb5c <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   2cb04:	e0bfe517 	ldw	r2,-108(fp)
   2cb08:	10800017 	ldw	r2,0(r2)
   2cb0c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   2cb10:	e0bfe517 	ldw	r2,-108(fp)
   2cb14:	10800017 	ldw	r2,0(r2)
   2cb18:	10803fec 	andhi	r2,r2,255
   2cb1c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   2cb20:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   2cb24:	e0bfe517 	ldw	r2,-108(fp)
   2cb28:	10800017 	ldw	r2,0(r2)
   2cb2c:	10bfc00c 	andi	r2,r2,65280
   2cb30:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   2cb34:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   2cb38:	e0bfe517 	ldw	r2,-108(fp)
   2cb3c:	10800017 	ldw	r2,0(r2)
   2cb40:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   2cb44:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   2cb48:	e0bfe517 	ldw	r2,-108(fp)
   2cb4c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   2cb50:	e0bfe517 	ldw	r2,-108(fp)
   2cb54:	10800104 	addi	r2,r2,4
   2cb58:	e0bfe515 	stw	r2,-108(fp)
   2cb5c:	e0ffe517 	ldw	r3,-108(fp)
   2cb60:	e0bfec17 	ldw	r2,-80(fp)
   2cb64:	18bfe736 	bltu	r3,r2,2cb04 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   2cb68:	e0bffe17 	ldw	r2,-8(fp)
   2cb6c:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   2cb70:	e0bfe517 	ldw	r2,-108(fp)
   2cb74:	10800f04 	addi	r2,r2,60
   2cb78:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   2cb7c:	00000506 	br	2cb94 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   2cb80:	e0bfe517 	ldw	r2,-108(fp)
   2cb84:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   2cb88:	e0bfe517 	ldw	r2,-108(fp)
   2cb8c:	10800104 	addi	r2,r2,4
   2cb90:	e0bfe515 	stw	r2,-108(fp)
   2cb94:	e0ffe517 	ldw	r3,-108(fp)
   2cb98:	e0bfec17 	ldw	r2,-80(fp)
   2cb9c:	18bff836 	bltu	r3,r2,2cb80 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   2cba0:	e0bfed17 	ldw	r2,-76(fp)
   2cba4:	1007883a 	mov	r3,r2
   2cba8:	e0bffe17 	ldw	r2,-8(fp)
   2cbac:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   2cbb0:	e0bfee17 	ldw	r2,-72(fp)
   2cbb4:	1007883a 	mov	r3,r2
   2cbb8:	e0bffe17 	ldw	r2,-8(fp)
   2cbbc:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   2cbc0:	e0ffef17 	ldw	r3,-68(fp)
   2cbc4:	e0bffe17 	ldw	r2,-8(fp)
   2cbc8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   2cbcc:	e0bff017 	ldw	r2,-64(fp)
   2cbd0:	1007883a 	mov	r3,r2
   2cbd4:	e0bffe17 	ldw	r2,-8(fp)
   2cbd8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   2cbdc:	e0bff117 	ldw	r2,-60(fp)
   2cbe0:	1007883a 	mov	r3,r2
   2cbe4:	e0bffe17 	ldw	r2,-8(fp)
   2cbe8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   2cbec:	e0bff217 	ldw	r2,-56(fp)
   2cbf0:	1007883a 	mov	r3,r2
   2cbf4:	e0bffe17 	ldw	r2,-8(fp)
   2cbf8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   2cbfc:	e0bff317 	ldw	r2,-52(fp)
   2cc00:	1007883a 	mov	r3,r2
   2cc04:	e0bffe17 	ldw	r2,-8(fp)
   2cc08:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   2cc0c:	e0bff517 	ldw	r2,-44(fp)
   2cc10:	1007883a 	mov	r3,r2
   2cc14:	e0bffe17 	ldw	r2,-8(fp)
   2cc18:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   2cc1c:	e0bffa17 	ldw	r2,-24(fp)
   2cc20:	1007883a 	mov	r3,r2
   2cc24:	e0bffe17 	ldw	r2,-8(fp)
   2cc28:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   2cc2c:	e0bffb17 	ldw	r2,-20(fp)
   2cc30:	1007883a 	mov	r3,r2
   2cc34:	e0bffe17 	ldw	r2,-8(fp)
   2cc38:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   2cc3c:	e0bffc17 	ldw	r2,-16(fp)
   2cc40:	1007883a 	mov	r3,r2
   2cc44:	e0bffe17 	ldw	r2,-8(fp)
   2cc48:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   2cc4c:	e0bff717 	ldw	r2,-36(fp)
   2cc50:	1007883a 	mov	r3,r2
   2cc54:	e0bffe17 	ldw	r2,-8(fp)
   2cc58:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   2cc5c:	e0bff917 	ldw	r2,-28(fp)
   2cc60:	1007883a 	mov	r3,r2
   2cc64:	e0bffe17 	ldw	r2,-8(fp)
   2cc68:	10c00c15 	stw	r3,48(r2)

    return rc;
   2cc6c:	e0bfea17 	ldw	r2,-88(fp)
   2cc70:	00000206 	br	2cc7c <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   2cc74:	e0bfeb17 	ldw	r2,-84(fp)
   2cc78:	0085c83a 	sub	r2,zero,r2
}
   2cc7c:	e037883a 	mov	sp,fp
   2cc80:	df000217 	ldw	fp,8(sp)
   2cc84:	dc400117 	ldw	r17,4(sp)
   2cc88:	dc000017 	ldw	r16,0(sp)
   2cc8c:	dec00304 	addi	sp,sp,12
   2cc90:	f800283a 	ret

0002cc94 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2cc94:	defffa04 	addi	sp,sp,-24
   2cc98:	dfc00515 	stw	ra,20(sp)
   2cc9c:	df000415 	stw	fp,16(sp)
   2cca0:	df000404 	addi	fp,sp,16
   2cca4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   2cca8:	008000c4 	movi	r2,3
   2ccac:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2ccb0:	e13ffd17 	ldw	r4,-12(fp)
   2ccb4:	014003f4 	movhi	r5,15
   2ccb8:	29509004 	addi	r5,r5,16960
   2ccbc:	00212100 	call	21210 <__mulsi3>
   2ccc0:	00c0bef4 	movhi	r3,763
   2ccc4:	18fc2004 	addi	r3,r3,-3968
   2ccc8:	1885203a 	divu	r2,r3,r2
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2cccc:	00e00034 	movhi	r3,32768
   2ccd0:	18ffffc4 	addi	r3,r3,-1
   2ccd4:	1885203a 	divu	r2,r3,r2
   2ccd8:	e0ffff17 	ldw	r3,-4(fp)
   2ccdc:	1885203a 	divu	r2,r3,r2
   2cce0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2cce4:	e0bffe17 	ldw	r2,-8(fp)
   2cce8:	10002626 	beq	r2,zero,2cd84 <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
   2ccec:	e03ffc15 	stw	zero,-16(fp)
   2ccf0:	00001406 	br	2cd44 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2ccf4:	00a00034 	movhi	r2,32768
   2ccf8:	10bfffc4 	addi	r2,r2,-1
   2ccfc:	10bfffc4 	addi	r2,r2,-1
   2cd00:	103ffe1e 	bne	r2,zero,2ccfc <alt_busy_sleep+0x68>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2cd04:	e13ffd17 	ldw	r4,-12(fp)
   2cd08:	014003f4 	movhi	r5,15
   2cd0c:	29509004 	addi	r5,r5,16960
   2cd10:	00212100 	call	21210 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2cd14:	00c0bef4 	movhi	r3,763
   2cd18:	18fc2004 	addi	r3,r3,-3968
   2cd1c:	1885203a 	divu	r2,r3,r2
   2cd20:	00e00034 	movhi	r3,32768
   2cd24:	18ffffc4 	addi	r3,r3,-1
   2cd28:	1885203a 	divu	r2,r3,r2
   2cd2c:	e0ffff17 	ldw	r3,-4(fp)
   2cd30:	1885c83a 	sub	r2,r3,r2
   2cd34:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2cd38:	e0bffc17 	ldw	r2,-16(fp)
   2cd3c:	10800044 	addi	r2,r2,1
   2cd40:	e0bffc15 	stw	r2,-16(fp)
   2cd44:	e0fffc17 	ldw	r3,-16(fp)
   2cd48:	e0bffe17 	ldw	r2,-8(fp)
   2cd4c:	18bfe916 	blt	r3,r2,2ccf4 <alt_busy_sleep+0x60>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2cd50:	e13ffd17 	ldw	r4,-12(fp)
   2cd54:	014003f4 	movhi	r5,15
   2cd58:	29509004 	addi	r5,r5,16960
   2cd5c:	00212100 	call	21210 <__mulsi3>
   2cd60:	00c0bef4 	movhi	r3,763
   2cd64:	18fc2004 	addi	r3,r3,-3968
   2cd68:	1885203a 	divu	r2,r3,r2
   2cd6c:	1009883a 	mov	r4,r2
   2cd70:	e17fff17 	ldw	r5,-4(fp)
   2cd74:	00212100 	call	21210 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2cd78:	10bfffc4 	addi	r2,r2,-1
   2cd7c:	103ffe1e 	bne	r2,zero,2cd78 <alt_busy_sleep+0xe4>
   2cd80:	00000c06 	br	2cdb4 <alt_busy_sleep+0x120>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2cd84:	e13ffd17 	ldw	r4,-12(fp)
   2cd88:	014003f4 	movhi	r5,15
   2cd8c:	29509004 	addi	r5,r5,16960
   2cd90:	00212100 	call	21210 <__mulsi3>
   2cd94:	00c0bef4 	movhi	r3,763
   2cd98:	18fc2004 	addi	r3,r3,-3968
   2cd9c:	1885203a 	divu	r2,r3,r2
   2cda0:	1009883a 	mov	r4,r2
   2cda4:	e17fff17 	ldw	r5,-4(fp)
   2cda8:	00212100 	call	21210 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2cdac:	10bfffc4 	addi	r2,r2,-1
   2cdb0:	00bffe16 	blt	zero,r2,2cdac <alt_busy_sleep+0x118>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2cdb4:	0005883a 	mov	r2,zero
}
   2cdb8:	e037883a 	mov	sp,fp
   2cdbc:	dfc00117 	ldw	ra,4(sp)
   2cdc0:	df000017 	ldw	fp,0(sp)
   2cdc4:	dec00204 	addi	sp,sp,8
   2cdc8:	f800283a 	ret

0002cdcc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2cdcc:	defffe04 	addi	sp,sp,-8
   2cdd0:	df000115 	stw	fp,4(sp)
   2cdd4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2cdd8:	e03fff15 	stw	zero,-4(fp)
   2cddc:	00000506 	br	2cdf4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2cde0:	e0bfff17 	ldw	r2,-4(fp)
   2cde4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2cde8:	e0bfff17 	ldw	r2,-4(fp)
   2cdec:	10800804 	addi	r2,r2,32
   2cdf0:	e0bfff15 	stw	r2,-4(fp)
   2cdf4:	e0bfff17 	ldw	r2,-4(fp)
   2cdf8:	10900030 	cmpltui	r2,r2,16384
   2cdfc:	103ff81e 	bne	r2,zero,2cde0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ce00:	e037883a 	mov	sp,fp
   2ce04:	df000017 	ldw	fp,0(sp)
   2ce08:	dec00104 	addi	sp,sp,4
   2ce0c:	f800283a 	ret

0002ce10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ce10:	defffe04 	addi	sp,sp,-8
   2ce14:	dfc00115 	stw	ra,4(sp)
   2ce18:	df000015 	stw	fp,0(sp)
   2ce1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ce20:	008000f4 	movhi	r2,3
   2ce24:	10be7904 	addi	r2,r2,-1564
   2ce28:	10800017 	ldw	r2,0(r2)
   2ce2c:	10000526 	beq	r2,zero,2ce44 <alt_get_errno+0x34>
   2ce30:	008000f4 	movhi	r2,3
   2ce34:	10be7904 	addi	r2,r2,-1564
   2ce38:	10800017 	ldw	r2,0(r2)
   2ce3c:	103ee83a 	callr	r2
   2ce40:	00000206 	br	2ce4c <alt_get_errno+0x3c>
   2ce44:	008000f4 	movhi	r2,3
   2ce48:	10813604 	addi	r2,r2,1240
}
   2ce4c:	e037883a 	mov	sp,fp
   2ce50:	dfc00117 	ldw	ra,4(sp)
   2ce54:	df000017 	ldw	fp,0(sp)
   2ce58:	dec00204 	addi	sp,sp,8
   2ce5c:	f800283a 	ret

0002ce60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2ce60:	defffa04 	addi	sp,sp,-24
   2ce64:	dfc00515 	stw	ra,20(sp)
   2ce68:	df000415 	stw	fp,16(sp)
   2ce6c:	df000404 	addi	fp,sp,16
   2ce70:	e13ffe15 	stw	r4,-8(fp)
   2ce74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2ce78:	e0bffe17 	ldw	r2,-8(fp)
   2ce7c:	10000326 	beq	r2,zero,2ce8c <alt_dev_llist_insert+0x2c>
   2ce80:	e0bffe17 	ldw	r2,-8(fp)
   2ce84:	10800217 	ldw	r2,8(r2)
   2ce88:	1000051e 	bne	r2,zero,2cea0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   2ce8c:	002ce100 	call	2ce10 <alt_get_errno>
   2ce90:	00c00584 	movi	r3,22
   2ce94:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   2ce98:	00bffa84 	movi	r2,-22
   2ce9c:	00001306 	br	2ceec <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2cea0:	e0bffe17 	ldw	r2,-8(fp)
   2cea4:	e0ffff17 	ldw	r3,-4(fp)
   2cea8:	e0fffc15 	stw	r3,-16(fp)
   2ceac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ceb0:	e0bffd17 	ldw	r2,-12(fp)
   2ceb4:	e0fffc17 	ldw	r3,-16(fp)
   2ceb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2cebc:	e0bffc17 	ldw	r2,-16(fp)
   2cec0:	10c00017 	ldw	r3,0(r2)
   2cec4:	e0bffd17 	ldw	r2,-12(fp)
   2cec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2cecc:	e0bffc17 	ldw	r2,-16(fp)
   2ced0:	10800017 	ldw	r2,0(r2)
   2ced4:	e0fffd17 	ldw	r3,-12(fp)
   2ced8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2cedc:	e0bffc17 	ldw	r2,-16(fp)
   2cee0:	e0fffd17 	ldw	r3,-12(fp)
   2cee4:	10c00015 	stw	r3,0(r2)

  return 0;  
   2cee8:	0005883a 	mov	r2,zero
}
   2ceec:	e037883a 	mov	sp,fp
   2cef0:	dfc00117 	ldw	ra,4(sp)
   2cef4:	df000017 	ldw	fp,0(sp)
   2cef8:	dec00204 	addi	sp,sp,8
   2cefc:	f800283a 	ret

0002cf00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2cf00:	defffa04 	addi	sp,sp,-24
   2cf04:	dfc00515 	stw	ra,20(sp)
   2cf08:	df000415 	stw	fp,16(sp)
   2cf0c:	df000404 	addi	fp,sp,16
   2cf10:	e13ffe15 	stw	r4,-8(fp)
   2cf14:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2cf18:	e0bfff17 	ldw	r2,-4(fp)
   2cf1c:	10800017 	ldw	r2,0(r2)
   2cf20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2cf24:	e13ffe17 	ldw	r4,-8(fp)
   2cf28:	00236f80 	call	236f8 <strlen>
   2cf2c:	10800044 	addi	r2,r2,1
   2cf30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2cf34:	00000d06 	br	2cf6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2cf38:	e0bffc17 	ldw	r2,-16(fp)
   2cf3c:	10c00217 	ldw	r3,8(r2)
   2cf40:	e0bffd17 	ldw	r2,-12(fp)
   2cf44:	1809883a 	mov	r4,r3
   2cf48:	e17ffe17 	ldw	r5,-8(fp)
   2cf4c:	100d883a 	mov	r6,r2
   2cf50:	002d8cc0 	call	2d8cc <memcmp>
   2cf54:	1000021e 	bne	r2,zero,2cf60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2cf58:	e0bffc17 	ldw	r2,-16(fp)
   2cf5c:	00000706 	br	2cf7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2cf60:	e0bffc17 	ldw	r2,-16(fp)
   2cf64:	10800017 	ldw	r2,0(r2)
   2cf68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2cf6c:	e0fffc17 	ldw	r3,-16(fp)
   2cf70:	e0bfff17 	ldw	r2,-4(fp)
   2cf74:	18bff01e 	bne	r3,r2,2cf38 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2cf78:	0005883a 	mov	r2,zero
}
   2cf7c:	e037883a 	mov	sp,fp
   2cf80:	dfc00117 	ldw	ra,4(sp)
   2cf84:	df000017 	ldw	fp,0(sp)
   2cf88:	dec00204 	addi	sp,sp,8
   2cf8c:	f800283a 	ret

0002cf90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2cf90:	defffb04 	addi	sp,sp,-20
   2cf94:	dfc00415 	stw	ra,16(sp)
   2cf98:	df000315 	stw	fp,12(sp)
   2cf9c:	df000304 	addi	fp,sp,12
   2cfa0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2cfa4:	008000f4 	movhi	r2,3
   2cfa8:	10be7404 	addi	r2,r2,-1584
   2cfac:	10800017 	ldw	r2,0(r2)
   2cfb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2cfb4:	00003106 	br	2d07c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2cfb8:	e0bffd17 	ldw	r2,-12(fp)
   2cfbc:	10800217 	ldw	r2,8(r2)
   2cfc0:	1009883a 	mov	r4,r2
   2cfc4:	00236f80 	call	236f8 <strlen>
   2cfc8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2cfcc:	e0bffd17 	ldw	r2,-12(fp)
   2cfd0:	10c00217 	ldw	r3,8(r2)
   2cfd4:	e0bffe17 	ldw	r2,-8(fp)
   2cfd8:	10bfffc4 	addi	r2,r2,-1
   2cfdc:	1885883a 	add	r2,r3,r2
   2cfe0:	10800003 	ldbu	r2,0(r2)
   2cfe4:	10803fcc 	andi	r2,r2,255
   2cfe8:	1080201c 	xori	r2,r2,128
   2cfec:	10bfe004 	addi	r2,r2,-128
   2cff0:	10800bd8 	cmpnei	r2,r2,47
   2cff4:	1000031e 	bne	r2,zero,2d004 <alt_find_file+0x74>
    {
      len -= 1;
   2cff8:	e0bffe17 	ldw	r2,-8(fp)
   2cffc:	10bfffc4 	addi	r2,r2,-1
   2d000:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2d004:	e0bffe17 	ldw	r2,-8(fp)
   2d008:	e0ffff17 	ldw	r3,-4(fp)
   2d00c:	1885883a 	add	r2,r3,r2
   2d010:	10800003 	ldbu	r2,0(r2)
   2d014:	10803fcc 	andi	r2,r2,255
   2d018:	1080201c 	xori	r2,r2,128
   2d01c:	10bfe004 	addi	r2,r2,-128
   2d020:	10800be0 	cmpeqi	r2,r2,47
   2d024:	1000081e 	bne	r2,zero,2d048 <alt_find_file+0xb8>
   2d028:	e0bffe17 	ldw	r2,-8(fp)
   2d02c:	e0ffff17 	ldw	r3,-4(fp)
   2d030:	1885883a 	add	r2,r3,r2
   2d034:	10800003 	ldbu	r2,0(r2)
   2d038:	10803fcc 	andi	r2,r2,255
   2d03c:	1080201c 	xori	r2,r2,128
   2d040:	10bfe004 	addi	r2,r2,-128
   2d044:	10000a1e 	bne	r2,zero,2d070 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2d048:	e0bffd17 	ldw	r2,-12(fp)
   2d04c:	10c00217 	ldw	r3,8(r2)
   2d050:	e0bffe17 	ldw	r2,-8(fp)
   2d054:	1809883a 	mov	r4,r3
   2d058:	e17fff17 	ldw	r5,-4(fp)
   2d05c:	100d883a 	mov	r6,r2
   2d060:	002d8cc0 	call	2d8cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2d064:	1000021e 	bne	r2,zero,2d070 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2d068:	e0bffd17 	ldw	r2,-12(fp)
   2d06c:	00000806 	br	2d090 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2d070:	e0bffd17 	ldw	r2,-12(fp)
   2d074:	10800017 	ldw	r2,0(r2)
   2d078:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2d07c:	e0fffd17 	ldw	r3,-12(fp)
   2d080:	008000f4 	movhi	r2,3
   2d084:	10be7404 	addi	r2,r2,-1584
   2d088:	18bfcb1e 	bne	r3,r2,2cfb8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2d08c:	0005883a 	mov	r2,zero
}
   2d090:	e037883a 	mov	sp,fp
   2d094:	dfc00117 	ldw	ra,4(sp)
   2d098:	df000017 	ldw	fp,0(sp)
   2d09c:	dec00204 	addi	sp,sp,8
   2d0a0:	f800283a 	ret

0002d0a4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   2d0a4:	defffc04 	addi	sp,sp,-16
   2d0a8:	df000315 	stw	fp,12(sp)
   2d0ac:	df000304 	addi	fp,sp,12
   2d0b0:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   2d0b4:	e0bfff17 	ldw	r2,-4(fp)
   2d0b8:	10800217 	ldw	r2,8(r2)
   2d0bc:	1000021e 	bne	r2,zero,2d0c8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   2d0c0:	00bffb44 	movi	r2,-19
   2d0c4:	00001406 	br	2d118 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   2d0c8:	e0bfff17 	ldw	r2,-4(fp)
   2d0cc:	00c000f4 	movhi	r3,3
   2d0d0:	18fe7404 	addi	r3,r3,-1584
   2d0d4:	e0fffd15 	stw	r3,-12(fp)
   2d0d8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2d0dc:	e0bffe17 	ldw	r2,-8(fp)
   2d0e0:	e0fffd17 	ldw	r3,-12(fp)
   2d0e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2d0e8:	e0bffd17 	ldw	r2,-12(fp)
   2d0ec:	10c00017 	ldw	r3,0(r2)
   2d0f0:	e0bffe17 	ldw	r2,-8(fp)
   2d0f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2d0f8:	e0bffd17 	ldw	r2,-12(fp)
   2d0fc:	10800017 	ldw	r2,0(r2)
   2d100:	e0fffe17 	ldw	r3,-8(fp)
   2d104:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2d108:	e0bffd17 	ldw	r2,-12(fp)
   2d10c:	e0fffe17 	ldw	r3,-8(fp)
   2d110:	10c00015 	stw	r3,0(r2)

  return 0;
   2d114:	0005883a 	mov	r2,zero
} 
   2d118:	e037883a 	mov	sp,fp
   2d11c:	df000017 	ldw	fp,0(sp)
   2d120:	dec00104 	addi	sp,sp,4
   2d124:	f800283a 	ret

0002d128 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2d128:	defffa04 	addi	sp,sp,-24
   2d12c:	dfc00515 	stw	ra,20(sp)
   2d130:	df000415 	stw	fp,16(sp)
   2d134:	dc000315 	stw	r16,12(sp)
   2d138:	df000304 	addi	fp,sp,12
   2d13c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2d140:	00bffa04 	movi	r2,-24
   2d144:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2d148:	e03ffd15 	stw	zero,-12(fp)
   2d14c:	00002106 	br	2d1d4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2d150:	040000f4 	movhi	r16,3
   2d154:	843df904 	addi	r16,r16,-2076
   2d158:	e0bffd17 	ldw	r2,-12(fp)
   2d15c:	1009883a 	mov	r4,r2
   2d160:	01400304 	movi	r5,12
   2d164:	00212100 	call	21210 <__mulsi3>
   2d168:	8085883a 	add	r2,r16,r2
   2d16c:	10800017 	ldw	r2,0(r2)
   2d170:	1000151e 	bne	r2,zero,2d1c8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2d174:	040000f4 	movhi	r16,3
   2d178:	843df904 	addi	r16,r16,-2076
   2d17c:	e0bffd17 	ldw	r2,-12(fp)
   2d180:	1009883a 	mov	r4,r2
   2d184:	01400304 	movi	r5,12
   2d188:	00212100 	call	21210 <__mulsi3>
   2d18c:	8085883a 	add	r2,r16,r2
   2d190:	e0ffff17 	ldw	r3,-4(fp)
   2d194:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2d198:	008000f4 	movhi	r2,3
   2d19c:	10be7804 	addi	r2,r2,-1568
   2d1a0:	10c00017 	ldw	r3,0(r2)
   2d1a4:	e0bffd17 	ldw	r2,-12(fp)
   2d1a8:	1880040e 	bge	r3,r2,2d1bc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2d1ac:	008000f4 	movhi	r2,3
   2d1b0:	10be7804 	addi	r2,r2,-1568
   2d1b4:	e0fffd17 	ldw	r3,-12(fp)
   2d1b8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2d1bc:	e0bffd17 	ldw	r2,-12(fp)
   2d1c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2d1c4:	00000606 	br	2d1e0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2d1c8:	e0bffd17 	ldw	r2,-12(fp)
   2d1cc:	10800044 	addi	r2,r2,1
   2d1d0:	e0bffd15 	stw	r2,-12(fp)
   2d1d4:	e0bffd17 	ldw	r2,-12(fp)
   2d1d8:	10800810 	cmplti	r2,r2,32
   2d1dc:	103fdc1e 	bne	r2,zero,2d150 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2d1e0:	e0bffe17 	ldw	r2,-8(fp)
}
   2d1e4:	e037883a 	mov	sp,fp
   2d1e8:	dfc00217 	ldw	ra,8(sp)
   2d1ec:	df000117 	ldw	fp,4(sp)
   2d1f0:	dc000017 	ldw	r16,0(sp)
   2d1f4:	dec00304 	addi	sp,sp,12
   2d1f8:	f800283a 	ret

0002d1fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2d1fc:	defffe04 	addi	sp,sp,-8
   2d200:	dfc00115 	stw	ra,4(sp)
   2d204:	df000015 	stw	fp,0(sp)
   2d208:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2d20c:	0009883a 	mov	r4,zero
   2d210:	01500004 	movi	r5,16384
   2d214:	002d8080 	call	2d808 <alt_icache_flush>
#endif
}
   2d218:	e037883a 	mov	sp,fp
   2d21c:	dfc00117 	ldw	ra,4(sp)
   2d220:	df000017 	ldw	fp,0(sp)
   2d224:	dec00204 	addi	sp,sp,8
   2d228:	f800283a 	ret

0002d22c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d22c:	defff904 	addi	sp,sp,-28
   2d230:	dfc00615 	stw	ra,24(sp)
   2d234:	df000515 	stw	fp,20(sp)
   2d238:	df000504 	addi	fp,sp,20
   2d23c:	e13ffc15 	stw	r4,-16(fp)
   2d240:	e17ffd15 	stw	r5,-12(fp)
   2d244:	e1bffe15 	stw	r6,-8(fp)
   2d248:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2d24c:	e0800217 	ldw	r2,8(fp)
   2d250:	d8800015 	stw	r2,0(sp)
   2d254:	e13ffc17 	ldw	r4,-16(fp)
   2d258:	e17ffd17 	ldw	r5,-12(fp)
   2d25c:	e1bffe17 	ldw	r6,-8(fp)
   2d260:	e1ffff17 	ldw	r7,-4(fp)
   2d264:	002d4040 	call	2d404 <alt_iic_isr_register>
}  
   2d268:	e037883a 	mov	sp,fp
   2d26c:	dfc00117 	ldw	ra,4(sp)
   2d270:	df000017 	ldw	fp,0(sp)
   2d274:	dec00204 	addi	sp,sp,8
   2d278:	f800283a 	ret

0002d27c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2d27c:	defff904 	addi	sp,sp,-28
   2d280:	df000615 	stw	fp,24(sp)
   2d284:	df000604 	addi	fp,sp,24
   2d288:	e13ffe15 	stw	r4,-8(fp)
   2d28c:	e17fff15 	stw	r5,-4(fp)
   2d290:	e0bfff17 	ldw	r2,-4(fp)
   2d294:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d298:	0005303a 	rdctl	r2,status
   2d29c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d2a0:	e0fffb17 	ldw	r3,-20(fp)
   2d2a4:	00bfff84 	movi	r2,-2
   2d2a8:	1884703a 	and	r2,r3,r2
   2d2ac:	1001703a 	wrctl	status,r2
  
  return context;
   2d2b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d2b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2d2b8:	e0bffa17 	ldw	r2,-24(fp)
   2d2bc:	00c00044 	movi	r3,1
   2d2c0:	1884983a 	sll	r2,r3,r2
   2d2c4:	1007883a 	mov	r3,r2
   2d2c8:	008000f4 	movhi	r2,3
   2d2cc:	10814004 	addi	r2,r2,1280
   2d2d0:	10800017 	ldw	r2,0(r2)
   2d2d4:	1886b03a 	or	r3,r3,r2
   2d2d8:	008000f4 	movhi	r2,3
   2d2dc:	10814004 	addi	r2,r2,1280
   2d2e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d2e4:	008000f4 	movhi	r2,3
   2d2e8:	10814004 	addi	r2,r2,1280
   2d2ec:	10800017 	ldw	r2,0(r2)
   2d2f0:	100170fa 	wrctl	ienable,r2
   2d2f4:	e0bffc17 	ldw	r2,-16(fp)
   2d2f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d2fc:	e0bffd17 	ldw	r2,-12(fp)
   2d300:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d304:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2d308:	e037883a 	mov	sp,fp
   2d30c:	df000017 	ldw	fp,0(sp)
   2d310:	dec00104 	addi	sp,sp,4
   2d314:	f800283a 	ret

0002d318 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2d318:	defff904 	addi	sp,sp,-28
   2d31c:	df000615 	stw	fp,24(sp)
   2d320:	df000604 	addi	fp,sp,24
   2d324:	e13ffe15 	stw	r4,-8(fp)
   2d328:	e17fff15 	stw	r5,-4(fp)
   2d32c:	e0bfff17 	ldw	r2,-4(fp)
   2d330:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d334:	0005303a 	rdctl	r2,status
   2d338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d33c:	e0fffb17 	ldw	r3,-20(fp)
   2d340:	00bfff84 	movi	r2,-2
   2d344:	1884703a 	and	r2,r3,r2
   2d348:	1001703a 	wrctl	status,r2
  
  return context;
   2d34c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d350:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2d354:	e0bffa17 	ldw	r2,-24(fp)
   2d358:	00c00044 	movi	r3,1
   2d35c:	1884983a 	sll	r2,r3,r2
   2d360:	0084303a 	nor	r2,zero,r2
   2d364:	1007883a 	mov	r3,r2
   2d368:	008000f4 	movhi	r2,3
   2d36c:	10814004 	addi	r2,r2,1280
   2d370:	10800017 	ldw	r2,0(r2)
   2d374:	1886703a 	and	r3,r3,r2
   2d378:	008000f4 	movhi	r2,3
   2d37c:	10814004 	addi	r2,r2,1280
   2d380:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d384:	008000f4 	movhi	r2,3
   2d388:	10814004 	addi	r2,r2,1280
   2d38c:	10800017 	ldw	r2,0(r2)
   2d390:	100170fa 	wrctl	ienable,r2
   2d394:	e0bffc17 	ldw	r2,-16(fp)
   2d398:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d39c:	e0bffd17 	ldw	r2,-12(fp)
   2d3a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d3a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2d3a8:	e037883a 	mov	sp,fp
   2d3ac:	df000017 	ldw	fp,0(sp)
   2d3b0:	dec00104 	addi	sp,sp,4
   2d3b4:	f800283a 	ret

0002d3b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2d3b8:	defffc04 	addi	sp,sp,-16
   2d3bc:	df000315 	stw	fp,12(sp)
   2d3c0:	df000304 	addi	fp,sp,12
   2d3c4:	e13ffe15 	stw	r4,-8(fp)
   2d3c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2d3cc:	000530fa 	rdctl	r2,ienable
   2d3d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2d3d4:	e0bfff17 	ldw	r2,-4(fp)
   2d3d8:	00c00044 	movi	r3,1
   2d3dc:	1884983a 	sll	r2,r3,r2
   2d3e0:	1007883a 	mov	r3,r2
   2d3e4:	e0bffd17 	ldw	r2,-12(fp)
   2d3e8:	1884703a 	and	r2,r3,r2
   2d3ec:	1004c03a 	cmpne	r2,r2,zero
   2d3f0:	10803fcc 	andi	r2,r2,255
}
   2d3f4:	e037883a 	mov	sp,fp
   2d3f8:	df000017 	ldw	fp,0(sp)
   2d3fc:	dec00104 	addi	sp,sp,4
   2d400:	f800283a 	ret

0002d404 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d404:	defff504 	addi	sp,sp,-44
   2d408:	dfc00a15 	stw	ra,40(sp)
   2d40c:	df000915 	stw	fp,36(sp)
   2d410:	df000904 	addi	fp,sp,36
   2d414:	e13ffc15 	stw	r4,-16(fp)
   2d418:	e17ffd15 	stw	r5,-12(fp)
   2d41c:	e1bffe15 	stw	r6,-8(fp)
   2d420:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2d424:	00bffa84 	movi	r2,-22
   2d428:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2d42c:	e0bffd17 	ldw	r2,-12(fp)
   2d430:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2d434:	e0bff817 	ldw	r2,-32(fp)
   2d438:	10800808 	cmpgei	r2,r2,32
   2d43c:	1000271e 	bne	r2,zero,2d4dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d440:	0005303a 	rdctl	r2,status
   2d444:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d448:	e0fffa17 	ldw	r3,-24(fp)
   2d44c:	00bfff84 	movi	r2,-2
   2d450:	1884703a 	and	r2,r3,r2
   2d454:	1001703a 	wrctl	status,r2
  
  return context;
   2d458:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2d45c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2d460:	00c000f4 	movhi	r3,3
   2d464:	18c14d04 	addi	r3,r3,1332
   2d468:	e0bff817 	ldw	r2,-32(fp)
   2d46c:	100490fa 	slli	r2,r2,3
   2d470:	1885883a 	add	r2,r3,r2
   2d474:	e0fffe17 	ldw	r3,-8(fp)
   2d478:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2d47c:	00c000f4 	movhi	r3,3
   2d480:	18c14d04 	addi	r3,r3,1332
   2d484:	e0bff817 	ldw	r2,-32(fp)
   2d488:	100490fa 	slli	r2,r2,3
   2d48c:	1885883a 	add	r2,r3,r2
   2d490:	10800104 	addi	r2,r2,4
   2d494:	e0ffff17 	ldw	r3,-4(fp)
   2d498:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2d49c:	e0bffe17 	ldw	r2,-8(fp)
   2d4a0:	10000526 	beq	r2,zero,2d4b8 <alt_iic_isr_register+0xb4>
   2d4a4:	e0bff817 	ldw	r2,-32(fp)
   2d4a8:	e13ffc17 	ldw	r4,-16(fp)
   2d4ac:	100b883a 	mov	r5,r2
   2d4b0:	002d27c0 	call	2d27c <alt_ic_irq_enable>
   2d4b4:	00000406 	br	2d4c8 <alt_iic_isr_register+0xc4>
   2d4b8:	e0bff817 	ldw	r2,-32(fp)
   2d4bc:	e13ffc17 	ldw	r4,-16(fp)
   2d4c0:	100b883a 	mov	r5,r2
   2d4c4:	002d3180 	call	2d318 <alt_ic_irq_disable>
   2d4c8:	e0bff715 	stw	r2,-36(fp)
   2d4cc:	e0bff917 	ldw	r2,-28(fp)
   2d4d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d4d4:	e0bffb17 	ldw	r2,-20(fp)
   2d4d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2d4dc:	e0bff717 	ldw	r2,-36(fp)
}
   2d4e0:	e037883a 	mov	sp,fp
   2d4e4:	dfc00117 	ldw	ra,4(sp)
   2d4e8:	df000017 	ldw	fp,0(sp)
   2d4ec:	dec00204 	addi	sp,sp,8
   2d4f0:	f800283a 	ret

0002d4f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2d4f4:	defff804 	addi	sp,sp,-32
   2d4f8:	dfc00715 	stw	ra,28(sp)
   2d4fc:	df000615 	stw	fp,24(sp)
   2d500:	dc000515 	stw	r16,20(sp)
   2d504:	df000504 	addi	fp,sp,20
   2d508:	e13ffc15 	stw	r4,-16(fp)
   2d50c:	e17ffd15 	stw	r5,-12(fp)
   2d510:	e1bffe15 	stw	r6,-8(fp)
   2d514:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2d518:	e13ffd17 	ldw	r4,-12(fp)
   2d51c:	e17ffe17 	ldw	r5,-8(fp)
   2d520:	e1bfff17 	ldw	r6,-4(fp)
   2d524:	002bd280 	call	2bd28 <open>
   2d528:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2d52c:	e0bffb17 	ldw	r2,-20(fp)
   2d530:	10002216 	blt	r2,zero,2d5bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2d534:	040000f4 	movhi	r16,3
   2d538:	843df904 	addi	r16,r16,-2076
   2d53c:	e0bffb17 	ldw	r2,-20(fp)
   2d540:	1009883a 	mov	r4,r2
   2d544:	01400304 	movi	r5,12
   2d548:	00212100 	call	21210 <__mulsi3>
   2d54c:	8085883a 	add	r2,r16,r2
   2d550:	10c00017 	ldw	r3,0(r2)
   2d554:	e0bffc17 	ldw	r2,-16(fp)
   2d558:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2d55c:	040000f4 	movhi	r16,3
   2d560:	843df904 	addi	r16,r16,-2076
   2d564:	e0bffb17 	ldw	r2,-20(fp)
   2d568:	1009883a 	mov	r4,r2
   2d56c:	01400304 	movi	r5,12
   2d570:	00212100 	call	21210 <__mulsi3>
   2d574:	8085883a 	add	r2,r16,r2
   2d578:	10800104 	addi	r2,r2,4
   2d57c:	10c00017 	ldw	r3,0(r2)
   2d580:	e0bffc17 	ldw	r2,-16(fp)
   2d584:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2d588:	040000f4 	movhi	r16,3
   2d58c:	843df904 	addi	r16,r16,-2076
   2d590:	e0bffb17 	ldw	r2,-20(fp)
   2d594:	1009883a 	mov	r4,r2
   2d598:	01400304 	movi	r5,12
   2d59c:	00212100 	call	21210 <__mulsi3>
   2d5a0:	8085883a 	add	r2,r16,r2
   2d5a4:	10800204 	addi	r2,r2,8
   2d5a8:	10c00017 	ldw	r3,0(r2)
   2d5ac:	e0bffc17 	ldw	r2,-16(fp)
   2d5b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2d5b4:	e13ffb17 	ldw	r4,-20(fp)
   2d5b8:	002bfc40 	call	2bfc4 <alt_release_fd>
  }
} 
   2d5bc:	e037883a 	mov	sp,fp
   2d5c0:	dfc00217 	ldw	ra,8(sp)
   2d5c4:	df000117 	ldw	fp,4(sp)
   2d5c8:	dc000017 	ldw	r16,0(sp)
   2d5cc:	dec00304 	addi	sp,sp,12
   2d5d0:	f800283a 	ret

0002d5d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2d5d4:	defffb04 	addi	sp,sp,-20
   2d5d8:	dfc00415 	stw	ra,16(sp)
   2d5dc:	df000315 	stw	fp,12(sp)
   2d5e0:	df000304 	addi	fp,sp,12
   2d5e4:	e13ffd15 	stw	r4,-12(fp)
   2d5e8:	e17ffe15 	stw	r5,-8(fp)
   2d5ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2d5f0:	010000f4 	movhi	r4,3
   2d5f4:	213dfc04 	addi	r4,r4,-2064
   2d5f8:	e17ffd17 	ldw	r5,-12(fp)
   2d5fc:	01800044 	movi	r6,1
   2d600:	01c07fc4 	movi	r7,511
   2d604:	002d4f40 	call	2d4f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2d608:	010000f4 	movhi	r4,3
   2d60c:	213df904 	addi	r4,r4,-2076
   2d610:	e17ffe17 	ldw	r5,-8(fp)
   2d614:	000d883a 	mov	r6,zero
   2d618:	01c07fc4 	movi	r7,511
   2d61c:	002d4f40 	call	2d4f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2d620:	010000f4 	movhi	r4,3
   2d624:	213dff04 	addi	r4,r4,-2052
   2d628:	e17fff17 	ldw	r5,-4(fp)
   2d62c:	01800044 	movi	r6,1
   2d630:	01c07fc4 	movi	r7,511
   2d634:	002d4f40 	call	2d4f4 <alt_open_fd>
}  
   2d638:	e037883a 	mov	sp,fp
   2d63c:	dfc00117 	ldw	ra,4(sp)
   2d640:	df000017 	ldw	fp,0(sp)
   2d644:	dec00204 	addi	sp,sp,8
   2d648:	f800283a 	ret

0002d64c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2d64c:	defffa04 	addi	sp,sp,-24
   2d650:	df000515 	stw	fp,20(sp)
   2d654:	df000504 	addi	fp,sp,20
   2d658:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d65c:	0005303a 	rdctl	r2,status
   2d660:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d664:	e0fffc17 	ldw	r3,-16(fp)
   2d668:	00bfff84 	movi	r2,-2
   2d66c:	1884703a 	and	r2,r3,r2
   2d670:	1001703a 	wrctl	status,r2
  
  return context;
   2d674:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2d678:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2d67c:	e0bfff17 	ldw	r2,-4(fp)
   2d680:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2d684:	e0bffd17 	ldw	r2,-12(fp)
   2d688:	10800017 	ldw	r2,0(r2)
   2d68c:	e0fffd17 	ldw	r3,-12(fp)
   2d690:	18c00117 	ldw	r3,4(r3)
   2d694:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2d698:	e0bffd17 	ldw	r2,-12(fp)
   2d69c:	10800117 	ldw	r2,4(r2)
   2d6a0:	e0fffd17 	ldw	r3,-12(fp)
   2d6a4:	18c00017 	ldw	r3,0(r3)
   2d6a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2d6ac:	e0bffd17 	ldw	r2,-12(fp)
   2d6b0:	e0fffd17 	ldw	r3,-12(fp)
   2d6b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2d6b8:	e0bffd17 	ldw	r2,-12(fp)
   2d6bc:	e0fffd17 	ldw	r3,-12(fp)
   2d6c0:	10c00015 	stw	r3,0(r2)
   2d6c4:	e0bffb17 	ldw	r2,-20(fp)
   2d6c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d6cc:	e0bffe17 	ldw	r2,-8(fp)
   2d6d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2d6d4:	e037883a 	mov	sp,fp
   2d6d8:	df000017 	ldw	fp,0(sp)
   2d6dc:	dec00104 	addi	sp,sp,4
   2d6e0:	f800283a 	ret

0002d6e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2d6e4:	defffb04 	addi	sp,sp,-20
   2d6e8:	dfc00415 	stw	ra,16(sp)
   2d6ec:	df000315 	stw	fp,12(sp)
   2d6f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2d6f4:	d0a02017 	ldw	r2,-32640(gp)
   2d6f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2d6fc:	d0a2d417 	ldw	r2,-29872(gp)
   2d700:	10800044 	addi	r2,r2,1
   2d704:	d0a2d415 	stw	r2,-29872(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2d708:	00002e06 	br	2d7c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2d70c:	e0bffd17 	ldw	r2,-12(fp)
   2d710:	10800017 	ldw	r2,0(r2)
   2d714:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2d718:	e0bffd17 	ldw	r2,-12(fp)
   2d71c:	10800403 	ldbu	r2,16(r2)
   2d720:	10803fcc 	andi	r2,r2,255
   2d724:	10000426 	beq	r2,zero,2d738 <alt_tick+0x54>
   2d728:	d0a2d417 	ldw	r2,-29872(gp)
   2d72c:	1000021e 	bne	r2,zero,2d738 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2d730:	e0bffd17 	ldw	r2,-12(fp)
   2d734:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2d738:	e0bffd17 	ldw	r2,-12(fp)
   2d73c:	10800217 	ldw	r2,8(r2)
   2d740:	d0e2d417 	ldw	r3,-29872(gp)
   2d744:	18801d36 	bltu	r3,r2,2d7bc <alt_tick+0xd8>
   2d748:	e0bffd17 	ldw	r2,-12(fp)
   2d74c:	10800403 	ldbu	r2,16(r2)
   2d750:	10803fcc 	andi	r2,r2,255
   2d754:	1000191e 	bne	r2,zero,2d7bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2d758:	e0bffd17 	ldw	r2,-12(fp)
   2d75c:	10c00317 	ldw	r3,12(r2)
   2d760:	e0bffd17 	ldw	r2,-12(fp)
   2d764:	10800517 	ldw	r2,20(r2)
   2d768:	1009883a 	mov	r4,r2
   2d76c:	183ee83a 	callr	r3
   2d770:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2d774:	e0bfff17 	ldw	r2,-4(fp)
   2d778:	1000031e 	bne	r2,zero,2d788 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2d77c:	e13ffd17 	ldw	r4,-12(fp)
   2d780:	002d64c0 	call	2d64c <alt_alarm_stop>
   2d784:	00000d06 	br	2d7bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2d788:	e0bffd17 	ldw	r2,-12(fp)
   2d78c:	10c00217 	ldw	r3,8(r2)
   2d790:	e0bfff17 	ldw	r2,-4(fp)
   2d794:	1887883a 	add	r3,r3,r2
   2d798:	e0bffd17 	ldw	r2,-12(fp)
   2d79c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2d7a0:	e0bffd17 	ldw	r2,-12(fp)
   2d7a4:	10c00217 	ldw	r3,8(r2)
   2d7a8:	d0a2d417 	ldw	r2,-29872(gp)
   2d7ac:	1880032e 	bgeu	r3,r2,2d7bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2d7b0:	e0bffd17 	ldw	r2,-12(fp)
   2d7b4:	00c00044 	movi	r3,1
   2d7b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2d7bc:	e0bffe17 	ldw	r2,-8(fp)
   2d7c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2d7c4:	e0fffd17 	ldw	r3,-12(fp)
   2d7c8:	d0a02004 	addi	r2,gp,-32640
   2d7cc:	18bfcf1e 	bne	r3,r2,2d70c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2d7d0:	0001883a 	nop
}
   2d7d4:	e037883a 	mov	sp,fp
   2d7d8:	dfc00117 	ldw	ra,4(sp)
   2d7dc:	df000017 	ldw	fp,0(sp)
   2d7e0:	dec00204 	addi	sp,sp,8
   2d7e4:	f800283a 	ret

0002d7e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2d7e8:	deffff04 	addi	sp,sp,-4
   2d7ec:	df000015 	stw	fp,0(sp)
   2d7f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2d7f4:	000170fa 	wrctl	ienable,zero
}
   2d7f8:	e037883a 	mov	sp,fp
   2d7fc:	df000017 	ldw	fp,0(sp)
   2d800:	dec00104 	addi	sp,sp,4
   2d804:	f800283a 	ret

0002d808 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2d808:	defffb04 	addi	sp,sp,-20
   2d80c:	df000415 	stw	fp,16(sp)
   2d810:	df000404 	addi	fp,sp,16
   2d814:	e13ffe15 	stw	r4,-8(fp)
   2d818:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2d81c:	e0bfff17 	ldw	r2,-4(fp)
   2d820:	10900070 	cmpltui	r2,r2,16385
   2d824:	1000021e 	bne	r2,zero,2d830 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2d828:	00900004 	movi	r2,16384
   2d82c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2d830:	e0fffe17 	ldw	r3,-8(fp)
   2d834:	e0bfff17 	ldw	r2,-4(fp)
   2d838:	1885883a 	add	r2,r3,r2
   2d83c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2d840:	e0bffe17 	ldw	r2,-8(fp)
   2d844:	e0bffc15 	stw	r2,-16(fp)
   2d848:	00000506 	br	2d860 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2d84c:	e0bffc17 	ldw	r2,-16(fp)
   2d850:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2d854:	e0bffc17 	ldw	r2,-16(fp)
   2d858:	10800804 	addi	r2,r2,32
   2d85c:	e0bffc15 	stw	r2,-16(fp)
   2d860:	e0fffc17 	ldw	r3,-16(fp)
   2d864:	e0bffd17 	ldw	r2,-12(fp)
   2d868:	18bff836 	bltu	r3,r2,2d84c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2d86c:	e0bffe17 	ldw	r2,-8(fp)
   2d870:	108007cc 	andi	r2,r2,31
   2d874:	10000226 	beq	r2,zero,2d880 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2d878:	e0bffc17 	ldw	r2,-16(fp)
   2d87c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2d880:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2d884:	e037883a 	mov	sp,fp
   2d888:	df000017 	ldw	fp,0(sp)
   2d88c:	dec00104 	addi	sp,sp,4
   2d890:	f800283a 	ret

0002d894 <exit>:
   2d894:	defffe04 	addi	sp,sp,-8
   2d898:	000b883a 	mov	r5,zero
   2d89c:	dc000015 	stw	r16,0(sp)
   2d8a0:	dfc00115 	stw	ra,4(sp)
   2d8a4:	2021883a 	mov	r16,r4
   2d8a8:	002d9480 	call	2d948 <__call_exitprocs>
   2d8ac:	008000f4 	movhi	r2,3
   2d8b0:	10be6e04 	addi	r2,r2,-1608
   2d8b4:	11000017 	ldw	r4,0(r2)
   2d8b8:	20800f17 	ldw	r2,60(r4)
   2d8bc:	10000126 	beq	r2,zero,2d8c4 <exit+0x30>
   2d8c0:	103ee83a 	callr	r2
   2d8c4:	8009883a 	mov	r4,r16
   2d8c8:	002dae80 	call	2dae8 <_exit>

0002d8cc <memcmp>:
   2d8cc:	01c000c4 	movi	r7,3
   2d8d0:	3980192e 	bgeu	r7,r6,2d938 <memcmp+0x6c>
   2d8d4:	2904b03a 	or	r2,r5,r4
   2d8d8:	11c4703a 	and	r2,r2,r7
   2d8dc:	10000f26 	beq	r2,zero,2d91c <memcmp+0x50>
   2d8e0:	20c00003 	ldbu	r3,0(r4)
   2d8e4:	28800003 	ldbu	r2,0(r5)
   2d8e8:	1880151e 	bne	r3,r2,2d940 <memcmp+0x74>
   2d8ec:	31bfff84 	addi	r6,r6,-2
   2d8f0:	01ffffc4 	movi	r7,-1
   2d8f4:	00000406 	br	2d908 <memcmp+0x3c>
   2d8f8:	20c00003 	ldbu	r3,0(r4)
   2d8fc:	28800003 	ldbu	r2,0(r5)
   2d900:	31bfffc4 	addi	r6,r6,-1
   2d904:	18800e1e 	bne	r3,r2,2d940 <memcmp+0x74>
   2d908:	21000044 	addi	r4,r4,1
   2d90c:	29400044 	addi	r5,r5,1
   2d910:	31fff91e 	bne	r6,r7,2d8f8 <memcmp+0x2c>
   2d914:	0005883a 	mov	r2,zero
   2d918:	f800283a 	ret
   2d91c:	20c00017 	ldw	r3,0(r4)
   2d920:	28800017 	ldw	r2,0(r5)
   2d924:	1880041e 	bne	r3,r2,2d938 <memcmp+0x6c>
   2d928:	31bfff04 	addi	r6,r6,-4
   2d92c:	21000104 	addi	r4,r4,4
   2d930:	29400104 	addi	r5,r5,4
   2d934:	39bff936 	bltu	r7,r6,2d91c <memcmp+0x50>
   2d938:	303fe91e 	bne	r6,zero,2d8e0 <memcmp+0x14>
   2d93c:	003ff506 	br	2d914 <memcmp+0x48>
   2d940:	1885c83a 	sub	r2,r3,r2
   2d944:	f800283a 	ret

0002d948 <__call_exitprocs>:
   2d948:	008000f4 	movhi	r2,3
   2d94c:	10be6e04 	addi	r2,r2,-1608
   2d950:	10800017 	ldw	r2,0(r2)
   2d954:	defff304 	addi	sp,sp,-52
   2d958:	df000b15 	stw	fp,44(sp)
   2d95c:	d8800015 	stw	r2,0(sp)
   2d960:	10805204 	addi	r2,r2,328
   2d964:	dd400815 	stw	r21,32(sp)
   2d968:	dfc00c15 	stw	ra,48(sp)
   2d96c:	ddc00a15 	stw	r23,40(sp)
   2d970:	dd800915 	stw	r22,36(sp)
   2d974:	dd000715 	stw	r20,28(sp)
   2d978:	dcc00615 	stw	r19,24(sp)
   2d97c:	dc800515 	stw	r18,20(sp)
   2d980:	dc400415 	stw	r17,16(sp)
   2d984:	dc000315 	stw	r16,12(sp)
   2d988:	d9000115 	stw	r4,4(sp)
   2d98c:	2839883a 	mov	fp,r5
   2d990:	d8800215 	stw	r2,8(sp)
   2d994:	057fffc4 	movi	r21,-1
   2d998:	d8800017 	ldw	r2,0(sp)
   2d99c:	ddc00217 	ldw	r23,8(sp)
   2d9a0:	14805217 	ldw	r18,328(r2)
   2d9a4:	90001726 	beq	r18,zero,2da04 <__call_exitprocs+0xbc>
   2d9a8:	94400117 	ldw	r17,4(r18)
   2d9ac:	8c3fffc4 	addi	r16,r17,-1
   2d9b0:	80001116 	blt	r16,zero,2d9f8 <__call_exitprocs+0xb0>
   2d9b4:	8c400044 	addi	r17,r17,1
   2d9b8:	8427883a 	add	r19,r16,r16
   2d9bc:	8c63883a 	add	r17,r17,r17
   2d9c0:	95802204 	addi	r22,r18,136
   2d9c4:	9ce7883a 	add	r19,r19,r19
   2d9c8:	8c63883a 	add	r17,r17,r17
   2d9cc:	b4e7883a 	add	r19,r22,r19
   2d9d0:	9463883a 	add	r17,r18,r17
   2d9d4:	e0001726 	beq	fp,zero,2da34 <__call_exitprocs+0xec>
   2d9d8:	8c87c83a 	sub	r3,r17,r18
   2d9dc:	b0c7883a 	add	r3,r22,r3
   2d9e0:	18c01e17 	ldw	r3,120(r3)
   2d9e4:	1f001326 	beq	r3,fp,2da34 <__call_exitprocs+0xec>
   2d9e8:	843fffc4 	addi	r16,r16,-1
   2d9ec:	9cffff04 	addi	r19,r19,-4
   2d9f0:	8c7fff04 	addi	r17,r17,-4
   2d9f4:	857ff71e 	bne	r16,r21,2d9d4 <__call_exitprocs+0x8c>
   2d9f8:	00800034 	movhi	r2,0
   2d9fc:	10800004 	addi	r2,r2,0
   2da00:	10002a1e 	bne	r2,zero,2daac <__call_exitprocs+0x164>
   2da04:	dfc00c17 	ldw	ra,48(sp)
   2da08:	df000b17 	ldw	fp,44(sp)
   2da0c:	ddc00a17 	ldw	r23,40(sp)
   2da10:	dd800917 	ldw	r22,36(sp)
   2da14:	dd400817 	ldw	r21,32(sp)
   2da18:	dd000717 	ldw	r20,28(sp)
   2da1c:	dcc00617 	ldw	r19,24(sp)
   2da20:	dc800517 	ldw	r18,20(sp)
   2da24:	dc400417 	ldw	r17,16(sp)
   2da28:	dc000317 	ldw	r16,12(sp)
   2da2c:	dec00d04 	addi	sp,sp,52
   2da30:	f800283a 	ret
   2da34:	91000117 	ldw	r4,4(r18)
   2da38:	88c00017 	ldw	r3,0(r17)
   2da3c:	213fffc4 	addi	r4,r4,-1
   2da40:	24001526 	beq	r4,r16,2da98 <__call_exitprocs+0x150>
   2da44:	88000015 	stw	zero,0(r17)
   2da48:	183fe726 	beq	r3,zero,2d9e8 <__call_exitprocs+0xa0>
   2da4c:	00800044 	movi	r2,1
   2da50:	1408983a 	sll	r4,r2,r16
   2da54:	91406217 	ldw	r5,392(r18)
   2da58:	95000117 	ldw	r20,4(r18)
   2da5c:	214a703a 	and	r5,r4,r5
   2da60:	28000b26 	beq	r5,zero,2da90 <__call_exitprocs+0x148>
   2da64:	91406317 	ldw	r5,396(r18)
   2da68:	2148703a 	and	r4,r4,r5
   2da6c:	20000c1e 	bne	r4,zero,2daa0 <__call_exitprocs+0x158>
   2da70:	99400017 	ldw	r5,0(r19)
   2da74:	d9000117 	ldw	r4,4(sp)
   2da78:	183ee83a 	callr	r3
   2da7c:	90c00117 	ldw	r3,4(r18)
   2da80:	1d3fc51e 	bne	r3,r20,2d998 <__call_exitprocs+0x50>
   2da84:	b8c00017 	ldw	r3,0(r23)
   2da88:	1cbfd726 	beq	r3,r18,2d9e8 <__call_exitprocs+0xa0>
   2da8c:	003fc206 	br	2d998 <__call_exitprocs+0x50>
   2da90:	183ee83a 	callr	r3
   2da94:	003ff906 	br	2da7c <__call_exitprocs+0x134>
   2da98:	94000115 	stw	r16,4(r18)
   2da9c:	003fea06 	br	2da48 <__call_exitprocs+0x100>
   2daa0:	99000017 	ldw	r4,0(r19)
   2daa4:	183ee83a 	callr	r3
   2daa8:	003ff406 	br	2da7c <__call_exitprocs+0x134>
   2daac:	90c00117 	ldw	r3,4(r18)
   2dab0:	1800071e 	bne	r3,zero,2dad0 <__call_exitprocs+0x188>
   2dab4:	90c00017 	ldw	r3,0(r18)
   2dab8:	18000926 	beq	r3,zero,2dae0 <__call_exitprocs+0x198>
   2dabc:	9009883a 	mov	r4,r18
   2dac0:	b8c00015 	stw	r3,0(r23)
   2dac4:	00000000 	call	0 <__alt_mem_tightly_coupled_instruction_memory-0x20000>
   2dac8:	bc800017 	ldw	r18,0(r23)
   2dacc:	003fb506 	br	2d9a4 <__call_exitprocs+0x5c>
   2dad0:	90c00017 	ldw	r3,0(r18)
   2dad4:	902f883a 	mov	r23,r18
   2dad8:	1825883a 	mov	r18,r3
   2dadc:	003fb106 	br	2d9a4 <__call_exitprocs+0x5c>
   2dae0:	0007883a 	mov	r3,zero
   2dae4:	003ffb06 	br	2dad4 <__call_exitprocs+0x18c>

0002dae8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2dae8:	defffc04 	addi	sp,sp,-16
   2daec:	df000315 	stw	fp,12(sp)
   2daf0:	df000304 	addi	fp,sp,12
   2daf4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2daf8:	0001883a 	nop
   2dafc:	e0bfff17 	ldw	r2,-4(fp)
   2db00:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   2db04:	e0bffd17 	ldw	r2,-12(fp)
   2db08:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2db0c:	e0bffe17 	ldw	r2,-8(fp)
   2db10:	10000226 	beq	r2,zero,2db1c <_exit+0x34>
    ALT_SIM_FAIL();
   2db14:	002af070 	cmpltui	zero,zero,43969
   2db18:	00000106 	br	2db20 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   2db1c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2db20:	003fff06 	br	2db20 <_exit+0x38>
